Debugging 
==========

Debugging optical photon propagation using NumPy + ipython
-------------------------------------------------------------

Using *num_hits* to debug an optical propagation is hopeless.

You need to enable photon step-by-step recording and 
save the corresponding arrays in NumPy .npy files.
Then you can examine the parameters of all the photons including
history flags at every step point of their propagation
(up to a configured maximum number of step points) from
interactive ipython sessions.::

    ipython> a = np.load("/path/to/photon.npy")

You could then make plots drawing the paths of the photons.
I recommend pyvista if your want to do that
A convenient way to install pyvista is to use anaconda.
The more commonly used matplotlib python plotting library
is not good with 3D plotting or large data sets.

To save the arrays you need to::

    export OPTICKS_EVENT_MODE=StandardFullDebug   # configure step point recording
    export G4CXOpticks__simulate_saveEvent=1      # enable saveEvent from G4CXOpticks::simulate

    # optionally enable logging in relevant classes
    export G4CXOpticks=INFO
    export SEventConfig=INFO


What OPICKS_EVENT_MODE does
-------------------------------

To see how OPTICKS_EVENT_MODE works look at::

    sysrap/SEventConfig.hh
    sysrap/SEventConfig.cc

Especially::

    324 int SEventConfig::Initialize() // static
    325 {
    326     const char* mode = EventMode();
    327     int maxbounce = MaxBounce();
    328
    329     if(strcmp(mode, Default) == 0 )
    330     {
    331         SetCompMaskAuto() ;   // comp set based on Max values
    332     }
    333     else if(strcmp(mode, StandardFullDebug) == 0 )
    334     {
    335         SEventConfig::SetMaxRecord(maxbounce+1);
    336         SEventConfig::SetMaxRec(maxbounce+1);
    337         SEventConfig::SetMaxSeq(maxbounce+1);
    338         SEventConfig::SetMaxPrd(maxbounce+1);
    339
    340         // since moved to compound sflat/stag so MaxFlat/MaxTag should now either be 0 or 1, nothing else
    341         SEventConfig::SetMaxTag(1);
    342         SEventConfig::SetMaxFlat(1);
    343         SetCompMaskAuto() ;   // comp set based on Max values
    344     }
    345     else
    346     {
    347         LOG(fatal) << "mode [" << mode << "] IS NOT RECOGNIZED "  ;
    348         LOG(fatal) << " options : " << Default << "," << StandardFullDebug ;
    349         assert(0);
    350     }



Saving Photon Propagations into NumPy arrays
----------------------------------------------

To see what G4CXOpticks__simulate_saveEvent is doing look at g4cx/G4CXOpticks.cc simulate method. 


The directory where the numpy arrays is saved is based
on your executable name and the event index you set with::

   SEvt::SetIndex(eventid);

Enable logging in SEvt to see what it is::

    export SEvt=INFO

Opticks has lots of python machinery for loading and presenting
such NumPy .npy arrays in the "ana" directory and all over the place.
However it is better to examine them manually using ipython to begin with,
because most people will need to improve their NumPy+ipython skills
to make best use of this debugging info and to be able to understand
the python machinery.




Debugging Lack of Hits
---------------------------

*hits* are the subset of *photons* with flagmask matching the hitmask (default SURFACE_DETECT)
so when you get no hits it means that none of your photons .flagmask has
all the bits of the hitmask set.

You can of course select the hits array from the photons array using one line of NumPy,
but that will just match with NumPy what the C++/CUDA would do.

You can learn about the mechanics of hit selection in::

   ~/opticks/notes/mechanics_of_hit_selection.rst
   https://bitbucket.org/simoncblyth/opticks/src/master/notes/mechanics_of_hit_selection.rst



