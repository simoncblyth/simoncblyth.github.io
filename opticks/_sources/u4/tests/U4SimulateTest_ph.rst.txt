U4SimulateTest_ph.rst
=======================

Looking for records that cross between multiple PMTs by looking at ReplicaNumber at each step point:: 

    In [33]: np.c_[np.arange(len(i_rp)),i_rp,n_rp,u_rp]
    Out[33]: 
    array([[   0,   88,    3,   -1,   -1,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   1,  116,    2,   -1,   -1,   -1, 1000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   2,   57,   10,   -1,   -1,   -1, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   3,   80,    1,   -1,   -1,   -1, 4000, 4000,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   4,   49,    1,   -1,   -1,   -1, 4000, 4000,   -1, 3000, 3000,   -1, 2000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   5,   77,    5,   -1,   -1,   -1, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   6,  938,    1,   -1,   -1,   -1, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   7,  936,    1,   -1,   -1,   -1, 4000, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   8,  921,    1,   -1,   -1,   -1, 4000, 4000, 4000, 4000, 4000, 4000,   -1,   -1, 2000,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [   9,  111,    9,   -1,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  10,    0,   70,   -1,   -1, 1000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  11,    2,    1,   -1,   -1, 1000, 1000,   -1,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  12,   34,    3,   -1,   -1, 1000, 1000,   -1, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  13,  926,   60,   -1,   -1, 3000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  14,  934,    4,   -1,   -1, 3000, 3000,   -1, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  15,  942,    1,   -1,   -1, 3000, 3000,   -1, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  16,   81,  560,   -1,   -1, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  17,   87,    4,   -1,   -1, 4000, 4000,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  18,  132,    5,   -1,   -1, 4000, 4000,   -1, 1000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  19,  221,    1,   -1,   -1, 4000, 4000,   -1, 1000, 1000,   -1, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  20,  199,    1,   -1,   -1, 4000, 4000,   -1, 1000, 1000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  21,  144,    1,   -1,   -1, 4000, 4000,   -1, 1000, 1000, 1000, 1000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  22,  152,    1,   -1,   -1, 4000, 4000,   -1, 1000, 1000, 1000, 1000, 1000, 1000,   -1, 4000,    0,    0,    0,    0,    0,    0,    0,    0],
           [  23,  574,    1,   -1,   -1, 4000, 4000,   -1, 2000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  24,  447,    1,   -1,   -1, 4000, 4000,   -1, 2000, 2000,   -1, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000],
           [  25,  444,    1,   -1,   -1, 4000, 4000,   -1, 2000, 2000, 2000, 2000, 2000, 2000,   -1, 4000,    0,    0,    0,    0,    0,    0,    0,    0],
           [  26,  686,    7,   -1,   -1, 4000, 4000,   -1, 3000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  27,  848,    1,   -1,   -1, 4000, 4000,   -1, 3000, 3000,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  28,  770,    1,   -1,   -1, 4000, 4000,   -1, 3000, 3000, 3000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  29,  707,    1,   -1,   -1, 4000, 4000,   -1, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000,    0,    0],
           [  30,  167,  124,   -1,   -1, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  31,   91,   44,   -1,   -1, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  32,  107,   32,   -1,   -1, 4000, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  33,  345,    1,   -1,   -1, 4000, 4000, 4000, 4000, 4000,   -1, 2000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],

::

    In [34]: np.where( v_rp == 24 )                                                                                                                              
    Out[34]: (array([447]),)

    In [35]: np.where( v_rp == 39 )                                                                                                                              
    Out[35]: (array([189, 194, 285, 776, 808]),)

    In [36]: rp[v_rp == 39]                                                                                                                                      
    Out[36]: 
    array([[  -1,   -1, 4000, 4000, 4000, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  -1,   -1, 4000, 4000, 4000, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  -1,   -1, 4000, 4000, 4000, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  -1,   -1, 4000, 4000, 4000, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0],
           [  -1,   -1, 4000, 4000, 4000, 4000, 4000, 4000,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0]], dtype=int32)

    In [37]: rp[v_rp == 24]                                                                                                                                      
    Out[37]: array([[  -1,   -1, 4000, 4000,   -1, 2000, 2000,   -1, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]], dtype=int32)

    In [38]: np.where(v_rp == 24)                                                                                                                                
    Out[38]: (array([447]),)

    In [39]: seqhis_(t.seq[447,0])                                                                                                                               
    Out[39]: ['TO BT BR BT BT BR BT BT BT SR SR SR SR SR SR SR', 'SR SR SR SR SA']



