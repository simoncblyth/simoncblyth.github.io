
.. meta::
   :title: Status of Opticks : GPU Optical Photon Simulation for Particle Physics with NVIDIA OptiX
   :event: SJTU Shanghai JUNO Collaboration Meeting 
   :date: Jan 2019
   :description: Progress on validation, JUNO PMT profligate modelling 

.. include:: my_s5defs.txt


:i:`Opticks : GPU Optical Photon Simulation for Particle Physics with NVIDIA OptiX` 
========================================================================================

.. raw:: html

    <div class="mytitle">
    <h1 style="background-color:lightgrey"> 
          <span class="alarm">Status of </span> 
          <i>Opticks</i> : GPU Optical Photon Simulation for Particle Physics with NVIDIA® OptiX™ 
    </h1>
    </div>

    <div class="mycredit">
    <h2 style="background-color:lightgrey"> Simon C Blyth, IHEP &mdash; https://bitbucket.org/simoncblyth/opticks &mdash; Jan 2019, SJTU, Shanghai </h2>
    </div>



Contents
----------------------------------------------------

.. image:: /env/presentation/newtons-opticks.png 
   :width: 299px
   :height: 547px 
   :align: right


.. class:: small


    .. raw:: html

       <span>&nbsp;</span>


    * Optical Photon Simulation Problem...

      * Huge CPU Memory+Time Expense

    * Ray tracing and Rasterization  
    * Rendering + Photon Simulation : Limited by Ray Geometry Intersection
    * NVIDIA OptiX Ray Tracing Engine
    
      * Boundary Volume Heirarchy (BVH) algorithm

    * GPU Geometry starts from ray-primitive intersection
    * Ray intersection with general CSG binary trees, on GPU
    * Torus : much more difficult/expensive than other primitives
    * CSG : (Cylinder - Torus) PMT neck : spurious intersects
    * CSG : Alternative PMT neck designs

    * Translate Geant4 Geometry to GPU, Without Approximation 
    * Translate Geant4 Optical Physics to GPU (OptiX/CUDA)
    * Random Aligned Validation : Direct comparison of GPU/CPU NumPy arrays
    * Progress on Validation : JUNO Geometry Issues
    * Progress on Ease-of-use

    * Opticks : Aims to Revolutionize JUNO Muon Simulation
    * Links


    .. raw:: html

       <span></span>





`Optical Photon Simulation Problem...`
---------------------------------------------------------

:i:`JPMT Before Contact 2`
--------------------------


.. sidebar:: :small:`Huge CPU Memory+Time Expense`

    .. class:: small

         **JUNO Muon Simulation Bottleneck**
           ~99% CPU time, memory constraints

         **Optical photons : naturally parallel, simple :**
           * produced by Cerenkov+Scintillation 
           * yield only Photomultiplier hits

         **-> Hybrid Solution : Geant4 + Opticks** 


:i:`Ray-tracing vs Rasterization`
-----------------------------------

.. image:: /env/presentation/nvidia/nv_rasterization.png
   :width: 550px
   :align: left

.. image:: /env/presentation/nvidia/nv_raytrace.png
   :width: 550px
   :align: right


.. comment

   Rasterization
   
   * starts from the objects in a scene, and projects them onto pixels in image plane
   * approximation : usually triangulated geometry   
   
   ray-tracing 
  
   * closer to the physics -> easier to create realistic images with raytracing 
   * can use analytic geometry, rasterization is  


:small:`Rendering + Photon Simulation : Limited by Ray Geometry Intersection`
----------------------------------------------------------------------------------------

.. sidebar:: Not a Photo, a Calculation

    .. image:: /env/optix/samples/optix-ray-tracing-glasses.png 
       :width: 450px
       :align: right


.. class:: small

    **Ray Tracing Tools can Help Optical Photon Simulation**

    * industry continuously improving ray trace performance 
    * NVIDIA Turing GPU : raytrace dedicated "RT Cores"  
      
      * Up to *"11 GigaRays per second"* per GPU 

.. class:: tiny

   https://nvidianews.nvidia.com/news/nvidia-reveals-the-titan-of-turing-titan-rtx



:small:`NVIDIA® OptiX™ Ray Tracing Engine -- http://developer.nvidia.com/optix`
--------------------------------------------------------------------------------

.. sidebar:: OptiX Raytracing Pipeline

    .. class:: small

       Analogous to OpenGL rasterization pipeline:

    .. image:: /env/optix/docs/optix-model.png
       :width: 450px
       :align: right

.. class:: small

   **OptiX makes GPU ray tracing accessible**

   * **accelerates** ray-geometry intersections
   * simple : single-ray programming model
   * "...free to use within any application..."

   **NVIDIA expertise:**

   * ~linear scaling with CUDA cores across multiple GPUs
   * acceleration structure creation + traversal (Blue)
   * instanced sharing of geometry + acceleration structures
   * :red:`compiler optimized for GPU ray tracing`
   * regular updates, profit from new GPU features:

     * NVIDIA RTX™ with Volta, Turing GPUs

.. class:: tiny

       ``https://developer.nvidia.com/rtx``

.. class:: small

   **User provides (Yellow):**

   * ray generation
   * geometry bounding box, intersects 



:i:`BVH`
---------------------------




:small:`Opticks : GPU Geometry starts from ray-primitive intersection`
-------------------------------------------------------------------------------------------------

.. class:: small

   * 3D parametric ray : **ray(x,y,z;t) = rayOrigin  +  t * rayDirection** 
   * implicit equation of primitive : **f(x,y,z) = 0**  
   * -> polynomial in **t** , roots: **t > t_min**  -> intersection positions + surface normals

.. figure:: /env/presentation/tboolean_parade_sep2017.png
   :width: 900px
   :align: center

   :red:`CUDA/OptiX intersection for ~10 primitives` -> :blue:`Exact geometry translation`



:small:`Ray intersection with general CSG binary trees, on GPU`
---------------------------------------------------------------------------------

.. sidebar:: Outside/Inside Unions

    .. class:: small

       dot(normal,rayDir) -> Enter/Exit

    .. image:: /env/presentation/kensler_union_of_two_spheres_from_outside.png
       :width: 300px
       :align: center

    .. image:: /env/presentation/kensler_union_of_two_spheres_from_inside.png
       :width: 300px
       :align: center

    .. class:: small

        * **A + B** boundary not inside other 
        * **A * B** boundary inside other 


.. class:: small

   Pick between pairs of nearest intersects, eg:

   =======================  ===========  ===============  ============== 
   *UNION* tA < tB           Enter B      Exit B           Miss B
   =======================  ===========  ===============  ============== 
   **Enter A**               ReturnA      :blue:`LoopA`    ReturnA
   **Exit A**                ReturnA      ReturnB          ReturnA 
   **Miss A**                ReturnB      ReturnB          ReturnMiss
   =======================  ===========  ===============  ============== 

   * *Nearest hit intersect algorithm* [1] avoids state

     * sometimes :blue:`Loop` : advance **t_min** , re-intersect both 
     * classification shows if inside/outside

   * *Evaluative* [2] implementation emulates recursion: 

     * :red:`recursion not allowed` in OptiX intersect programs
     * bit twiddle traversal of complete binary tree 
     * stacks of postorder slices and intersects 

   * :red:`Identical geometry to Geant4` 

     * solving the same polynomials 
     * near perfect intersection match



.. class:: tiny

    [1] Ray Tracing CSG Objects Using Single Hit Intersections, Andrew Kensler (2006)
        with corrections by author of XRT Raytracer http://xrt.wikidot.com/doc:csg
 
    [2] https://bitbucket.org/simoncblyth/opticks/src/tip/optixrap/cu/csg_intersect_boolean.h
        Similar to binary expression tree evaluation using postorder traverse. 





:small:`Torus : much more difficult/expensive than other primitives`
------------------------------------------------------------------------

.. sidebar:: Torus artifacts

    .. image:: /env/presentation/tboolean_torus_orthographic_artifact.png
       :width: 400px
       :align: right

   .. image:: /env/presentation/torus_eqn_sqrt.png
       :width: 400px
       :align: right

   .. image:: /env/presentation/torus_eqn_quartic.png
       :width: 400px
       :align: right


.. class:: small

   3D parametric ray : **ray(x,y,z;t) = rayOrigin  +  t * rayDirection** 

   * ray-torus intersection -> solve quartic polynomial in **t**  
   *  A t^4 + B t^3 + C t^2 + D t + E = 0 

   **Solving Quartics**

   * requires double precision 
   * very large difference between coefficients 
   * varying ray -> wide range of coefficients
   * numerically problematic
   * several mathematical approaches tried : :red:`no clear winner`
   * adopted approach[1] avoids artifacts in primitives, but still has issues in CSG combinations

   **Best Solution : avoid Torus**

   * avoids the expense as well as the problems
   * eg model PMT neck with hyperboloid or polycone, not cylinder-torus

  
.. class:: tiny

   [1] Depressed quartic + resolvent cubic

   https://bitbucket.org/simoncblyth/opticks/src/tip/optixrap/cu/csg_intersect_torus.h

   https://bitbucket.org/simoncblyth/opticks/src/tip/optixrap/cu/SolveQuartic.h

 

:small:`Torus : different artifacts as change implementation/params/viewpoint`
--------------------------------------------------------------------------------

.. class:: small

   * :red:`Wide variety of artifacts as change viewpoint, changing quartic coefficients`


.. image:: /env/presentation/torus_cloud_artifact_2017_08_14.png
   :width: 500px
   :align: left

.. image:: /env/presentation/torus_cuts_artifact_2017_08_08.png
   :width: 550px
   :align: right

.. image:: /env/presentation/torus_fan_artifact_2017_07_28.png
   :width: 350px
   :align: right
 



:small:`CSG : (Cylinder - Torus) PMT neck : spurious intersects`
---------------------------------------------------------------------------------


.. image:: /env/presentation/tboolean_12_rasterized.png
   :width: 550px
   :align: right

.. image:: /env/presentation/tboolean_12_raytrace.png
   :width: 550px
   :align: left

.. class:: small

    OptiX Raytrace and OpenGL rasterized wireframe comparing neck models:

    1. Ellipsoid + Hyperboloid + Cylinder
    2. Ellipsoid + :red:`(Cylinder - Torus)` + Cylinder 

    * unfortunately Geant4 does not support z-cut hyperboloid, so use polycone ?

    **Best Solution : use simpler model for optically unimportant PMT neck** 




:small:`CSG : Alternative PMT neck designs`
----------------------------------------------------------------------------

.. image:: /env/presentation/x018_torus_hyperboloid_plt.png
   :width: 550px
   :align: left

.. image:: /env/presentation/x018_torus_hyperboloid_plt_zoom.png
   :width: 500px
   :align: right

.. class:: small

   Hyperboloid and Cone defined using *closest point on ellipse to center of torus circle* 

   * Cylinder-Torus : purple line, Cone : green, **simplest** 
   * Hyperboloid : dashed magenta, works with *Opticks*, BUT *G4Hype* has no z-range flexibility 

.. class:: tiny

    https://bitbucket.org/simoncblyth/opticks/src/tip/ana/x018_torus_hyperboloid_plt.py 






:i:`j1808_top_rtx`
--------------------

:i:`j1808_top_ogl`
--------------------


:small:`Opticks : Translate Geant4 Geometry to GPU, Without Approximation`
------------------------------------------------------------------------------------

.. sidebar:: :small:`Direct Geometry Translation`

    .. class:: small

        * :red:`2018:` **full reimplementation of translation**
        * automatic geo-management, simplifying usage       
        * unified handling of analytic and triangulated
        * no separate export+import stages 
        * substantial reduction in Opticks code
        * dependencies eliminated : Assimp, G4DAE
        * G4 geometry[1] auto-translated to Opticks CSG 
        * geocache persisted, staleness check by digest

.. class:: small

    **Direct Geometry : Geant4 "World" -> Opticks CSG -> GPU**
      * much simpler : fully automated geo-management 

    **Material/Surface/Scintillator properties**
      * interpolated to standard wavelength domain
      * interleaved into "boundary" texture  
      * "reemission" texture for wavelength generation 

    **Structure**
      * repeated geometry instances identified (progeny digests)
      * instance transforms used in OptiX/OpenGL geometry 
      * merge CSG trees into global + instance buffers 
      * export meshes to glTF 2.0 for 3D visualization

    **Ease of Use**
      * easy geometry : just handover "World"
     
    .. class:: tiny

        [1] G4 primitives used need corresponding Opticks implementations, contributions for 
            any unsupported geometry are welcome 
          


:small:`Opticks : Translate Geant4 Optical Physics to GPU (OptiX/CUDA)`
--------------------------------------------------------------------------

.. sidebar:: :small:`GPU Resident Photons`

    .. class:: small

       **Seeded on GPU** 
          associate photons -> *gensteps* (via seed buffer)
 
       **Generated on GPU, using genstep param:**
         * number of photons to generate
         * start/end position of step
         * *gensteps* : hybrid CPU+GPU generation

       **Propagated on GPU**
          :red:`Only photons hitting PMTs copied to CPU`


       Thrust: **high level C++ access to CUDA**

       .. figure:: /env/numerics/thrust/thrust.png
          :width: 300px
          :align: right

       * https://developer.nvidia.com/Thrust
       
                  
.. class:: small

    :blue:`OptiX : single-ray programming model` -> line-by-line translation

    **CUDA Ports of Geant4 classes**
      * G4Cerenkov (only generation loop) 
      * G4Scintillation (only generation loop) 
      * G4OpAbsorption
      * G4OpRayleigh 
      * G4OpBoundaryProcess (only a few surface types)

    **Modify Cerenkov + Scintillation Processes**
      * collect *genstep*, copy to GPU for generation
      * :red:`avoids copying millions of photons to GPU`

    **Scintillator Reemission**
      * fraction of bulk absorbed "reborn" within same thread
      * wavelength generated by reemission texture lookup

    **Opticks (OptiX/Thrust GPU interoperation)** 
      * **OptiX** : upload gensteps 
      * **Thrust** : seeding, distribute genstep indices to photons
      * **OptiX** : launch photon generation and propagation
      * **Thrust** : pullback photons that hit PMTs 
      * **Thrust** : index photon step sequences (optional)



:small:`Random Aligned Validation : Direct comparison of GPU/CPU NumPy arrays`
------------------------------------------------------------------------------------


.. sidebar:: :small:`bi-simulation direct matching`

    .. class:: small

        **Align CPU/GPU Random Number Sequences**
          G4 random engine providing *cuRAND* sequence

        **"Align" CPU/GPU codes (some jumps)**
          :red:`simplest possible direct comparison`

        **Simple geometries**
          same geometry, same physics, same results 

        **JUNO geometry** : issue iteration in progress   

 
.. class:: small

   **tboolean-box simple geometry test : compare Opticks events**

   * 100k photons : position, time, polarization : 1.2M floats
   * 34 deviations > 1e-4 (mm or ns), largest 4e-4
   * deviants all involve scattering (more flops?)

.. raw:: html

    <pre class="mypretiny">

    In [11]: pdv = np.where(dv > 0.0001)[0]
    In [12]: ab.dumpline(pdv)
          0   1230 : TO BR SC BT BR BT SA         
          1   2413 : TO BT BT SC BT BR BR BT SA  
          2   9041 : TO BT SC BR BR BR BR BT SA 
          3  14510 : TO SC BT BR BR BT SA      
          4  14747 : TO BT SC BR BR BR BR BR BR BR 
          5  14747 : TO BT SC BR BR BR BR BR BR BR
        ...

    In [20]: ab.b.ox[pdv,0]                                 In [21]: ab.a.ox[pdv,0]
    Out[20]:                                                Out[21]: 
    A()sliced                                               A()sliced
    A([    [-191.6262, -240.3634,  450.    ,    5.566 ],    A([    [-191.626 , -240.3634,  450.    ,    5.566 ],
           [ 185.7708, -133.8457,  450.    ,    7.3141],           [ 185.7708, -133.8456,  450.    ,    7.3141],
           [-450.    , -104.4142,  311.143 ,    9.0581],           [-450.    , -104.4142,  311.1431,    9.0581],
           [  83.6955,  208.9171, -450.    ,    5.6188],           [  83.6954,  208.9172, -450.    ,    5.6188],
           [  32.8972,  150.    ,   24.9922,    7.6757],           [  32.8973,  150.    ,   24.992 ,    7.6757],
           [  32.8972,  150.    ,   24.9922,    7.6757],           [  32.8973,  150.    ,   24.992 ,    7.6757],
           [ 450.    , -186.7449,  310.6051,    5.0707],           [ 450.    , -186.7451,  310.605 ,    5.0707],
           [ 299.2227,  318.1443, -450.    ,    4.8717],           [ 299.2229,  318.144 , -450.    ,    4.8717],
     ...
    </pre>

.. class:: tiny

    http://bitbucket.com/simoncblyth/opticks/src/tip/notes/issues/tboolean_box_perfect_alignment_small_deviations.rst





:small:`Opticks : Progress on Validation : JUNO geometry issues`
---------------------------------------------------------------------------------

.. sidebar:: :small:`Dual pro/dev bi-simulation`

     .. class:: small
        
          production executable 
             *Opticks* embedded inside *Geant4* app, with minimal *G4Opticks* API 

          development executable
             *Geant4* embedded inside *Opticks*, steals *geocache* + *gensteps* from production, 
             does fully instrumented propagations

          best-of-both-worlds
             same bi-propagations duplicated in production + development environments


.. class:: small

  **5/40 JUNO solids with CSG translation issues** 

  PMT_20inch_body/pmt_solid 
      use of "cylinder - torus"

      * :red:`causes spurious intersects`
      * fix : polycone neck 
      * z-cut hyperboloid not supported by Geant4

  PMT_20inch_inner1/2_solid
      uses depth 4 tree (31 nodes) where 1 primitive sufficient

      * :blue:`profligate modelling`
      * fix : z-cut ellipsoid cathode

  sAirTT
      box subtract a cylinder with coincident face

      * fix : grow subtracted cylinder to avoid coincidence 

  **Next step** : make these geometry changes then proceed to next issue 

.. class:: tiny

   https://bitbucket.org/simoncblyth/opticks/src/tip/notes/issues/OKX4Test_j1808_x4gen_csg_solids_survey.rst







:small:`Opticks : Progress on Ease-of-Use`
----------------------------------------------------------------------------------------

.. comment

    Opticks operates mostly at the level of Geant4 and
    it can benefit anyone with a simulation limited by optical photons, 
    so some kind of integration with Geant4 is needed.

    The ultimate ease-of-use goal is for Opticks acceleration 
    to be transparently applied, Geant4 just getting a lot faster and
    less memory hungry when a compatible GPU is available.
    We are a long way from that ultimate.

    In discussions about this with several Geant4 coordinators 
    the conclusion was to initially aim for an Opticks advanced example 
    to be included with the Geant4 distribution 

.. comment

    The experience of trying to get several users up and running
    with Opticks at the start of 2018 made me realize how vital  
    ease of use is making  



.. sidebar:: :small:`Aim of Geant4+Opticks Examples`
    
    .. class:: small

        * exposure to *Opticks* for all *Geant4* users 
        * quickstart for *Geant4* + *Opticks* learning / evaluation
        * demonstrate utility of scintillation + Cerenkov *gensteps* to *Geant4* members

.. class:: small


    *Geant4* + *Opticks* History

    **2014** : 19th Geant4 Collaboration Meeting, Okinawa
         proto-Opticks (G4DAE) presented 

    **2017** : 22nd Geant4 Collaboration Meeting, Australia
         presented Opticks (CSG on GPU) to plenary session,  
         discussions on how *Opticks* might be integrated with *Geant4*, 
         :blue:`conclude on an advanced example as initial target`
          
    **2018** : 23rd CHEP Conference, Bulgaria 
         discussions with Geant4 EM/Optical coordinator reach agreement on high level 
         structure of example
 
         * primary concern from *Geant4* members is that ongoing support for the examples
           will be provided  


    **Ease-of-use was focus of 2018 developments**  

    1. Direct Geometry Translation -> :red:`automated geometry management`
    2. Modern CMake with BCM[1] -> :red:`automated configuration`
    3. *G4Opticks* API -> :red:`simple embedding` of *Opticks* within *G4* apps

.. class:: tiny

    [1] Boost CMake 3.5+ modules : configure direct dependencies only
    https://github.com/BoostCMake/cmake_modules
    https://github.com/simoncblyth/bcm         

.. raw:: html

   <span></span>





:small:`Opticks[1] : Aims to Revolutionize JUNO Muon Simulation` 
------------------------------------------------------------------------------

.. sidebar:: :small:`100 GeV muon, millions of photons`

    .. image:: /env/presentation/opticks_juno_pmt_muon_approach_portrait.png
       :width: 450px
       :align: right

.. class:: small

    :blue:`State-of-the-art GPU ray tracing[2] applied to optical simulation`

    * replaces Geant4 optical simulation with GPU equivalent

      * translate G4 geometry to GPU without approximation[3] 
      * port G4 optical physics to CUDA[4] 

    **Optical photons generated+propagated entirely on GPU**
      
    * only photons hitting PMTs require CPU memory 

      * optical photon CPU memory --> ~zero 

    * muon workload perfect for GPUs, *Opticks* > 1000x *Geant4*

      * optical photon CPU time --> ~zero 

    **Status : validation iteration ongoing**  

    * validation by direct comparison of random sequence aligned GPU and CPU simulations
    * minor PMT geometry simplifications needed to proceed to next iteration

    
.. class:: tiny

   [1] Open source project http://bitbucket.org/simoncblyth/opticks 

   [2] NVIDIA OptiX ray tracing engine  

   [3] using innovative Constructive Solid Geometry implementation on GPU

   [4] scattering, boundary, reemission, absorption
 


:small:`Opticks Links`
-------------------------------------------------------------------------------

https://simoncblyth.bitbucket.io
   Opticks presentations and videos

https://juno.ihep.ac.cn/cgi-bin/Dev_DocDB/ShowDocument?docid=3927
   Opticks visualization screen capture movie of JUNO 

https://groups.io/g/opticks
   Opticks mailing list archive 

opticks+subscribe@groups.io 
   send email to this address, to subscribe

.. class:: huge

    https://simoncblyth.bitbucket.io/opticks/index.html
       Opticks installation instructions

    https://bitbucket.org/simoncblyth/opticks
       Opticks code repository





