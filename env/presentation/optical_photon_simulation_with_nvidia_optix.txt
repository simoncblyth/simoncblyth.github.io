
.. comment 

.. raw:: html

    <style type="text/css">
        span.alarm { color: red; } 
        span.warn { color: orange; } 
        span.ok { color: green; } 
        span.i { display: none; } 
        pre.sliteral { class:"literal-block small"; }   
        pre.mypre {
             display: block;
             font-family: monospace;
             white-space: pre;
             margin: 1em 0;
        }

    </style>

.. role:: i 
.. role:: alarm
.. role:: warn
.. role:: ok
.. role:: sliteral
.. role:: mypre 


.. include:: <s5defs.txt>

.. s5_background_image::

    #
    # slide titles and background image urls, 
    # including server relative urls like /env/geant4/geometry/collada/daeview/20140419-170713.png
    # and protocol relative urls like //localhost/env/test/LANS_AD3_CoverGas_Humidity.png
    #
    # NB1 slide titles here must match those in body precisely, 
    # NB2 also ensure all slide titles are unique
    #
    # first slide id is exceptionally: slide0, not the mangled title
    slide0
    /env/geant4/geometry/collada/g4daeview/20140419-170713.png auto_auto 0px_0px

    g4daeview.py : Fast OpenGL 3D viewer for G4DAE files
    /env/geant4/geometry/collada/g4daeview/20140419-170713.png

    Cerenkov Photons Simulation - Top View
    /env/geant4/geometry/collada/g4daeview/20141224-115923.png

    Cerenkov Photons Simulation - Side View
    /env/geant4/geometry/collada/g4daeview/20141224-115935.png

    Scintillation Photons Simulation - Top View
    /env/geant4/geometry/collada/g4daeview/20141224-121444.png

    Scintillation Photons Simulation - Side View
    /env/geant4/geometry/collada/g4daeview/20141224-121435.png

    Standard Geant4 Workflow
    /env/keynotefigs/G4DAEChroma/G4DAEChroma.001.png

    External Photon Simulation Workflow
    /env/keynotefigs/G4DAEChroma/G4DAEChroma.002.png

    GGeoView
    /env/graphics/ggeoview/ggeoview-cerenkov-001.png 1047px_795px

.. comment 

    GGeoView image is 2094x1590 1047x795

    Generated Scintillation Photons GPU cf Geant4
    /env/g4dae/generated_scintillation_time_wavelength.png

    G4/DetSim Generated Cerenkov Wavelength
    /env/g4dae/g4_cerenkov_wavelength.png



======================================================================
Optical Photon Simulation with NVIDIA OptiX
======================================================================

.. class:: small

    http://simoncblyth.bitbucket.org/env/presentation/optical_photon_simulation_with_nvidia_optix.html (May 2015)
    http://simoncblyth.bitbucket.org/env/presentation/gpu_accelerated_geant4_simulation.html (Jan 2015)

.. sidebar:: OptiX Ray Tracing    

   Extreme speed ~200M ray intersections/second/GPU, regular releases,
   performance scales with CUDA cores across multiple GPUs.

.. class:: small

   * Why not Chroma ?
   * Introducing NVIDIA OptiX
   * OptiX testing
   * Chroma to OptiX migration
   * Validating OptiX Generated Photons
   * Next Steps

   |  Simon C Blyth, National Taiwan University
   |  **May 2015** 

.. comment 

    00 : Optical Photon Simulation with NVIDIA OptiX 

   * Why not Chroma ?

     01 : why not chroma ? 

   * Introducing NVIDIA OptiX

     02 : introducing nvidia optix ray tracing engine [c++/c/cuda] 
     03 : ray tracing and optical photon simulation parallels 

   * OptiX testing

     04 : chroma raycast with entire geometry in view 
     05 : optix raycast performance 

   * Chroma to OptiX migration

     06 : status of chroma to optix migration 
     07 : c++ infrastructure : foundation packages 
     08 : c++ infrastructure : domain packages 
     09 : boundary material/surface properties gpu texture 
     10 : ggeoview 

   * Validating OptiX Generated Photons

     11 : ggeo/optix generated scintillation photons cf geant4 
     12 : inverted cdf allows reemission wavelength gpu texture lookup 
     13 : ggeo/optix generated cerenkov photons cf geant4 
     15 : comparison of ggeo/optix generated scintillation photon distributions 
     16 : comparison of ggeo/optix generated cerenkov photon distributions 

     14 : next steps 




:small:`Why not Chroma ?`
------------------------------------------------------- 

.. sidebar:: Lack of multi-GPU support   

   .. class:: small

      Production running demands efficient use 
      of multiple GPUs.  Lack of this difficult
      to implement feature is a :red:`show stopper for Chroma use in production`.

.. class:: small

    :green:`Chroma Features`

    * Python/PyCUDA/NumPy based infrastructure for geometry/photon loading, kernel launch  
    * accelerated geometry intersection using BVH structure 
    * optical photon simulation CUDA kernels 

    :blue:`My additions to Chroma`

    * G4DAE Geometry import
    * G4Step transport and Cerenkov/Scintillation photon generation on GPU
    * OpenGL/CUDA interop visualisations  

    :red:`Missing Features`

    * GPU workload scheduling
    * Multi-GPU support



.. class:: tiny

   https://bitbucket.org/chroma/chroma

   https://bitbucket.org/simoncblyth/chroma  (my fork)



:small:`Introducing NVIDIA OptiX Ray Tracing Engine [C++/C/CUDA]`
-------------------------------------------------------------------

.. sidebar:: OptiX *Tutorial* Sample App

    .. class:: small

        Image pixels calculated by recursively bouncing rays 
        around geometry doing shadow, reflection, refraction calculations.
        Runs at interactive speeds with GeForce GT 750M.

    .. image:: /env/optix/samples/optix-tutorial-10.png 
       :width: 450px
       :align: right


.. class:: small

    * ~200M ray/s/GPU geometry intersections
    * very general ray tracing framework, **no rendering assumptions**
    * regular releases, improvements/tuning for new GPUs

    Ray Trace optimized compiler generates kernel combining 
    user programs: ray generation, object intersection, material shading, ..
    Incorporates NVIDIA expertise on efficient GPU/multi-GPU usage:

    * state machine continuations to implement GPU recursion
    * persistent warps with just enough threads to fill machine
    * load balancing between warps and between GPUs
      
    :red:`Hugely advantageous to let OptiX handle:`   
 
    * acceleration of geometry intersection 
    * efficient GPU/multi-GPU usage

    BUT: OptiX requires NVIDIA GPUs, AMD OpenCL **ray trace renderer** is not equivalent


.. class:: tiny

    https://developer.nvidia.com/optix 

    https://research.nvidia.com/publication/optix-general-purpose-ray-tracing-engine




:small:`Ray Tracing and Optical Photon Simulation Parallels`
--------------------------------------------------------------

.. sidebar:: OptiX *Glass* Sample App

    .. image:: /env/optix/samples/optix-ray-tracing-glasses.png 
       :width: 450px
       :align: right

    .. class:: tiny

        http://on-demand.gputechconf.com/siggraph/2013/presentation/SG3106-Building-Ray-Tracing-Applications-OptiX.pdf


.. class:: small

    Realistic image creation uses physically 
    based techniques and material definitions. Obvious parallels:

    * ray traced rendering : image pixel calculation 
    * optical photon (OP) simulation : PMT hit calculation

    Same rate determining step: :red:`geometry intersection` 

    **Applying** techniques/hardware developed for fast ray tracing 
    can be hugely beneficial to optical photon simulation. 
   
    * expect OP simulation performance >100x Geant4
    * OP processing time becomes effectively zero compared to rest



:small:`Chroma Raycast with entire geometry in view` 
---------------------------------------------------------------- 

.. class:: small

    Render Split into 3x3 CUDA kernel launches, 1 thread per pixel, ~1.8s for 1.23M pixels, 2.4M tris (with [#hw]_)

.. image:: /env/chroma/chroma_camera/20140423-162109.png
   :width: 800px
   :align: center

.. class:: tiny

   .. [#hw] MacBook Pro (2013), NVIDIA GeForce GT 750M 2048 MB ; 
            Workstation GPUs such as NVIDIA Kepler K20 expected at least ~5x faster


:small:`OptiX raycast performance`
--------------------------------------

.. sidebar:: GGeoview OptiX raycast

    .. image:: /env/optix/raycast/optix-raycast-gui-001.png
       :width: 550px
       :align: right

    .. class:: tiny

        https://bitbucket.org/simoncblyth/env/src/tip/graphics/ggeoview/




.. class:: small

    DBNS geometry raycast comparison using mobile GPU

    * OptiX : interactive ~30 fps raycasting
    * Chroma : 1.8s per frame 

.. class:: small

    OptiX sample rendering with 2 GPU IHEP workstation,

    * 2 Tesla K20m (4992 cores) 28.0 ms/f
    * 1 Tesla K20m (2496 cores) 49.1 ms/f
    * 1 GeForce GT 750m (382 cores) 345.1 ms/f
 
    Performance linear with GPU cores, workstation compared to laptop:

    * 13x cores, 12x performance

    :red:`Adoption of OptiX is compelling`:

    * extremely fast intersection performance
    * scales with CUDA cores across multiple GPUs
    * improves with each release, new GPU tuning
    * defer management of acceleration to NVIDIA 



:small:`1000x performance, at a price`
---------------------------------------------------------------------------

.. sidebar:: Performance Linearity with CUDA cores 

    .. image:: /env/g4dae/core_linearity.png
       :width: 500px
       :align: right

.. class:: small 

   OptiX apps can connect to cloud GPU clusters...

   * connection to 1 or more VCAs (each with 8 Maxwell GPUs) 

   * total of **24,576** CUDA cores each


   :red:`100x is enough` to make optical photon processing no longer the rate determining step 


   * How many cores needed ? :red:`to be determined`


.. class:: tiny 

   http://www.nvidia.com/object/visual-computing-appliance.html

   http://on-demand-gtc.gputechconf.com/gtc-quicklink/6bIayc



:small:`OptiX Programming Model`
--------------------------------------------------------------


.. sidebar:: OptiX Control Flow 

    .. image:: /env/optix/docs/optix-model.png
       :width: 450px
       :align: right


.. class:: small


    OptiX provides a :red:`ray tracing pipeline` analogous to OpenGL
    rasterization pipeline. 

    * Blue: OptiX internals 
    * Yellow: User supplied CUDA *Programs* 

    Higher level API than pure CUDA, eg:

    * :red:`shared host/device context system` 


    **Optical Photon Simulation port currently using:**

    *Ray Generation* 
         entry/exit, Cerenkov/Scintillation generation 

    *Intersection* 
         Triangle mesh intersection, boundary index lookup

    *Closest Hit*
         determine ray to boundary orientation


.. class:: tiny
  
    https://research.nvidia.com/sites/default/files/publications/Parker10Optix_1.pdf 






:small:`Status of Chroma to OptiX migration`
---------------------------------------------------------

.. sidebar:: NumPy/PyCUDA to C++/CUDA

      .. class:: small

          OptiX provides C++/C/CUDA APIs.

          Chroma Python infrastructure is great for learning and development
          but inconvenient in production when using multiple
          threads, the standard way to work with multiple GPUs.

          :red:`Reimplementation in C++ adopted as the simplest longterm approach`

          **G4DAEChroma** bridge works asis, just need to change name: **G4DAEOpticks**




.. class:: small

    Infrastructure for geometry/photon GPU loading, kernel launch

    * :green:`C++ re-implementation, initial developments completed`
    * :red:`need to add PMT identity information for hit formation`

    Geometry intersection acceleration 

    * :green:`no longer needed, handled by OptiX`

    Optical photon Cerenkov/Scintillation generation 

    * :green:`port completed and verified to match Geant4`

    Optical photon simulation CUDA kernels 

    * :blue:`port started`

    Visualization application to aid simulation development

    * :blue:`development ongoing in tandem with simulation port needs`




:small:`C++ Infrastructure : foundation packages`
-----------------------------------------------------

.. sidebar:: Replacing Python, NumPy, PyZMQ

    .. class:: small

         Boost Libraries (filesystem, thread, program_options, logging, regex, ptree, Asio)
         and Asio-ZMQ, ZMQ used to replace python packages.  

         NPY format convenient for C++/Python interop:

    .. class:: tiny
    
         ::

             a = np.load("photons.npy")


.. class:: small

   *NPY*
         Array persistency/manipulations inspired by NumPy, 
         using NPY serialization format 

         * 11 classes: G4StepNPY, PhotonsNPY, NPY, ...

   *NumpyServer*
         Asynchronous IO of Geant4 Steps, Photons, Hits.
         Communicates with remote *G4DAEOpticks* process, receiving
         steps and replying with hits. 
         
         * 7 classes : numpydelegate, udp_server, ... 

   *CUDAWrap*
         cuRAND init and persist curandState (pure CUDA)

         * avoids large stack size requirement of cuRAND init within OptiX  
         * 5 classes : cuRANDWrapper, LaunchSequence, LaunchCommon, ..
 

.. class:: tiny

   https://bitbucket.org/simoncblyth/env/src/tip/numerics/npy/

   https://bitbucket.org/simoncblyth/env/src/tip/boost/basio/numpyserver/

   https://bitbucket.org/simoncblyth/env/src/tip/cuda/cudawrap/




:small:`Random Number Generation in OptiX programs`
-----------------------------------------------------

.. class:: small

    **cuRAND library from CUDA toolkit features:**

    * concurrent generation of reproducible pseudorandom number sequences
    * sub-sequences are assigned to each CUDA thread, which maintains position in sub-sequence
    * per-thread state is initialized within CUDA kernel

    **cuRAND Initialization demands large stack size**

    Stack sizes 10x typical for OptiX programs were needed, 
    resulting in slow OptiX running.

    **Workaround:**

    * use separate pure CUDA launches to initialize cuRAND
    * copy curandState back to host and persist to file
    * prior to OptiX launch, copy persisted curandState to GPU
    * OptiX can then use cuRAND without having to initialize it

    Packaged solution into **CUDAWrap**

    * https://bitbucket.org/simoncblyth/env/src/tip/cuda/cudawrap/


:small:`C++ Infrastructure : domain packages`
-----------------------------------------------------


.. sidebar:: Replacing Python packages

    .. class:: small

         Many C++ classes required to replace:
 
         * PyCOLLADA
         * PyOpenGL + glumpy + OpenGL 2.1 + GLUT
         * daenode.py
         * g4daeview.py

         Migration allows use of modern OpenGL 4.1:

         * better visualization performance
         * retina resolution support
         * many GUI packages to choose from, picked https://github.com/ocornut/imgui

.. class:: small

   *GGeo*
         GPU Geometry representation, NPY persistency 
 
         * 22 classes: GNode, GMaterial, GProperty, ...

   *AssimpWrap*
         G4DAE -> GGeo geometry 

         * 7 classes : AssimpGGeo, AssimpTree, ...
         
   *OptiXRap*
         GGeo -> OptiX geometry, OptiX launch control
         
         * 7 classes : OptiXEngine, OptixGeometry, ...

   *OGLRap*
         OpenGL shader based 3D visualization
    
         * 29 classes : Scene, View, Camera, Rdr, Shdr, ...
     


.. class:: tiny

    https://bitbucket.org/simoncblyth/env/src/tip/optix/ggeo/

    https://bitbucket.org/simoncblyth/env/src/tip/graphics/assimpwrap/

    https://bitbucket.org/simoncblyth/env/src/tip/graphics/oglrap/

    https://bitbucket.org/simoncblyth/env/src/tip/graphics/optixrap/






:small:`Boundary material/surface properties GPU texture`  
-----------------------------------------------------------------------------   

.. class:: small

    Forked Assimp parses G4DAE **extra** XML elements, *AssimpWrap* creates *GGeo* geometry
    with standard properties interpolated onto :red:`common wavelength domain`

    * **material** : refractive_index, absorption_length, scattering_length, reemission_prob (*float4*)
    * **surface** : detect, absorb, reflect_specular, reflect_diffuse (*float4*)

.. sidebar:: Fast GPU texture lookup 

    .. class:: small

         GPU Texture lookups highly optimized, as
         standard way to wrap CG geometries.

         DayaBay: ~50 boundaries, 4 *float4* each

.. class:: small

    Volume tree traversal labels triangles with **boundary** indices, :red:`identity based on properties digest`:

    * **inner material** : self 
    * **outer material** : parent 
    * **inner surface** : outwards going photons (self to parent) 
    * **outer surface** : inwards going photons (parent to self)

    Interleave properties into 2d **GPU texture** (wavelength, qty line).
    CUDA **tex2d** property lookup::

        float nmi = (nm - wavelength_domain.x)/wavelength_domain.z + 0.5f ;   
        float4 props = tex2D(wavelength_texture, nmi, line + 0.5f );
        float refractive_index = props.x ; 
      
.. class:: tiny 

    https://github.com/simoncblyth/assimp (my fork of Assimp)




:i:`GGeoView`  
-----------------------------------------------------------------------------   


.. sidebar:: GGeoView 

    .. class:: tiny

       Cerenkov photons from an 100 GeV muon travelling from right to left across Dayabay AD. 
       Primaries are simulated by Geant4, Cerenkov "steps" of the primaries are transferred to the GPU.  
       The dots represent OptiX calculated first intersections of GPU generated photons with colors 
       corresponding to material boundaries: :red:`(red) GdDopedLS:Acrylic`,
       :green:`(green) LiquidScintillator:Acrylic`, :blue:`(blue) Acrylic:LiquidScintillator`,
       (white) IwsWater:UnstStainlessSteel, (grey) others.
       The red lines represent the positions and directions of the "steps" with an
       arbitrary scaling for visibility. 
       

:small:`GGeo/OptiX Generated Scintillation Photons cf Geant4`
--------------------------------------------------------------- 

.. class:: small 

   GGeo/OptiX using inverted CDF reemission wavelength lookups (4096 bins)

.. image:: /env/g4dae/generated_oxscintillation_time_wavelength.png
   :width: 800px
   :align: center


:small:`Inverted CDF allows reemission wavelength GPU texture lookup`
-----------------------------------------------------------------------------
    
.. class:: small

    Equivalent to value search sampling, fast lookup but requires
    many probability bins (using 4096). 

.. image:: /env/g4dae/reemission_src_cdf_icdf_smpl.png
   :width: 800px
   :align: center



:small:`GGeo/OptiX Generated Cerenkov Photons cf Geant4`
---------------------------------------------------------- 

.. class:: small 
  
   Geant4/DetSim wavelength distribution has a blip at 200nm, corresponding to edge of water 
   refractive index properties.

.. image:: /env/g4dae/generated_oxcerenkov_time_wavelength.png
   :width: 800px
   :align: center


Next Steps
------------------


.. class:: small

   **Optical Photon Simulation**

   * Continue port of Chroma propagation kernels into GGeo/OptiX 

   * Instrument Geant4 optical photon propagation, 
     by collecting photon steps into NPY array to :red:`enable step-by-step comparison`

   Attempt to :red:`achieve matching between standard and external` optical photon simulation, many details to port:  

   * Cerenkov *ApplyWaterQE* 

   * *DsPmtSensDet::ProcessHits* QE gymnastics 


.. class:: small

   **G4DAE Geometry Exporter**

   * test on more detector geometries

   * implement parametrized/replica geometry handling, following GDML

   * investigate issue inherited from GDML of a skipped  
     edge case (when a volume is shared between multiple volume pairs)
     resulting in missing *G4LogicalBorderSurface* 

   * investigate improving default export appearance in common viewers 

   * incorporate into Geant4 codebase  




:small:`Comparison of GGeo/OptiX Generated Scintillation Photon Distributions`
--------------------------------------------------------------------------------

.. class:: small 

   Position, direction, polarization XYZ  + time, wavelength, weight  

.. image:: /env/g4dae/generated_oxscintillation_3xyzw.png
   :width: 700px
   :align: center


:small:`Comparison of GGeo/OptiX Generated Cerenkov Photon Distributions`
---------------------------------------------------------------------------

.. class:: small 

   Position, direction, polarization XYZ  + time, wavelength, weight  

.. image:: /env/g4dae/generated_oxcerenkov_3xyzw.png
   :width: 700px
   :align: center



