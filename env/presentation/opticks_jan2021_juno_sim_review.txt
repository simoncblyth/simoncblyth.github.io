
.. meta::
   :note: Navigate the HTML slides by entering a page number and pressing return 
   :title: Review JUNO + Opticks : GPU Optical Photon Simulation with NVIDIA OptiX
   :description: Awareness Jump, Hits completed, Plan
   :event: JUNO Collaboration Meeting, IHEP Virtual 
   :date: 1 Feb 2021
   :length: 20 minutes

.. include:: my_s5defs.txt


.. comment

    p19: Improve task titles, shortening if possible + add (progress summary or estimate)



:i:`Review Opticks + JUNO` 
==============================

.. raw:: html

    <div class="mytitle">
    <header>
    <h1 style="background-color:lightgrey;text-align:center;"> 
          <span class="alarm">Review  </span> JUNO + <i>Opticks</i> : <br> GPU Optical Simulation with NVIDIA® OptiX™ 
        <h2 style="background-color:lightgrey;text-align:center"> Open source, https://bitbucket.org/simoncblyth/opticks </h2>
    </h1>
    </header>
    </div>

    <div class="mycredit">
    <h2 style="background-color:lightgrey"> Simon C Blyth, IHEP, CAS &mdash; JUNO Collaboration Meeting, Jan/Feb 2021, Virtual</h2>
    </div>


.. s5_talk:: 

    Opticks applies state-of-the-art GPU ray tracing 
    accessed via NVIDIA OptiX to optical photon simulation and integrates this with Geant4. 
    This results in drastic speedups of more than 1500x.

    This render shows the photons resulting from a muon crossing the JUNO scintillator, 
    each line represents a single photon.



.. comment 

    00:Title Page 
    01:Outline  

    Intro 

        02:JUNO Optical Photon Simulation Problem... 
        03:NVIDIA® OptiX™ Ray Tracing Engine -- http://developer.nvidia.com/optix   
        04:NVIDIA OptiX 7
        05:Geant4 Opticks Workflow 
        06:Opticks : Translates G4 Geometry to GPU, Without Approximation
        07:Ray Trace Render

    Leap+Group

        08:2020 : Leap in Opticks Awareness : Meetings, Publications >>> New Users
        09:2020 : Leap in Opticks Awareness >>> Some Users Getting Serious
        10:groups.io : Email Group + Web Archive 

    Geant4+Opticks News

        11:G4OpticksTest : Demonstrates Geant4 + Opticks hybrid workflow
        12:Geant4_Bug_2305
        13:Geant4_Bug_2311
        14:UK SWIFT-HEP grant : SoftWare InFrastructure and Technology for HEP

    Opticks User News

        15:LHCb RICH (Ring Imaging Cherenkov) with Opticks : Sajan Easo
        16:Opticks+CORSIKA8 for next-generation neutrino telescope optimization ?
        17:LZ+Opticks history : 2018-2021 : contacts with >5 LZ people
        18:2021 : LZ+Opticks simulation on Perlmutter (>6000 NVIDIA A100)

    JUNO+Opticks Progress

        19:Opticks Tasks List 
        20:Opticks Progress : Efficiency Hit Culling on GPU + Complete JUNO Hits
        21:Completing JUNO Hits : How to handle boundary_pos ?

    Planning

        22:Opticks : Three Levels of Performance
        23:JUNO Offline + Opticks : Release Plan
        24:JUNO Offline + Opticks : Organization

    25:Summary and Links

    Extras

        26:Integration of JUNO + Opticks : Opticks is a JunoENV External
        27:Integration of Offline + Opticks : Where WITH_G4OPTICKS used ?
        28:Integration of Offline + Opticks : tut_detsim.py options
        29:JUNO Geometry : Remove Torus to enable translation to GPU




Outline
--------------

.. comment 

   Title marker needs to be long for rst2rst.py matching  

.. image:: /env/presentation/newtons-opticks.png 
   :width: 299px
   :height: 547px 
   :align: right


.. class:: small

    * :blue:`Introduction (pp 2-7)`

      * Optical Photon Simulation Problem...
      * NVIDIA OptiX Ray Tracing Engine, NVIDIA OptiX 7 
      * Geant4 + Opticks Hybrid Workflow
      * Opticks : Translates G4 Geometry to GPU, Without Approximation

    * :blue:`2020 : Leap in Opticks awareness and Users (pp 8-10)`

    * Geant4+Opticks News (pp 11-14)

      * G4OpticksTest : Fermilab Geant4 team 
      * Geant4 Bugs 2305,2311   
      * UK SWIFT-HEP grant : SoftWare InFrastructure and Technology for HEP

    * Opticks User News (pp 15-18)

      * LHCb RICH study, Sajan Easo
      * Opticks+CORSIKA8 next-generation neutrino telescope optimization, Fan Hu
      * LZ(dark matter search) prepare for Perlmutter with NVIDIA/NERSC engineers

    * JUNO+Opticks Progress (pp 19-21)    

      * Tasks List 
      * Efficiency Hit Culling on GPU + Complete JUNO hits 
      * Completing JUNO hits 
 
 
    * JUNO+Opticks Plan (pp 22-24)   
          
      * Three levels of performance
      * Release plan 
      * Organization  
  
    * :blue:`Summary and Links (p25)`


.. s5_talk::

   As I expect most of you have seen my Opticks presentations before, 
   my introduction will be minimal. 
   My previous presentations have much more detail.

   I will focus on the necessary geometry changes and recent 
   developments on the integration of offline with opticks, 
   that are already in SVN trunk.



`JUNO Optical Photon Simulation Problem...`
---------------------------------------------------------

.. raw:: html

     <pre>







     </pre>

.. sidebar:: :small:`Huge CPU Memory+Time Expense`

    .. class:: small

         **JUNO Muon Simulation Bottleneck**
           ~99% CPU time, memory constraints

         **Ray-Geometry intersection Dominates**
           simulation is not alone in this problem...

         **Optical photons : naturally parallel, simple :**
           * produced by Cherenkov+Scintillation 
           * yield only Photomultiplier hits


.. s5_talk::

   This is a huge memory and time challenge for simulation, especially with muons.

   Most of the time is taken finding intersections between photons and geometry.
   Fortunately simulation is not alone in this bottleneck.



:small:`NVIDIA® OptiX™ Ray Tracing Engine -- http://developer.nvidia.com/optix`
--------------------------------------------------------------------------------

.. sidebar:: OptiX Raytracing Pipeline

    .. class:: small

       Analogous to OpenGL rasterization pipeline:

    .. image:: /env/optix/docs/optix-model.png
       :width: 450px
       :align: right

.. class:: small

   **OptiX makes GPU ray tracing accessible**

   * **accelerates** ray-geometry intersections
   * simple : single-ray programming model
   * "...free to use within any application..."
   * :red:`access RT Cores[1] with OptiX 6.0.0+ via RTX™ mode`

   **NVIDIA expertise:**

   * :red:`~linear scaling up to 4 GPUs`
   * acceleration structure creation + traversal (Blue)
   * instanced sharing of geometry + acceleration structures
   * compiler optimized for GPU ray tracing

.. class:: tiny

       ``https://developer.nvidia.com/rtx``

.. class:: small

   **User provides (Yellow):**

   * ray generation
   * geometry bounding box, intersects 


.. class:: tiny

   [1] Turing+ GPUs eg NVIDIA TITAN RTX 



.. s5_talk::

   * NVIDIA OptiX gives access to the NVIDIA BVH  

   * OptiX is a ray tracing specific CUDA compiler, it combines
     user programs for ray generation and geometry with NVIDIA programs 
     for acceleration structure traversal into a GPU pipeline 

   * OptiX just accelerates ray-geometry interection... it doesnt provide the intersection 

   * the bulk of Opticks on the GPU is in the ray generation and intersection programs 




:small:`NVIDIA OptiX 7 : Entirely new thin API`
------------------------------------------------------------------------

.. sidebar:: :small:`NVIDIA OptiX 7 : Entirely new API`

    .. class:: small

        * introduced August 2019
        * low-level CUDA-centric thin API (Vulkan-ized)
        * :strike:`near perfect scaling to 4 GPUs, for free` 
        * Major effort needed to support in Opticks

.. class:: small


    **NVIDIA OptiX 7 Features**

    * Minimal host state 
    * GPU memory *managed by application*
    * GPU launches : explicit, asynchronous (CUDA streams)
    * :red:`All host functions are thread-safe`
    * Multi-GPU *managed by application*

    **"managed by application" -> difficult development**

    * lots of learning + expert assistance needed


.. class:: small

    **Disadvantage**
        Demands much more developer effort than OptiX 6 

    **Advantage**
        More control/flexibility over everything. 

        * thread-safe : important for distributed Server/Client Opticks
         

.. s5_talk::

   Opticks current works with NVIDIA OptiX 6,  bringing it to 
   OptiX 7 is a major undertaking as it is an entirely new API 

   The migration is unavoidable if you want to keep Opticks running 
   with newer versions of CUDA and to benefit from new GPUs 







:i:`Geant4OpticksWorkflow`
----------------------------

.. s5_talk::

    SMALL
    So : how can an external optical photon simulation be integrated with Geant4 ?

    In the standard workflow the Geant4 Scintillation and 
    Cerenkov processes calculate a number of photons 
    and then loop generating these and collecting them 
    as secondaries.
     
    In the hybrid workflow, this generation is split 
    between the CPU and GPU with "Gensteps" acting as the bridge. 
    These Genstep parameters include the number of photons, positions and everything 
    else needed in the generation loop.

    The gensteps allow a very simple direct port of the generation loop to the GPU. 

    Its doubly helpful to generate photons on GPU, as then they take no CPU memory. 
  
    So can entirely offload photon memory to the GPU with only hits needing CPU memory. 

    Also this keeps the overheads low as gensteps are typically a factor of 100 smaller
    than the photons they generate.   
 
    **The geometry is also needed on the GPU, with all material and surface properties.**

    :red:`Geometry translation to the GPU is most of the work and problems of Opticks.`







:small:`Opticks : Translates G4 Geometry to GPU, Without Approximation`
------------------------------------------------------------------------------------

.. sidebar:: :small:`Materials/Surfaces -> GPU Texture` 

    .. class:: small

      **Material/Surface/Scintillator properties**

      * interpolated to standard wavelength domain
      * interleaved into "boundary" texture  
      * "reemission" texture for wavelength generation 

      **Material/surface boundary : 4 indices**

      * outer material (parent)
      * outer surface (inward photons, parent -> self)
      * inner surface (outward photons, self -> parent)
      * inner material (self)

      Primitives labelled with unique boundary index

      * ray primitive intersection -> boundary index
      * texture lookup -> material/surface properties

      :red:`simple/fast properties + reemission wavelength`


.. class:: small

    **G4 Structure Tree -> Instance+Global Arrays -> OptiX**

    Group structure into repeated instances + global remainder:

    * auto-identify repeated geometry with "progeny digests"  

      * JUNO (SVN trunk) : 9 distinct instances + 1 global  

    * instance transforms used in OptiX/OpenGL geometry 

    :red:`instancing -> huge memory savings for JUNO PMTs`




.. raw:: html

    <pre>
    </pre>


.. comment

    **Automated : Geant4 "World" -> Opticks CSG -> CUDA/OptiX**

    **Solids : analytic CSG + triangulated**

    * intersection functions for ~10 primitives
    * intersection program for arbitrarily complex CSG shapes 
     
      * :red:`automated : G4 -> Opticks -> OptiX`  


.. s5_talk::


   Translation of geometry structure starts by 
   identifying repeated geometry and its transforms using 
   geometry tree digests for every node.

   Use of instancing is a huge memory saving for JUNO geometry 
   with many thousands of PMTs.

   And everything needs to be serialized to be copied to the GPU.
     





:i:`j1808_top_rtx`
--------------------

.. s5_talk::

   The upshot is that full Geant4 detector geometries
   can be automatically translated into NVIDIA OptiX geometries.

   This is an OptiX ray trace image from the chimney region at the 
   top of the JUNO scintillator sphere.
    





:small:`2020 : Leap in Opticks Awareness : Meetings, Publications >>> New Users`
--------------------------------------------------------------------------------------

.. class:: small

   **(Feb 2020) Workshop on Efficient Computing for HEP, Edinburgh**

   * https://indico.ph.ed.ac.uk/event/66/ "Full Simulation of HEP Detectors with Geant4", Ben Morgan 

   **(May 2020) HSF (HEP Software Foundation) Meeting : GPUs in Simulations**

   * https://indico.cern.ch/event/921244/ "Opticks Development Experience : Problems and Successes", Simon Blyth

   **(10+24 June 2020) HSF Meeting : R&D on accelerators in Simulations** :red:`3/9 talks discussed Opticks`

   * https://indico.cern.ch/event/925887/ https://indico.cern.ch/event/930881/

   * "e/γ (GPU) calorimeter simulation.. ", John Apostolakis, "Prototyping simulation .. on GPUs", Andrei Gheata
     
   * "Prospects for (LHCb) RICH detector simulation using OptiX in GPUs", Sajan Easo

   **(Aug 2020) HSF Publication : HL-LHC Computing Review: Common Tools and Community Software**

   * https://zenodo.org/record/4009114 Graeme Stewart,... :red:`HL-LHC Computing Review discusses Opticks`

   **(Sep 2020) Geant4 : R&D Task Force Meeting** :red:`3+ Geant4 teams pursuing GPUs, 1 based on Opticks`    

   * https://indico.cern.ch/event/942142/sessions/363813/#20200915
        
   1. "G4Opticks for liquid Argon TPCs", Fermilab Geant4 Team, Hans Wenzel
   2. "VecGeom@GPU", CERN Geant4 Team, Andrei Gheata 


.. s5_talk::

   During 2020 there was a leap in Opticks awareness, it was presented and discussed at numerous meetings 
   and is being actively evaluated by an increasing number of groups. This page lists a few of the 
   talks that discussed Opticks.  

   This leap is probably thanks in part to my plenary presentation at the CHEP conference at the end of 2019

   Also using GPUs to accelerate Geant4 more generally that just optical photons is a hot topic at the moment
   with several high profile projects starting during last year. Talks on those often mention Opticks.
    


:small:`2020 : Leap in Opticks Awareness >>> Some Users Getting Serious` 
-----------------------------------------------------------------------------------------

.. class:: small

   **(Aug 2020) Shanghai SJTU : Next-gen Neutrino Telescope Simulation Workshop**

   * https://indico-tdli.sjtu.edu.cn/event/238/sessions/109/#20200813 
   * "Opticks : GPU/Graphics backgroup + Application to underwater neutrino telescope simulations ?", Simon Blyth
   * :red:`SJTU team evaluating Opticks for deep ocean expt simulations (Fan Hu, Donglian Xu)`

   **(Aug 2020) Snowmass 2021 : Three LoI based on Opticks** : :red:`Multi-expt Dark Matter group invited me to sign LoI`   

   1. "Opticks : GPU photon simulation via NVIDIA OptiX", Simon Blyth
   2. "Fast simulations for Noble Liquid experiments", XENON, DARWIN, LZ teams, Simon Blyth
   3. "Simulating Optical Photons in HEP experiments on GPUs", Fermilab Geant4 team
 
   **(Aug 2020) NERSC Users Group (NUG) meeting** : :red:`LZ aiming to deploy Opticks on Perlmutter supercomputer`

   * https://www.nersc.gov/users/NUG/annual-meetings/nug-2020/ 
   * https://www.nersc.gov/assets/Uploads/1400-Opticks-on-CoriGPU.pdf 
   * "Opticks on CoriGPU", O.Creaner, 5 authors from : NERSC/LBL/LZ/Stanford/Bristol   
   * :red:`Opticks in Shifter/Docker container -> CoriGPU -> Perlmutter Cray/NVIDIA supercomputer`
   * Perlmutter : > 6000 NVIDIA A100 (Ampere Architecture GPU)  
 

.. class:: tiny 

   https://insidehpc.com/2020/05/perlmutter-supercomputer-to-include-more-than-6000-nvidia-a100-processors/


.. s5_talk::

   2020 also saw several groups that have been evaluating Opticks for years starting to get 
   more serious in their usage.

   The LUZ-Zeplin or LZ experiment is the most advanced with them working on 
   getting Opticks into containers for use on the new Perlmutter supercomputer 
   at NERSC which has more than 6000 NVIDIA A100 GPUs

    


:i:`GROUPS_IO_1`
------------------

.. raw:: html

   <pre>







   </pre>


.. sidebar:: :small:`Email Group + Web Archive`

     ``https://groups.io/g/opticks``


     **25 Members, 33 Topics**

     .. class:: small

         +-----------------+------+------+------+
         | Year            | 2018 | 2019 | 2020 |
         +-----------------+------+------+------+ 
         | New Members     |   5  |    9 |   11 |
         +-----------------+------+------+------+ 


     * ``opticks+subscribe@groups.io``


.. s5_talk::

   The Opticks Forum and email list continues to the primary 
   means of communicating with users. But have had a few virtual meetings 
   Several users tend to email me directly. 

   I need to be stricter about redirecting inquiries to the group
   so the discussion can be beneficial to all.
 
  


:small:`G4OpticksTest : Demonstrates Geant4 + Opticks hybrid workflow`
------------------------------------------------------------------------

.. sidebar:: :small:`Plan for G4OpticksTest`

    .. class:: small

        * advanced example distributed with Geant4
        * explore use with G4Tasking with 10.7

.. class:: small

    **(Nov 2020) HSF WLCG Virtual Workshop : https://indico.cern.ch/event/941278/timetable/#20201123.detailed** 

    * Hans Wenzel, Fermilab Geant4 Team
    
    Worked closely with Hans for several years

    * Developed Geant4-Opticks integration API **G4Opticks**
    * Recently reported two Geant4 optical surface issues #2305 #2311 

.. s5_talk::

    Fermilab Geant4 Team has been active for several years now with Opticks, 
    the development of this example has shaped my development of the G4Opticks interface.
    In the last year I have assisted them with moving Opticks to Geant4 10.6 and 10.7 


:i:`Geant4_Bug_2305`
----------------------

.. raw:: html

   <pre>







   </pre>

.. sidebar:: Geant4 Bug 2305

     :small:`https://bugzilla-geant4.kek.jp/show_bug.cgi?id=2305`

     Five Geant4 releases are **unusable**:

     * 1060, 1061, 1062, 1063
     * 1070 

     * **fix planned for 1071**


.. raw:: html

   <pre>


   </pre>

.. class:: small

   :red:`Unfortunately it took me five releases to notice this showstopper`

   **Any GDML using expt. with > 1 optical surface, should not use these
   five releases of Geant4.**  

   Important to test ahead, checking lastest Geant4:

   * :red:`natural way to contribute to Geant4` and :blue:`raises profile`
   * avoids : surprises, excluded releases
   * ease future "official" updating


.. s5_talk::

    It is unfortuate that I did not test Opticks with these five Geant4 releases 
    until recently. This optical surface bug tripped a consistency assert 
    in the Opticks geometry translation, so it is immediately apparent when 
    testing Opticks with the Geant4 release.

    I would have been able to catch the problem much sooner.  

    It really demonstrates the importance of testing the latest version 
    of critical externals even when you have no intention to officially updating
    to them in the near future. 

    Plus it is a natural way to contribute to your externals and ensures 
    that they will be ready for you when you do need to update.


:i:`Geant4_Bug_2311`
----------------------


.. raw:: html

   <pre>






   </pre>


.. sidebar:: Geant4 Bug 2311 

     :small:`https://bugzilla-geant4.kek.jp/show_bug.cgi?id=2311`

     Effected Geant4 releases: 1070+

     .. class:: small

         bordersurface std::vector -> std::map API Change 

         * made Opticks name sort workaround for 1070
         * have suggested **creation order index** to improve workaround > 1070


.. raw:: html

   <pre>


   </pre>

.. class:: small

   :red:`Problem noticed in first release`

   Geant4 team seem willing to follow my suggestion 
   that will avoid any lasting impact. 


.. s5_talk::

    This Geant4 change in 10.7 was noticed at the first release, and fortunately 
    an Opticks workaround is possible and it looks likely that the next Geant4 release 1071
    will be free of both this workaround and the optical surface bug too. 



:small:`UK SWIFT-HEP grant : SoftWare InFrastructure and Technology for HEP`
------------------------------------------------------------------------------------------------------

.. sidebar:: :small:`UOM : Plan 0.5 FTE over 12 months`
 
    .. class:: small

        * integration of Opticks within Geant4 
        * widening Opticks applicability 
        * "... also plan to hire software engineer to assist..."

        :blue:`details yet to be determined`


.. class:: small

    **SWIFT-HEP : Newly funded (1.5M GBP over 3 yrs)**

    University of Manchester (UOM), Adam Davis
    
    * "... we identified Opticks as a major contribution area ..."

    **(Jan 2021) SwiftHep/ExcaliburHep workshop presentation**

    Ben Morgan, University of Warwick + Geant4 

    * https://indico.cern.ch/event/976081/


.. s5_talk::

   Contribution is of course excellent : but it it going to 
   take time to train up the people supported by this grant 
   and payback is far from certain.





:small:`LHCb RICH (Ring Imaging Cherenkov) with Opticks : Sajan Easo`
----------------------------------------------------------------------

.. sidebar:: :small:`LHCb Opticks Users`

   .. class:: small

       Several LHCb members are using Opticks

       * Sajan Easo has reported his investigations


.. class:: small

    **(June 2020) HSF (HEP Software Foundation) Meeting**
 
    * https://indico.cern.ch/event/930881/
    * "Prospects for RICH simulation using Opticks", Sajan Easo (STFC-GB)
    * Standard Geant4 costs ~30% CPU time for optical photons 
    * :red:`successful validations`

.. s5_talk::

   LHCb Ring Imaging Cherenkov detector has an optical photon simulation problem,
   so its interested in Opticks : and has done some validations   



:small:`Opticks+CORSIKA8 for next-generation neutrino telescope optimization ?`
-------------------------------------------------------------------------------

.. class:: small

   **(Aug 2020) Shanghai SJTU : Next-gen Neutrino Telescope Simulation Workshop**

   * https://indico-tdli.sjtu.edu.cn/event/238/sessions/109/#20200813 
   * "Opticks : GPU/Graphics backgroud + Application to underwater neutrino telescope simulations ?", Simon Blyth
   * :red:`SJTU team evaluating Opticks for deep ocean expt simulations (Fan Hu, Donglian Xu)`

     * enormous instrumented volumes O(10) km^3 water/ice 
     * strings of pods geometry 
     * huge numbers of Cherenkov photons propagating across enormous volumes, how to simulate ?
     * CORSIKA 8 + Opticks : trying to setup genstep transport 

.. s5_talk::

    My presentation resulted in a keen new Opticks user, Fan Hu : this is an Opticks 
    visualization of a string of pods geometry 




:small:`LZ+Opticks history : 2018-2021 : contacts with >5 LZ people`
------------------------------------------------------------------------------------------------------

.. class:: small
 
   * :red:`Summer 2020 : LZ+Opticks simulation identified as candidate for new Perlmutter Cray/NVIDIA supercomputer at NERSC`
   * Autumn 2020 : LZ+NERSC proposed an NVIDIA assisted Hackathon to optimize LZ+Opticks simulation 

     * BUT no point optimizing prior to migration : NVIDIA OptiX 6 -> 7 (an entirely new "Vulkan-ized" API)  
     * migration to NVIDIA OptiX 7+ is unavoidable, it beings challenges and opportunities 

       * multi-GPU scaling no longer provided, thread-safe OptiX 7 opens possibilities, especially for Opticks Server+Client  

   **(Aug 2020) NERSC Users Group (NUG) meeting** : :red:`LZ aiming to deploy Opticks on Perlmutter supercomputer`

   * https://www.nersc.gov/users/NUG/annual-meetings/nug-2020/ 
   * "Opticks on CoriGPU", O.Creaner, 5 authors from : NERSC/LBL/LZ/Stanford/Bristol   


.. s5_talk::

   LZ has been evaluating Opticks over the past three years and it is now
   keep to scale up its usage to profit from the new NERSC Perlmutter supercomputer, 
   with more than 6000 NVIDIA A100 GPUs

   US DOE has payed Cray and NVIDIA several hundereds of millions of US dollars 
   for the Perlmutter supercomputer that is being commissioned.
   I guess that buys a lot of assistance with getting users codes to benefit from Perlmutter

   Its a great opportunity to get some real GPU and deployment experts involved with Opticks 





:small:`2021 : LZ+Opticks simulation on Perlmutter (>6000 NVIDIA A100)`
---------------------------------------------------------------------------------------

.. sidebar:: :small:`Opportunity for Expert Assistance`

   .. class:: small

       * NVIDIA GPU developer team 

         * real experts advising/optimizing Opticks
         * influence on NVIDIA OptiX direction(?)

       * NERSC supercomputer team  
 
         * Docker/Shifter containerization 
         * large scale production optimization 


.. class:: small

   **(8 Jan 2021) Zoom Introduction Meeting of >12 people : LZ/NERSC(6), NVIDIA(5), Opticks(1)** 

   * NERSC + NVIDIA teams: senior engineers + postdoc "workers"
   * NVIDIA team : experienced with OptiX 6->7, multi-GPU + multi-threaded CUDA/OptiX

   **Prepared Opticks codebase orientation for developers**

   * https://simoncblyth.bitbucket.io/opticks/docs/orientation.html

   **From February:** 

   * :red:`plan bi-weekly working meetings`
   * migration assistance 


.. s5_talk::

   I was a little surprised by the number of people at this Zoom meeting.






:small:`Opticks Tasks List`
--------------------------------------------------------------------------------------------------------

.. image:: /env/presentation/tasks/tasks_jan_2021_half.png
   :width: 600px
   :align: right

.. class:: tiny

   https://bitbucket.org/simoncblyth/opticks/src/master/notes/tasks/tasks.rst

.. class:: small

   **Task List categories**

   1. Needed ASAP for JUNO
   2. Useful for JUNO but not urgently required
   3. Not needed for JUNO, but useful for wider applicability

   **Fishing for assistance, organizing priorities** 

.. s5_talk::

    The tasks list was prepared:

    1. to fish for assistance from the community 
    2. organize priorities

    TODO: shorten task titles, add progress notes to titles, include "Table of Contents" label 




:small:`Opticks Progress : Efficiency Hit Culling on GPU + Complete JUNO Hits`
-------------------------------------------------------------------------------

.. sidebar:: |egr|, |egr| [|thgr|, |phgr|]  -> GPU Tex

    .. class:: small 

         **Separate Textures for each sensor type**

         ``G4Opticks::``
             ``setSensorData``
             ``setSensorAngularEfficiency``

         Photon flags set on GPU:

         ``EFFICIENCY_COLLECT/_CULL``
 

.. class:: small

    * :red:`Reduce CPU memory for hits by a factor of the efficiency` 
    * only **collected hits** consume CPU memory  


.. class:: small

    ``G4Opticks::getHit``
    ``G4OpticksHit``

    * Completed hits : local + global param
    * Unchanged photon size : (4,4)  
    * Uses geometry aware photon wrapper ``ggeo/GPho``

.. class:: tiny

    http://bitbucket.org/simoncblyth/opticks/src/master/ggeo/GPho.cc

.. class:: small

    **Way point (eg: Acrylic/LS boundary intersect)** 

    * Unavoidably increases photon size : (5,4) 
    * TODO: make **way point** optional 

.. class:: small

    **Testing angular efficiency GPU texture machinery** 

    * Mock striped theta efficiency, two random categories 
    * cosine phi efficiency variation for one category


.. class:: tiny

    https://simoncblyth.bitbucket.io/opticks/optixrap/tests/OSensorLibGeoTest.cc.html

    https://bitbucket.org/simoncblyth/opticks/src/master/notes/progress.rst


.. s5_talk::

    Opticks avoids experiment specifics by making things flexible, for example

    * using sensor index, and not making assumptions about sensor identifiers 
    * making the "way point" externally configuarable.

    Doing the culling on GPU also easier to validate, as the
    consumption of randoms is then easier to align.


.. comment

    https://bitbucket.org/simoncblyth/opticks/src/master/optickscore/tests/MockSensorLibTest.cc

    https://bitbucket.org/simoncblyth/opticks/src/master/optixrap/tests/OSensorLibGeoTest.cc





:small:`Completing JUNO Hits : G4OpticksHit (4,4) + G4OpticksHitExtra (2,4)`
--------------------------------------------------------------------------------------------------------

.. class:: small

   *void G4Opticks::getHit(unsigned i, G4OpticksHit\* hit, G4OpticksHitExtra\* hit_extra ) const*

.. sidebar:: :small:`G4OpticksHit + G4OpticksHitExtra`

    .. raw:: html 

        <pre class="mypretiny">
        struct G4OpticksHit // from photon->hit buffers
        {   
            G4ThreeVector local_position ;  
            G4ThreeVector global_position ;
            G4double      time ; 
            G4ThreeVector local_direction ;  
            G4ThreeVector global_direction ;
            G4double      weight ; 
            G4ThreeVector local_polarization ;  
            G4ThreeVector global_polarization ;
            G4double      wavelength ;
            G4int         boundary ;
            G4int         sensorIndex ;
            G4int         nodeIndex ; 
            G4int         photonIndex ;
            G4int         flag_mask ; 
            G4int         sensor_identifier ;
            G4bool        is_cerenkov ; 
            G4bool        is_reemission ;
        };
        struct G4OpticksHitExtra // from way->hiy buffers
        {
            G4ThreeVector boundary_pos ;
            G4double      boundary_time ;
            G4double      origin_time ;
            G4int         origin_trackID ;
        };
        </pre>

.. raw:: html 

    <pre class="mypretiny">// Simulation/DetSimV2/PMTSim/src/junoSD_PMT_v2.cc
    467         junoHit_PMT* hit_photon = new junoHit_PMT();
    468         hit_photon->SetPMTID(pmtid);
    469         hit_photon->SetWeight(1.0);
    470         hit_photon->SetTime(hittime);
    471         hit_photon->SetWavelength(wavelength);
    472         hit_photon->SetKineticEnergy(edep);
    473         hit_photon->SetPosition(local_pos);
    474         hit_photon->SetTheta(local_pos.theta());
    475         hit_photon->SetPhi(local_pos.phi());
    476         hit_photon->SetMomentum(local_dir);
    477         hit_photon->SetPolarization(local_pol);
    479         hit_photon->SetGlobalPosition(global_pos);
    480         hit_photon->SetGlobalMomentum(track->GetMomentum());
    481         hit_photon->SetGlobalPolarization(track->GetPolarization());
    ...         // optional extras from  NormalTrackInfo/NormalAnaMgr 
    485         hit_photon->SetProducerID(producerID);        
    486         hit_photon->SetFromCerenkov(is_from_cerenkov);
    487         hit_photon->SetReemission(is_reemission);
    488         hit_photon->SetOriginalOP(is_original_op);
    489         hit_photon->SetOriginalOPStartT(t_start);
    490         hit_photon->SetBoundaryPosition(boundary_pos);  // 
    </pre>

.. class:: small

    * pAcrylic/pInnerWater boundary_pos[1]  
    * split: :blue:`(4,4) + (2,4)`  OR combine: :blue:`(6,4)`  
    * Using **split** assuming :red:`extras switched off in large productions ?`

.. class:: tiny

   [1] set in NormalTrackInfo by ``NormalAnaMgr::UserSteppingAction``
 

.. s5_talk::

    The boundary to record is generalized 



:small:`Opticks : Three Levels of Performance`
----------------------------------------------

.. class:: small

    * https://bitbucket.org/simoncblyth/opticks/src/master/notes/performance.rst

.. sidebar:: **cluster** level optimizations

    .. class:: small

        **Opticks Server + many Clients**

        * genstep requests, hits in response  
        * bring Opticks to CPU only batch nodes
        * avoid GPU starvation 
        * header only implementation : ``OpticksClient.hh`` 

        **So far : Network Transport of NP Arrays**

        * https://github.com/simoncblyth/np
        * depends only on Boost-Asio (Async IO) 
        * np_server/np_client operational  

        **Next : integrate that with Opticks**

         

.. class:: small

    1. **optical**: optical photon simulation, ie the time and memory required to generate and propagate optical photons
    2. **node**: overall simulation performance using a single node with one or more GPUs 
    3. **cluster**: production performance of a GPU cluster creating large monte carlo samples
       with many hundreds or thousands of production jobs orchestrated with a batch system



    **Async Opticks Server ?**

    * :red:`No point until after migration to NVIDIA OptiX 7`    

      * new features of OptiX 7 important for Server implementation
      * major developments based on 2 yr old OptiX 6 unwise


.. s5_talk::

   So far Opticks has been optimized only at the **optical** level. 
   Optimizing at cluster level expected to give large gains, maximimize
   use of resources  






:small:`Releases for Opticks+JUNO validation comparing G4+Opticks vs G4`
----------------------------------------------------------------------------------

.. comment

   * use REPLACE mode (shift-R) in vim to edit the table
   * RST blank lines in some places have no impact on html output, use this to decouple column editing 
   * unfortunately replace directive may contain a single paragraph only 
 

.. |RST| replace:: photon size: (4,4)+(2,4) -> (4,4)  
 


.. class:: small  

     +--------------------------------------------------------------------------+-------------------------------------------------------------------------------+
     | **0.1.0 : "Basic Validation" Release**  : :blue:`Enabling Statistical hit comparison` : :red:`Estimate : During February`                                | 
     +--------------------------------------------------------------------------+-------------------------------------------------------------------------------+
     |                                           Completed:                     |                                             Remaining:                        |
     +==========================================================================+===============================================================================+
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |  * angular efficiency culling : make **run-time** controllable                |
     |                                                                          |                                                                               |
     |                                                                          |  * *G4OpticksHitExtra* : make **run-time optional**                           | 
     |                                                                          |                                                                               |
     |                                                                          |    * photon size: (4,4)+(2,4) -> (4,4)                                        |
     |                                                                          |    * half GPU->CPU hit copies                                                 |
     |                                                                          |                                                                               |
     |                                                                          |  * JUNO Offline+Opticks Bridge updates                                        |
     |                                                                          |                                                                               |
     |                                                                          |    * adapt to new *G4Opticks* API                                             |
     |                                                                          |    * improve python commandline control of *G4Opticks*                        |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     | * full JUNO hits      :                                                  |                                                                               |
     |                                                                          |                                                                               |           
     |   * *G4OpticksHit* : global+local                                        |                                                                               |
     |   * *G4OpticksHitExtra* : boundary_pos, origin_time, ..                  |                                                                               |           
     |                                                                          |                                                                               |           
     |                                                                          |                                                                               |           
     |                                                                          |                                                                               |           
     |                                                                          |                                                                               |           
     |                                                                          |                                                                               |           
     | * GPU collection angular efficiency culling                              |                                                                               |
     |                                                                          |                                                                               |
     |   * |egr| [|thgr|, |phgr|] -> *G4Opticks* -> GPU "angular" texture       |                                                                               |
     |   * *G4Opticks::setSensorData*                                           |                                                                               |
     |   * reduces CPU hit memory by :  |egr| . |egr| [|thgr|, |phgr|]          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     +--------------------------------------------------------------------------+-------------------------------------------------------------------------------+
     |                                                                                                                                                          |
     |  .. class:: center                                                                                                                                       |
     |                                                                                                                                                          |
     |       :blue:`students/postdocs with Geant4 geometry experience can assist with "Basic Validation" distribution comparison`                               |
     |                                                                                                                                                          |
     +--------------------------------------------------------------------------+-------------------------------------------------------------------------------+

.. raw:: html

    <pre>

    </pre>

.. class:: small  

     +--------------------------------------------------------------------------+-------------------------------------------------------------------------------+
     |  **0.2.0 : "Full Validation"** Release : :blue:`Enabling Random Aligned step-by-step comparison` : :red:`Estimate March-April`                           |
     +--------------------------------------------------------------------------+-------------------------------------------------------------------------------+
     |                                         Completed:                       |                                               Remaining:                      |
     +==========================================================================+===============================================================================+
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          | * Integrate *cfg4* random control with *G4Opticks*                            |
     |                                                                          |                                                                               |
     |                                                                          |   * adapt to general *G4* environment (prev: optical only)                    |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     | * *cfg4* : *CRandomEngine* control random stream                         |                                                                               |
     |                                                                          |                                                                               |
     |   * -> random aligned bi-simulation                                      |                                                                               |
     |                                                                          |                                                                               |
     | * *cfg4* : *Geant4* SteppingAction emulates *Opticks*                    |                                                                               |
     |                                                                          |                                                                               |
     |   * -> *OpticksEvent* arrays -> direct *NumPy* compare                   |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     |                                                                          |                                                                               |
     +--------------------------------------------------------------------------+-------------------------------------------------------------------------------+
     |  .. class:: center                                                                                                                                       |
     |                                                                                                                                                          |
     |       :blue:`students/postdocs with NumPy + Geant4 geometry experience can assist with "Full Validation" step-by-step comparison`                        |
     |                                                                                                                                                          |
     +--------------------------------------------------------------------------+-------------------------------------------------------------------------------+
      


.. s5_talk::

    Geant4 Geometry experience is important, as Opticks problems are usually due to geometry problems 
    either in the source geometry or the translation of the geometry 



:small:`Primary Features for Further Opticks Releases`
----------------------------------------------------------------------------------

.. sidebar:: :small:`Cluster Level Optimization`  

   .. class:: small

        **Maximize flexibility of resource utilization**
      
        * *OpticksClient.hh* : anywhere (CPU only nodes)

          * proto-experiments https://github.com/simoncblyth/np

        * *OpticksServer* 
 
          * load balancer over GPU cluster workers
          * avoids GPU starvation  
 

.. class:: small

    **Adapt Opticks to all new NVIDIA OptiX 7 API**

    * **necessary** : otherwise forever stuck at *OptiX 6.5* (2019) 
     
      * pre-requisite to *OpticksServer*

    * re-implement *optixrap* (*OptiX* wrapper) package  
    * first: single-GPU only, expect no change to *G4Opticks* API 

    * :red:`prototyping in February, with LZ/NERSC/NVIDIA experts` 
   
      * :blue:`uncertain timeline : aiming for May`
 

    **Distributed Opticks : Server + Lightweight Clients**

    Send/receive/queue/reply *NumPy* arrays (eg gensteps, hits) over TCP

    * Compute Server : research/experimentation/learning needed 
     
      * load balancer, proxy, message queue(MQ)
      * find/evaluate open source basis projects 

        * HAProxy, Squid, ..., Apache Qpid, Apache ActiveMQ, ZeroMQ, ...

      * keep as general as practical : *NumPy* array messages, metadata context match (eg matched geometry) 

        * decoupled computation, eg optical simulation : *fSIM[JUNO Offline+Geant4+Opticks+OptiX](gensteps) -> hits*  
 
    * :red:`too undefined a target to set timeline` : :red:`priority depends on experience with single node Opticks in production` 

    :blue:`computing student/postdoc/.. with network/MQ/proxy/server development experience/interest welcome to assist` 



.. s5_talk::

    The subsequent releases are a lot less well defined... 





:small:`Summary and Links`
----------------------------------------------------------------

.. sidebar:: :small:`Next Steps`

   .. class:: small

      * basic validation release
      * migrate to NVIDIA OptiX 7  
      * full validation release

.. image:: /env/presentation/1px.png
   :width: 500px
   :height: 20px

..

  *Opticks* : state-of-the-art GPU ray traced optical simulation 
  integrated with *Geant4*. :red:`Now integrated with JUNO Offline`
  **Pioneer users welcome** 

  .. image:: /env/presentation/1px.png
     :width: 1000px
     :height: 1px

  * Drastic speedup -> better detector understanding -> greater precision
  
    * **any simulation limited by optical photons can benefit** 
    * more photon limited -> more overall speedup (99% -> 100x) 

.. table::
    :align: center

    +--------------------------------------------------+-----------------------------------------+
    | https://bitbucket.org/simoncblyth/opticks        | code repository                         |                   
    +--------------------------------------------------+-----------------------------------------+
    | https://github.com/simoncblyth/opticks/releases  | .zip .tar.gz  archives                  |
    +--------------------------------------------------+-----------------------------------------+
    | https://simoncblyth.bitbucket.io                 | presentations and videos                |
    +--------------------------------------------------+-----------------------------------------+
    | https://groups.io/g/opticks                      | forum/mailing list archive              |
    +--------------------------------------------------+-----------------------------------------+
    | email:opticks+subscribe@groups.io                | subscribe to mailing list               |
    +--------------------------------------------------+-----------------------------------------+ 


.. comment

  *Opticks* uses hardware accelerated GPU ray tracing
  via NVIDIA OptiX to give **effectively zero time and zero CPU memory** 
  optical photon simulation to *Geant4* applications.

  .. image:: /env/presentation/1px.png
     :width: 1000px
     :height: 10px



.. s5_talk::

   So in summary : Opticks applies the best available GPU ray tracing to optical 
   photon simulation resulting in speedups exceeding three orders of magnitude.

   Opticks is still very young and it really needs users to turn it into 
   a robust tool that anyone with an optical photon simulation problem 
   can use to elimate.

   These speedups are just for the optical photons, how much that 
   helps with the overall speedup depends on how limited you are by 
   optical photons.





:i:`geocache_360`
--------------------


.. s5_talk::

    Background slides start from here 



:small:`Integration of JUNO + Opticks : Opticks is a JunoENV External`
------------------------------------------------------------------------------------

.. sidebar:: :small:`Opticks Build Generalized`

    .. class:: small
   
         **Builds against CMAKE_PREFIX_PATH**

         * Boost, CLHEP, XercesC, Geant4
         * -> Opticks uses JUNO externals  

         **opticks-config** (**pkg-config** .pc file based) 

         * integrates with non-CMake projects, eg CMT   

         **releases on github** : latest ``v0.0.0-rc3``

         :small:`https://github.com/simoncblyth/opticks/releases/tag/v0.0.0-rc3`



.. class:: small
 
    Add Opticks to an existing installation (:red:`SVN trunk r3990+`):

    ``bash junoenv libs all opticks``     

    * pre-requisites : NVIDIA Driver, CUDA, OptiX

    **Four mandatory envvars :**

.. raw:: html

    <pre class="mypre">
    <b><span class="alarm">export CMTEXTRATAGS=opticks </span></b>
    <b><span class="alarm"># -> Opticks ON in JunoENV + CMT</span></b>
    export OPTICKS_COMPUTE_CAPABILITY=70 <b><span class="blue"> # -> nvcc flags</span></b>
    export OPTICKS_CUDA_PREFIX=/usr/local/cuda-10.1   
    export OPTICKS_OPTIX_PREFIX=/usr/local/OptiX_650  
    <b><span class="blue"># location of CUDA and OptiX installs </span></b>
    </pre>

.. class:: small

    **Build all JUNO externals, including Opticks (takes ~1hr, 13G) :**

.. raw:: html

    <pre class="mypretiny">
    jlibs(){
        mkdir -p $JUNOTOP && cd $JUNOTOP
        svn co https://juno.ihep.ac.cn/svn/offline/trunk/installation/junoenv && cd $JUNOTOP/junoenv
        local libs=$(bash junoenv libs list | perl -ne 'm, (\S*)@, && print "$1\n"' -)
        for lib in $libs ; do 
            bash junoenv libs all $lib || return 1 
        done  
    }
    </pre>
    
.. class:: small

    * https://juno.ihep.ac.cn/mediawiki/index.php/Offline:Installation#Install_Opticks_using_JunoENV



.. s5_talk::

    Now I transition to progress with integrating Opticks with the Offline.

    * **Opticks is now a JunoENV external**
    * that means you can install Opticks with that one line
    * actually to install all Offline externals you 
      can use the bash function below

    Opticks has pre-requisites : CUDA, OptiX and the NVIDIA GPU Driver
    that need to be separately installed.
    It is not appropriate to automate this, as low level system drivers are involved 
    users need to follow NVIDIA instructions for your system.

    Where these are installed are communicated via envvars.

    As Opticks is an optional external, it is necessary to 
    switch it on somehow. The CMTEXTRATAGS envvar is used to do this, 
    when that contains the string "opticks" it signals JUNOEnv and 
    CMT to enable Opticks in the builds.

    More details are in the wiki at this link. 



:small:`Integration of Offline + Opticks : Where WITH_G4OPTICKS used ?`
------------------------------------------------------------------------------------

.. class:: small

    Offline Opticks : ``#ifdef WITH_G4OPTICKS ... #endif`` + ``if(m_opticksMode > 0){ ... }``

.. raw:: html

    <pre class="mypre">
    cd $JUNOTOP/offline/Simulation/DetSimV2 ; find . -type f -exec grep -l WITH_G4OPTICKS {} \+

    ./DetSimOptions/src/DetSim0Svc.cc                  ## initialize/finalize 
    ./DetSimOptions/src/LSExpDetectorConstruction.cc   ## translate geometry to GPU 

    ./PhysiSim/src/DsG4Scintillation.cc    ## collect Scintillation gensteps, excluding reemission
    ./PhysiSim/src/LocalG4Cerenkov1042.cc  ## collect Cerenkov gensteps
    ./PhysiSim/src/DsPhysConsOptical.cc    ## use LocalG4Cerenkov1042 rather than G4Cerenkov

    ./PMTSim/src/PMTSDMgr.cc         ## setup separate PMTHitMerger m_pmthitmerger_opticks 
    ./PMTSim/src/junoSD_PMT_v2.cc    ## bulk hit creation+collection at EndOfEvent         
    </pre>


.. class:: small

    ``junoSD_PMT_v2::Initialize``
      * setup extra **hitCollection_opticks**  :red:`(temporarily doing both GPU+CPU sim, with separate hits + merger)`
         
    ``junoSD_PMT_v2::EndOfEvent_Opticks``
      * invoke ``G4Opticks::propagateOpticalPhotons`` with the gensteps collected 
      * bulk populate **hitCollection_opticks**

.. class:: small

    * https://juno.ihep.ac.cn/mediawiki/index.php/Offline:Installation#building_the_offline_-DWITH_G4OPTICKS

.. s5_talk::


    Not everyone has an NVIDIA GPU, so Opticks is optional.

    Because of this all usage is "hidden" behind: 

    1. WITH_G4OPTICKS compilation macro
    2. opticksMode runtime switch 

    The Opticks integration changes code in 3 packages 

    * DetSimOptions
    * PhysiSim 
    * PMTSim

    DetSimOptions 
        handles lifecycle + passing the geometry world pointer to Opticks for translation

    PhysiSim
        collects Gensteps from Scintillation and Cerenkov processes 

    PMTSim
        invokes the GPU opticalPhotonSimulation and populates the hit collection in bulk, 
        at the end of the event   


     Again, more details are in the wiki at that link. 






:small:`Integration of Offline + Opticks : tut_detsim.py options`
-------------------------------------------------------------------

.. class:: small

    *tut_detsim.py* options relevant to Opticks usage

    ``--opticks-mode 0``  
        do not use Opticks GPU propagation, the default

    ``--opticks-mode 1`` (currently :green:`SVN trunk r3990`)
        performs both CPU and GPU optical simulations 
        put GPU hits into separate **hitCollectionOpticks** 

    ``--opticks-mode 10`` # TODO: IMPLEMENT AFTER FURTHER VALIDATION 
        switch off CPU optical photons, 
        put GPU hits into standard **hitCollection** 

    ``--no-guide_tube`` 
        change geometry skipping the guide tube torus

    ``--pmt20inch-polycone-neck`` 
        change geometry of LPMT necks avoiding use of torus


    ``tds`` : **Example Bash Function :**  

.. raw:: html

    <pre class="mypre">
    tds-(){ python $JUNOTOP/offline/Examples/Tutorial/share/tut_detsim.py $* ; }
    tds(){ tds- --opticks-mode 1 --no-guide_tube --pmt20inch-polycone-neck --evtmax 2 gun ; } 
    </pre>

.. class:: small

    * https://juno.ihep.ac.cn/mediawiki/index.php/Offline:Detsimuserguide/UsingOpticks


.. s5_talk::

    tut_detsim.py options relevant to using Opticks are collected here 

    **--opticks-mode** is the main control

    Currently both CPU and GPU simulations are done, with GPU hits going into 
    a separate hit collection.
     
    * Trying to use standard geometry with torus exits at Opticks geometry translation.
    * Trying to use non-zero opticks-mode with code not compiled WITH_G4OPTICKS 
      exits at initialization.

    More details in the wiki





:small:`JUNO Geometry : Remove Torus to enable translation to GPU`
---------------------------------------------------------------------------------

.. sidebar:: :small:`Why Avoid Torus ?`

    .. class:: small

         **Double heavy quartic root finding** 
     
         * fragile (crashes in some OptiX versions)
         * precision problems in CSG combinations
         * mere presence in OptiX kernel :red:`kills RTX mode performance by factor 10` 

         **Alternative Approaches To Cope With Torus**

         * triangulated torus 
         * TODO : ray marching (aka sphere tracing) signed distance function (SDF) model 
        

.. class:: small


  **tut_detsim.py options (in SVN trunk r3990)** 

  ``--no-guide_tube`` 
      skip the guide tube torus 

  ``--pmt20inch-polycone-neck`` 
      "cylinder - torus" -> polycone 

      * NNVT_MCPPMT_PMTSolid
      * Hamamatsu_R12860_PMTSolid

  :red:`TODO`: ``--pmt20inch-simpler-csg`` 
      simpler+faster CSG, same geometry 



.. s5_talk::

    Torus intersection is such a problem, that the best solution is 
    to avoid torus : I think it is perfectly acceptable to do so, because
    the guide tube is not important for optical photons and the torus 
    based PMT neck is cosmetic only in my opinion.



.. comment


    :i:`scan-pf-1_Opticks_vs_Geant4 2`
    ------------------------------------

    .. raw:: html

        <pre>
       


     
        </pre>


    .. class:: small

        .. table:: 
            :align: center

            +--------------------+----------------------------+------------------+
            | JUNO analytic, 400M photons from center         |  Speedup         |
            +====================+============================+==================+
            | Geant4 Extrap.     | 95,600 s (26 hrs)          |                  | 
            +--------------------+----------------------------+------------------+
            | Opticks RTX ON (i) | 58 s                       |   1650x          |
            +--------------------+----------------------------+------------------+


    .. s5_talk::


       The GPU used for these tests is the Quadro RTX 8000 with 48GB VRAM.

       This compares the extrapolated Geant4 propagation time with the Opticks launch
       interval with RTX on.   The speedup is more than a factor of 1000.   Need to 
       use a log scale to make them both visible. 

       For 400M photons, Geant4 takes more than a day, Opticks takes less than a minute.   

       This is with analytic geometry. Speedup is a lot more with triangles.





