.. include:: my_s5defs.txt

.. comment

   Navigate the HTML slides by entering a page number and pressing return 

   reps-talk opticks-oct2019-dance    # NB underscores to hyphens for latex 

      ## slide titles and s5_text directive content are written to /tmp/opticks-oct2019-dance.rst
      ## reps-talk converts that into a PDF document : as an aid to thinking about what to say 


:i:`Opticks : GPU Optical Photon Simulation for Particle Physics with NVIDIA OptiX` 
========================================================================================



.. raw:: html


    <div class="mytitle">
    <header>
    <h1 style="background-color:lightgrey"> 
          <i>Opticks</i> : GPU Optical Simulation via NVIDIA® OptiX™ 
        <h2 style="background-color:lightgrey;text-align:center"> Open source, https://bitbucket.org/simoncblyth/opticks </h2>
    </h1>
    </header>
    </div>

    <div class="mycredit">
    <h2 style="background-color:lightgrey"> Simon C Blyth, IHEP, CAS &mdash; DANCE Workshop, October 2019, Houston</h2>
    </div>




.. s5_talk:: 

    Opticks is an open source project that applies GPU ray tracing from NVIDIA OptiX
    to optical photon simulation and integrates this with Geant4. 

    This means that any Geant4 simulation limited by optical photons
    can easily remove those limits with the help of state-of-the-art GPU
    ray tracing.  

    NVIDIA Turing architecture GPUs have ray trace dedicated hardware 
    which further boosts performance. 




Outline
----------------------------------------------------

.. image:: /env/presentation/newtons-opticks.png 
   :width: 299px
   :height: 547px 
   :align: right


.. class:: small


    .. raw:: html

       <span>&nbsp;</span>







    * Optical Photon Simulation Problem...


    * Tools to create Solution   

      * Optical Photon Simulation ≈ Ray Traced Image Rendering
      * Rasterization and Ray tracing
      * Turing Built for RTX 
      * BVH : Bounding Volume Hierarchy 
      * NVIDIA OptiX Ray Tracing Engine

    * Opticks : The Solution

      * Geant4 + Opticks Hybrid Workflow : External Optical Photon Simulation
      * Opticks : Translates G4 Optical Physics to CUDA/OptiX
      * Opticks : Translates G4 Geometry to GPU, Without Approximation
      * CUDA/OptiX Intersection Functions for ~10 Primitives
      * CUDA/OptiX Intersection Functions for Arbitrarily Complex CSG Shapes

    * Validation and Performance

      * Random Aligned Bi-Simulation -> Direct Array Comparison
      * Perfomance Scanning from 1M to 400M Photons

    * Overview + Links 

    .. raw:: html
 
       <hr/>


.. s5_talk::

   I will first introduce JUNO and a major challenge  
   then the "tools used to create a solution"
   before describing the solution and its performance.   







.. comment

   * https://juno.ihep.ac.cn/cgi-bin/Dev_DocDB/ShowDocument?docid=2058
 
   Jilei LLR Tutorial

   Muon average track length in CD LS is about 23 m, 
   suppose 2 MeV/cm energy deposit, 
   LS optical photon yield is 10k/MeV
 
   20k/cm
   2M/m

   23*2 = 46M 
   35*2 = 70M 



`Optical Photon Simulation Problem...`
---------------------------------------------------------

.. raw:: html

     <pre>







     </pre>

.. sidebar:: :small:`Huge CPU Memory+Time Expense`

    .. class:: small

         **JUNO Muon Simulation Bottleneck**
           ~99% CPU time, memory constraints

         **Ray-Geometry intersection Dominates**
           simulation is not alone in this problem...

         **Optical photons : naturally parallel, simple :**
           * produced by Cherenkov+Scintillation 
           * yield only Photomultiplier hits


.. s5_talk::

   Muons travelling across most of the liquid scintillator will yield
   many tens of millions of optical photons. This is a huge memory and time challenge 
   for Geant4 monte carlo production.

   BUT : optical photons are naturally parallel : they can be considered 
   to be produced only by two processes : Cherenkov and Scintillation and we
   are mainly interested in photons that hit the PMTs 
 
   Most of the CPU time is taken finding intersections between photons and geometry 

   Fortunately simulation is not alone in this problem.

         


:small:`Optical Photon Simulation ≈ Ray Traced Image Rendering`
-------------------------------------------------------------------------------

.. sidebar:: Not a Photo, a Calculation

    .. image:: /env/optix/samples/optix-ray-tracing-glasses.png 
       :width: 450px
       :align: right

    .. class:: tiny

        http://on-demand.gputechconf.com/siggraph/2013/presentation/SG3106-Building-Ray-Tracing-Applications-OptiX.pdf


.. class:: small

    **Much in common : geometry, light sources, optical physics**

    * :blue:`simulation` : photon parameters at PMT detectors 
    * :blue:`rendering` : pixel values at image plane
    * :red:`both limited by ray geometry intersection, aka ray tracing`


.. raw:: html

    <pre>

    </pre>

.. class:: small

    **Many Applications of ray tracing** :

    * advertising, design, architecture, films, games,...
    * -> huge efforts to improve hw+sw over 30 yrs


.. s5_talk::

    Ray traced image rendering in computer graphics has exactly the same problem.

    Actually, there is much in common between optical photon simulation and 
    ray traced image rendering.   

    With simulation you want to know photon parameters at PMTs, with rendering 
    you need pixel values at the image plane.

    Both these are limited by ray geometry intersevion, which is also known as ray tracing.

    Ray tracing is used across many industries, which means that have been huge efforts
    across decades to improve ray tracing perfromance.
    


.. skip

      
    **August 2018 : Major Ray Tracing Advance**

    * NVIDIA RTX Platform, Turing GPU
    * :red:`ray trace dedicated hardware : RT cores` 

    * SIGGRAPH 2018, announcing RTX 
    * https://www.youtube.com/watch?v=LP6miCI6-h4



:i:`Ray-tracing vs Rasterization`
-----------------------------------

.. image:: /env/presentation/nvidia/nv_rasterization.png
   :width: 550px
   :align: left

.. image:: /env/presentation/nvidia/nv_raytrace.png
   :width: 550px
   :align: right


.. s5_talk::

   It is necessary clarify the difference between 
   the two primary graphics rendering techniques 

   Rasterization, which is the most common rendering technique
   
   * starts from the objects in a scene, and projects them onto pixels in image plane
   * this uses approximated triangulated geometry   
   
   Ray tracing 

   * starts from the pixels, casts rays out into the 3D scene and finds intersects
   * this can use analytic geometry, without approximation   
   * its easier to create realistic images with ray tracing because its closer to the physics

.. comment

   https://www.youtube.com/watch?v=Mrixi27G9yM
   RTX Launch






:i:`SIGGRAPH_2018_Announcing_Worlds_First_Ray_Tracing_GPU`
------------------------------------------------------------

.. raw:: html

    <pre>







    </pre>


.. class:: huge

    .. table:: 
       :align: right

       
       +----------------------------+
       |  :white:`10 Giga Rays/s`   |
       +----------------------------+


.. s5_talk::

    In summer last year a few weeks after CHEP, 
    NVIDIA announced a major advance in ray tracing performance 
    with the NVIDIA Quadro RTX family of Turing architecture GPUs.

    This GPU has hardware dedicated to accelerating ray tracing, 
    which NVIDIA claims can reach 10 billion ray geometry intersections per second
    with a single GPU.
    



:i:`TURING BUILT FOR RTX 2`
---------------------------------------------------------


.. raw:: html

    <pre>






    </pre>

.. sidebar:: :small:`Offload Ray Trace to Dedicated HW`

    .. class:: small

        * RT core : BVH traversal + ray tri. intersection
        * frees up general purpose SM 

    .. class:: tiny

        SM : Streaming Multiprocessor

        BVH : Bounding Volume Hierarchy


.. s5_talk::

    Part of the ray tracing workload is shifted from 
    the general purpose SM (streaming multiprocessor) to the 
    fixed function RT core, which frees up the SM.



:i:`NVIDIA RTX Metro Exodus`
------------------------------


.. raw:: html

    <pre>









    </pre>


.. sidebar:: :small:`RTX Platform : Hybrid Rendering`

    .. class:: small

        * :red:`Ray trace (RT cores)`
        * AI inference (Tensor cores) -> Denoising  
        * Rasterization (pipeline)

    .. class:: small

        * Compute (SM, CUDA cores) 

        -> :red:`real-time photoreal cinematic 3D rendering`  


.. s5_talk::

    To the worlds gamers these new GPUs mean 
    real-time cinematic rendering in new games. 

    NVIDIA is achieving this via a hybrid rendering it 
    calls RTX

    This uses:

    * three types of hardware dedicated to specific tasks
    * general purpose SM, which CUDA C++ runs on   



``Spatial Index Acceleration Structure``
---------------------------------------------------


.. raw:: html

    <pre>











    </pre>

.. sidebar:: :small:`Tree of Bounding Boxes (bbox)`

    .. class:: small

        * aims to minimize bbox+primitive intersects 
        * accelerates ray-geometry intersection


.. s5_talk::

   The principal technique to accelerate ray geometry intersection 
   is an acceleration structure called a bounding volume hierarchy 
   
   This divides space into a spatial index of progressively smaller bounds 

   Traversing the tree of bounds allows to minimize the intersections
   needed to right primitive on the bunny.

  







.. comment


    :small:`CPU vs GPU architectures, Latency vs Throughput`
    ------------------------------------------------------------

    .. class:: small

        .. image:: /env/presentation/nvidia/cpu_vs_gpu_architecture.png
           :width: 800px
           :align: center

    .. class:: small

       Waiting for memory read/write, is major source of latency...

       **CPU : latency-oriented : Minimize time to complete single task** : :red:`avoid latency with caching` 
           * complex : caching system, branch prediction, speculative execution, ...

       **GPU : throughput-oriented : Maximize total work per unit time** : :red:`hide latency with parallelism` 
           * many simple processing cores, hardware multithreading, SIMD (single instruction multiple data)
           * simpler : :green:`lots of compute (ALU)`, at expense of cache+control
           * design assumes :red:`abundant parallelism`

       Effective use of **Totally different processor architecture** -> :red:`Total reorganization of data and computation`  
           

    .. class:: tiny

        Understanding Throughput-oriented Architectures
        https://cacm.acm.org/magazines/2010/11/100622-understanding-throughput-oriented-architectures/fulltext


    .. comment

       Latency hiding works using hardware multi-threading, so when one group of threads is blocked
       waiting to read from global memory for example : other groups of thread and be resumed. This 
       is only effective at hiding latency when there are enough other threads in flight at the same time.

       Porting CPU code to run on the GPU : is not a straightforward thing to do, because the archirecture is totally 
       different.  To make effective use of GPUs requires a total reorganization of data and compute. 



    `TITAN RTX : 72 Raytrace Dedicated RT Cores, 4608 CUDA Cores, 24GB VRAM, 2500 USD`
    ------------------------------------------------------------------------------------




.. comment
   
    :i:`NVIDIA RTX Technology`
    ------------------------------





:small:`NVIDIA® OptiX™ Ray Tracing Engine -- http://developer.nvidia.com/optix`
--------------------------------------------------------------------------------

.. sidebar:: OptiX Raytracing Pipeline

    .. class:: small

       Analogous to OpenGL rasterization pipeline:

    .. image:: /env/optix/docs/optix-model.png
       :width: 450px
       :align: right

.. class:: small

   **OptiX makes GPU ray tracing accessible**

   * **accelerates** ray-geometry intersections
   * simple : single-ray programming model
   * "...free to use within any application..."
   * :red:`access RT Cores[1] with OptiX 6.0.0+ via RTX™ mode`

   **NVIDIA expertise:**

   * :red:`~linear scaling up to 4 GPUs`
   * acceleration structure creation + traversal (Blue)
   * instanced sharing of geometry + acceleration structures
   * compiler optimized for GPU ray tracing


.. class:: small

   **Opticks provides (Yellow):**

   * ray generation program
   * :red:`ray geometry intersection+bbox programs` 


.. class:: tiny

   [1] Turing RTX GPUs



.. s5_talk::


   * NVIDIA OptiX is a ray tracing specific compiler, it combines
     user programs for ray generation and geometry with NVIDIA programs 
     for acceleration structure traversal into a GPU kernel which is 
     launched onto the GPU 

   * the bulk of Opticks on the GPU is in the ray generation and intersection programs 

   * OptiX just accelerates ray-geometry interection... it 
     doesnt provide any intersection to first order

   * Actually the new hw triangles are an exception to this, there is 
     new API that allows ray triangle intersection 
     on the dedicated ray trace hardware
  

.. skip

   * no need for fancy shading, so closest hit is simple, just collecting the normal 
     and ray trace distance 

  * creating renderers is the most common use of OptiX, but it is a general 
     intersection API so works fine to do simulation   
  


:i:`Geant4OpticksWorkflow`
----------------------------

.. s5_talk::

    SMALL
    So : how can an external optical photon simulation be integrated with Geant4 ?

    In the standard workflow the Geant4 Scintillation and 
    Cerenkov processes calculate a number of photons 
    and then loop generating these and collecting them 
    as secondaries
     
    In the hybrid workflow, this generation is split 
    between the CPU and GPU with "Gensteps" acting as the bridge. 
    These Genstep parameters include the number of photons, positions and everything 
    else needed in the generation loop.

    Result is a very simple port of the generation loop to the GPU. 

    Its doubly helpful to generate photons on GPU, as then
    they take no CPU memory. Can entirely offload photon memory
    to the GPU with only hits needing CPU memory. And also 
    this keeps the overheads low as gensteps are a factor of 100 smaller
    than photons.   
 
    The geometry is also needed on the GPU, with all 
    material and surface properties.
     


:small:`Opticks : Translates G4 Optical Physics to CUDA/OptiX`
----------------------------------------------------------------


.. sidebar:: GPU Resident Photons

    .. class:: small

       **Seeded on GPU** 
          associate photons -> *gensteps* (via seed buffer)
 
       **Generated on GPU, using genstep param:**
         * number of photons to generate
         * start/end position of step

       **Propagated on GPU**
          :red:`Only photons hitting PMTs copied to CPU`


       Thrust: **high level C++ access to CUDA**

       .. figure:: /env/numerics/thrust/thrust.png
          :width: 300px
          :align: right

       * https://developer.nvidia.com/Thrust
       
          

         
.. class:: small

    :blue:`OptiX : single-ray programming model` -> line-by-line translation

    **CUDA Ports of Geant4 classes**
      * G4Cerenkov (only generation loop) 
      * G4Scintillation (only generation loop) 
      * G4OpAbsorption
      * G4OpRayleigh 
      * G4OpBoundaryProcess (only a few surface types)

    **Modify Cherenkov + Scintillation Processes**
      * collect *genstep*, copy to GPU for generation
      * :red:`avoids copying millions of photons to GPU`

    **Scintillator Reemission**
      * fraction of bulk absorbed "reborn" within same thread
      * wavelength generated by reemission texture lookup

    **Opticks (OptiX/Thrust GPU interoperation)** 
      * **OptiX** : upload gensteps 
      * **Thrust** : seeding, distribute genstep indices to photons
      * **OptiX** : launch photon generation and propagation
      * **Thrust** : pullback photons that hit PMTs 
      * **Thrust** : index photon step sequences (optional)



.. s5_talk:: 

    This repeats what I just explained on the diagram

    * essentially the necessary Geant4 optical physics is ported to CUDA

.. skip

    Some further detail is on the reemissio and also 
    use of CUDA Thrust : which provides a higher level way 
    of using CUDA 





:small:`G4Solid -> CUDA Intersect Functions for ~10 Primitives`
-------------------------------------------------------------------------------------------------

.. class:: small

   * 3D parametric ray : **ray(x,y,z;t) = rayOrigin  +  t * rayDirection** 
   * implicit equation of primitive : **f(x,y,z) = 0**  
   * -> polynomial in **t** , roots: **t > t_min**  -> intersection positions + surface normals

.. figure:: /env/presentation/tboolean_parade_sep2017.png
   :width: 900px
   :align: center

   Sphere, Cylinder, Disc, Cone, Convex Polyhedron, Hyperboloid, :red:`Torus`, ...


.. s5_talk::

   Geometry starts from primitive shapes.

   NVIDIA OptiX doesnt provide primitives : My Opticks 
   has ray geometry intersection for these shapes.








:small:`G4Boolean -> CUDA/OptiX Intersection Program Implementing CSG`
-------------------------------------------------------------------------------------

.. sidebar:: Outside/Inside Unions

    .. class:: small

       dot(normal,rayDir) -> Enter/Exit

    .. image:: /env/presentation/kensler_union_of_two_spheres_from_outside.png
       :width: 300px
       :align: center

    .. image:: /env/presentation/kensler_union_of_two_spheres_from_inside.png
       :width: 300px
       :align: center

    .. class:: small

        * **A + B** boundary not inside other 
        * **A * B** boundary inside other 


.. class:: small

   Complete Binary Tree, pick between pairs of nearest intersects:

   =======================  ===========  ===============  ============== 
   *UNION* tA < tB           Enter B      Exit B           Miss B
   =======================  ===========  ===============  ============== 
   **Enter A**               ReturnA      :blue:`LoopA`    ReturnA
   **Exit A**                ReturnA      ReturnB          ReturnA 
   **Miss A**                ReturnB      ReturnB          ReturnMiss
   =======================  ===========  ===============  ============== 

   * *Nearest hit intersect algorithm* [1] avoids state

     * sometimes :blue:`Loop` : advance **t_min** , re-intersect both 
     * classification shows if inside/outside

   * *Evaluative* [2] implementation emulates recursion: 

     * :red:`recursion not allowed` in OptiX intersect programs
     * bit twiddle traversal of complete binary tree 
     * stacks of postorder slices and intersects 

   * :red:`Identical geometry to Geant4` 

     * solving the same polynomials 
     * near perfect intersection match



.. class:: tiny

    [1] Ray Tracing CSG Objects Using Single Hit Intersections, Andrew Kensler (2006)
        with corrections by author of XRT Raytracer http://xrt.wikidot.com/doc:csg
 
    [2] https://bitbucket.org/simoncblyth/opticks/src/tip/optixrap/cu/csg_intersect_boolean.h
        Similar to binary expression tree evaluation using postorder traverse. 


.. s5_talk::

    The primitives can be combined using constructive solid geometry 
    modelling into arbitrarily complex shapes. 

    So G4Boolean trees can be translated into Opticks without 
    any approximation.
 



:small:`Opticks : Translates G4 Geometry to GPU, Without Approximation`
------------------------------------------------------------------------------------

.. sidebar:: :small:`Materials/Surfaces -> GPU Texture` 

    .. class:: small

      **Material/Surface/Scintillator properties**

      * interpolated to standard wavelength domain
      * interleaved into "boundary" texture  
      * "reemission" texture for wavelength generation 

      **Material/surface boundary : 4 indices**

      * outer material (parent)
      * outer surface (inward photons, parent -> self)
      * inner surface (outward photons, self -> parent)
      * inner material (self)

      Primitives labelled with unique boundary index

      * ray primitive intersection -> boundary index
      * texture lookup -> material/surface properties

      :red:`simple/fast properties + reemission wavelength`


.. class:: small

    **G4 Structure Tree -> Instance+Global Arrays -> OptiX**

    Group structure into repeated instances + global remainder:

    * auto-identify repeated geometry with "progeny digests"  

      * JUNO : 5 distinct instances + 1 global  

    * instance transforms used in OptiX/OpenGL geometry 

    :red:`instancing -> huge memory savings for JUNO PMTs`




.. raw:: html

    <pre>
    </pre>


.. comment

    **Automated : Geant4 "World" -> Opticks CSG -> CUDA/OptiX**

    **Solids : analytic CSG + triangulated**

    * intersection functions for ~10 primitives
    * intersection program for arbitrarily complex CSG shapes 
     
      * :red:`automated : G4 -> Opticks -> OptiX`  



.. s5_talk::

   Bringing optical physics to the GPU was straightforward, 
   because a direct translation could be used.

   Geant4 geometry model is vastly different to the 
   whats needed on the GPU : making geometry translation
   the most challenging aspect of Opticks.

   And everything needs to be serialized to be copied to the GPU.
     


:i:`j1808_top_rtx`
--------------------

.. s5_talk::

   The upshot is that full Geant4 detector geometries
   can be automatically translated into NVIDIA OptiX geometries.

   This is an OptiX ray trace image from the chimney region at the 
   top of the JUNO central detector.
    

:i:`j1808_top_ogl`
--------------------

.. s5_talk::

   This is an OpenGL rasterized image, using the approximate triangulated 
   geometry. Opticks manages analytic and triangulated geometry together.  




:small:`Validation of Opticks Simulation by Comparison with Geant4`  
--------------------------------------------------------------------


.. sidebar:: :small:`Random Aligned Bi-Simulation`

    .. class:: small

        Same inputs to *Opticks* and *Geant4*:

        * CPU generated photons 
        * GPU generated randoms, fed to *Geant4*

        Common recording into *OpticksEvents*:

        * compressed photon step record, up to 16 steps
        * persisted as *NumPy* arrays for python analysis   

        Aligned random consumption, direct comparison:

        * ~every **scatter, absorb, reflect, transmit** 
          at matched positions, times, polarization, wavlen



.. class:: small


   **Bi-simulations of all JUNO solids, with millions of photons**

   mis-aligned histories
       mostly < 0.25%, < 0.50% for largest solids    
       
   deviant photons within matched history
       < 0.05% (500/1M) 
 
   **Primary sources of problems**

   * grazing incidence, edge skimmers
   * incidence at constituent solid boundaries 


   **Primary cause : float vs double** 
      
   *Geant4* uses *double* everywhere, *Opticks* only sparingly (observed *double* costing 10x slowdown with RTX) 

   **Conclude** 

   * :blue:`neatly oriented photons more prone to issues than realistic ones`
   * perfect "technical" matching not feasible
   * instead shift validation to more realistic full detector "calibration" situation    


.. s5_talk::

   Aligned bi-simulation very efficiently finds discrepancies. Because it 
   is a direct comparison unclouded by statistical variation issues show up 
   very clearly.   

   Comparing individual solids shows discrepancies at the fraction of a percent level.

   Main cause is float vs double. 


:i:`scan-pf-check-GUI-TO-SC-BT5-SD`
--------------------------------------

.. s5_talk::

   This GUI allows interactive selection between tens of millions 
   of photons based on their histories.  

   Here its showing the photons that scattered before boundary transmitting straight 
   through to surface detect.

   Its implemented by indexing the photon histories using some very fast 
   GPU big integer sorting provided by CUDA Thrust, 
   and using OpenGL shaders to switch between selections.

   The 64-bit integers hold up to 16 4-bit flags for each step of the photon.

   All of this is done using interop capabilities of OpenGL/CUDA/Thrust and OptiX
   so GPU buffers can be written to rendered inplace with no copying around.



:i:`scan-pf-check-GUI-TO-BT5-SD`
----------------------------------

.. s5_talk::

   The GUI also provides interactive time scrubbing of the propagation 
   of tens of millions of photons. 

   This is some nanoseconds later for a different history category. 
  
   I created this GUI to help with debugging the simulation. 




.. comment

     * DELL Precision 7920T Workstation
     * Intel Xeon Silver 4114, 2.2GHz, 40 cores, 65G 
     * NVIDIA Quadro RTX 8000, 48G 

     * DELL Precision 7920T Workstation
     * Intel Xeon Gold 5118, 2.3GHz, 48 cores, 65G  
     * NVIDIA TITAN RTX, 24G
     * NVIDIA TITAN V, 12G


:small:`Performance : Scanning from 1M to 400M Photons`  
---------------------------------------------------------------

.. sidebar:: :small:`Test Hardware + Software`

     .. class:: small

         **Workstation**

         * DELL Precision 7920T Workstation
         * Intel Xeon Gold 5118, 2.3GHz, 48 cores, 62G  
         * NVIDIA Quadro RTX 8000 (48G) 
    
         **Software**

         * Opticks 0.0.0 Alpha 
         * Geant4 10.4p2 
         * NVIDIA OptiX 6.5.0
         * NVIDIA Driver 435.21
         * CUDA 10.1

         **IHEP GPU Cluster**

         * 10 nodes of 8x NVIDIA Tesla GV100 (32G) 




.. class:: small

     **Full JUNO Analytic Geometry j1808v5**

     * "calibration source" genstep at center of scintillator

     **Production Mode : does the minimum**

     * only saves hits  
     * skips : genstep, photon, source, record, sequence, index, ..
     * no *Geant4* propagation (other than at 1M for extrapolation)

     **Multi-Event Running, Measure:**

     :red:`interval` 
       avg time between successive launches, including overheads:
       (upload gensteps + :blue:`launch` + download hits)

     :blue:`launch` 
       avg of 10 OptiX launches


     * overheads < 10% beyond 20M photons



.. s5_talk::

   Emitting millions of photons from the center of the scintillator 
   and timing the interval and launch times of the propagation 
   provides a measure of the performance of a geometry.
   
   By interval, I mean the time between suceessive launches : so this 
   covers all the overheads of copying the gensteps to the GPU and 
   pulling back the hits to the CPU.

   Overheads are less than 10%    



.. comment

    .. sidebar:: :small:`Genstep/Hit Copying Overheads`

         .. class:: small

             **launch**
               time of each OptiX launch (avg of 10)

             **interval, including overhead**
               time between subsequent launches (avg of 9)

             :red:`Mostly < 10% Overhead beyond 20M photons`






``NVIDIA Quadro RTX 8000 (48G)``
----------------------------------

.. raw:: html

   <div class="mysidebar" style="position: absolute; top:15%; left:65%; width:22%; height:10% ;" >
      <strong> 谢谢 NVIDIA China <br> for loaning the card </strong>
   </div>


.. s5_talk::

   The GPU used for these tests is the Quadro RTX 8000 with 48GB VRAM.

   Xie-xie to NVIDIA China for loaning the card.  



.. comment

   update these profilesmry.py plots with::

       scan-plot     ## on workstation    
       scan-pub      ## on laptop with simoncblyth.bitbucket.org clone
       scan-pubrst   ## prepare RST for inclusion at tail 


:i:`scan-pf-1_NHit`
---------------------

.. raw:: html

     <pre>








     </pre>


.. sidebar:: :small:`Photon Launch Size : VRAM Limited`

     .. class:: small


         **NVIDIA Quadro RTX 8000 (48 GB)**

         * photon 4*4 floats : 64 bytes
         * curandState       : 48 bytes 

         **400M photons** x :blue:`112 bytes` ~ 45G  



.. s5_talk::

    The first check is that you get the expected number of hits 
    as a function of the number of photons.

    The photon parameters takes 64 bytes and curandState takes 48 bytes
     
    So thats 112 bytes per photon, so the limit on the number 
    of photons that can be simulated in a single launch with this 48G 
    GPU is a bit more than 400M.


 










:i:`scan-pf-1_Opticks_vs_Geant4 2`
------------------------------------

.. raw:: html

    <pre>
   


 
    </pre>


.. class:: small

    .. table:: 
        :align: center

        +--------------------+----------------------------+------------------+
        | JUNO analytic, 400M photons from center         |  Speedup         |
        +====================+============================+==================+
        | Geant4 Extrap.     | 95,600 s (26 hrs)          |                  | 
        +--------------------+----------------------------+------------------+
        | Opticks RTX ON (i) | 58 s                       |   1650x          |
        +--------------------+----------------------------+------------------+


.. s5_talk::

   This compares the extrapolated Geant4 propagation time with the Opticks launch
   interval with RTX on.   The speedup is more than a factor of 1000.   Need to 
   use a log scale to make them both visible. 

   For 400M photons, Geant4 takes more than a day, Opticks takes less than a minute.   

   This is with analytic geometry. Speedup is a lot more with triangles.



:i:`scan-pf-1_Opticks_Speedup 2`
---------------------------------

.. raw:: html
  
     <pre>









     </pre>

.. class:: small

     .. table:: 
        :align: center

        +-------------------------+------------------+------------------+
        | JUNO analytic, 400M photons from center    |   Speedup        |
        +=========================+==================+==================+
        | Opticks RTX ON (i)      | 58s              |   1650x          |
        +-------------------------+------------------+------------------+
        | Opticks RTX OFF (i)     | 275s             |   350x           |
        +-------------------------+------------------+------------------+
        | Geant4 Extrap.          | 95,600s (26 hrs) |                  |
        +-------------------------+------------------+------------------+


.. s5_talk::

    This is the same information shown as a ratio.



:i:`scan-pf-1_RTX_Speedup`
---------------------------------


.. raw:: html
  
     <pre>











     </pre>

    
.. table:: 
   :align: center

   +-----------------------------------------------------+
   | **5x Speedup from RTX with JUNO analytic geometry** |
   +-----------------------------------------------------+


.. s5_talk::

    Comparing RTX mode OFF to ON shows that the
    hardware ray tracing is giving a factor of 5.





:small:`Useful Speedup > 1000x : But Why Not Giga Rays/s ? (1 Photon ~10 Rays)`   
----------------------------------------------------------------------------------

.. sidebar:: :small:`100M photon RTX times, avg of 10` 

    .. class:: small

         .. table::
            :widths: 15 5 5 

            +--------------------+-----------+------------------+----------+
            | Launch times for various geometries                          | 
            +--------------------+-----------+------------------+----------+
            | Geometry           | Launch (s)|  Giga Rays/s     | Relative |
            |                    |           |                  | to ana   |
            +====================+===========+==================+==========+
            | JUNO ana           |   13.2    |  0.07            |          |
            +--------------------+-----------+------------------+----------+
            | JUNO tri.sw        |    6.9    |  0.14            |   1.9x   |
            +--------------------+-----------+------------------+----------+
            | JUNO tri.hw        |    2.2    |  0.45            |   6.0x   |
            +--------------------+-----------+------------------+----------+
            |                                                              | 
            +--------------------+-----------+------------------+----------+
            | Boxtest ana        |    0.59   |  1.7             |          |
            +--------------------+-----------+------------------+----------+
            | Boxtest tri.sw     |    0.62   |  1.6             |          |
            +--------------------+-----------+------------------+----------+
            | Boxtest tri.hw     |    0.30   |  3.3             |  1.9x    |
            +--------------------+-----------+------------------+----------+

    .. class:: small

        * ana : Opticks analytic CSG (SM) 
        * tri.sw : software triangle intersect (SM)
        * :red:`tri.hw : hardware triangle intersect (RT)` 

        JUNO 15k triangles, 132M without instancing

        **Simple Boxtest geometry gets into ballpark**

.. class:: small

    * NVIDIA claim : :blue:`10 Giga Rays/s with RT Core` 
    * -> **1 Billion photons per second**

    * **RT cores : built-in triangle intersect + 1-level of instancing**  
    * flatten scene model to avoid SM<->RT roundtrips ?  


.. raw:: html

    <pre>












    </pre>

.. class:: small

    OptiX Performance Tools and Tricks, David Hart, NVIDIA
    https://developer.nvidia.com/siggraph/2019/video/sig915-vid




.. s5_talk::

   NVIDIA claims 10 GigaRays/s

   As each photon costs around 10 rays 
   that means 1 billion photons per second is the upper limit.

   Performance you get is very sensitive to the geometry, 
   both its complexity and how you model it.  Because these result 
   in different BVH.

   And its also necessary to consider what can run in the RT cores.  


 



.. comment

        +-----------------------------------+------------------+------------------+-------------------------------+
        |           RTX ON Launch times for 100M photons, (avg of 10)                                             |
        +-----+-----------------------------+------------------+------------------+-------------------------------+
        | Id  |  Geometry                   |  Launch Time (s) |  GigaRays/s      |  Speedup Relative to analytic | 
        +=====+=============================+==================+==================+===============================+
        | pf1 | JUNO analytic CSG           |   13.2           |  0.07            |                               |
        +-----+-----------------------------+------------------+------------------+-------------------------------+
        | pt0 | JUNO triangulated SW        |    6.9           |  0.14            |   1.9x                        |
        +-----+-----------------------------+------------------+------------------+-------------------------------+
        | pt0 | JUNO triangulated HW        |    2.2           |  0.45            |   6.0x                        |
        +-----+-----------------------------+------------------+------------------+-------------------------------+
        |     |                             |                  |                  |                               | 
        +-----+-----------------------------+------------------+------------------+-------------------------------+
        | ph11| Box-in-box analytic CSG     |    0.59          |  1.7             |                               |
        +-----+-----------------------------+------------------+------------------+-------------------------------+
        | ph13| Box-in-box tri(4k) SW       |    0.62          |  1.6             |                               |
        +-----+-----------------------------+------------------+------------------+-------------------------------+
        | ph13| Box-in-box tri(4k) HW       |    0.30          |  3.3             |    1.9x                       |
        +-----+-----------------------------+------------------+------------------+-------------------------------+


    .. class:: tiny

        JUNO: j1808v5, box-in-box: tboolean-box



.. comment

    :i:`geocache_360`
    ---------------------------------------------------------


    JUNO-360 benchmark with OptiX 6.0.0, RTX mode 
    ---------------------------------------------------------

    .. sidebar:: :small:`Ray tracing Benchmark`

         .. class:: small

             * JUNO 360 degree view
             * Equirectangular Projection
             * very high resolution 59M pixels 

               * 10240x5760 = 8x8x1280x720  

             * compare GPUs and RTX mode 
             * checking scaling across multiple GPUs 



    :i:`bench_20190526_202537`
    ---------------------------------------------------------


    :i:`bench_20190526_202537 2`
    ---------------------------------------------------------


    .. sidebar:: :small:`NVIDIA OptiX 6.0.0 : RTX Mode`

         .. class:: small

             Ray trace performance improvements:

             * 1.25x with TITAN V
             * 3.5x with TITAN RTX (RT Cores)
             
               * BVH traversal done in hardware
               * analytic intersection still software
               * triangle geometry can be done in hardware
               

             **Initially was 0.33x with RTX** 
                OptiX developers helped find the cause
               
                * unused double precision torus code
                * performance improved by eliminating *.f64* from PTX, *ptx.py*

       



    :i:`bench_20190526_143808`
    ---------------------------------------------------------


    :i:`bench_20190526_143808 2`
    ---------------------------------------------------------


    .. sidebar:: :small:`GPU Scaling Performance`

         .. class:: small

             **Opticks on IHEP GPU Cluster**

             OptiX : Almost perfect scaling for 1,2,4 GPUs

             * degrades for > 4 GPUs
             * PCIe bus congestion, pinned host memory

             "cvd" selects GPUs
                CUDA_VISIBLE_DEVICES envvar
             R0/R1
                RTX mode OFF/ON


             **NVIDIA Tesla V100 GPUs**
                No RT Cores, RTX still gives ~ 1.25x






:small:`Where Next for Opticks ?`
----------------------------------------------------


.. sidebar:: :small:`NVIDIA OptiX 7 : Entirely new API`

    .. class:: small

        * introduced August 2019
        * low-level CUDA-centric thin API
        * :strike:`near perfect scaling to 4 GPUs, for free` 


.. class:: small

    **JUNO+Opticks into Production** 

    * optimize geometry modelling for RTX
    * full JUNO geometry validation iteration 
    * JUNO offline integration
    * optimize GPU cluster throughput:

      * split/join events to fit VRAM
      * job/node/multi-GPU strategy

    * support OptiX 7, find multi-GPU load balancing approach

.. raw:: html

    <pre>
    </pre>

.. class:: small

    **Geant4+Opticks Integration : Work with Geant4 Collaboration** 

    * finalize *Geant4+Opticks* extended example
 
      * aiming for *Geant4* distrib 

    * prototype *Genstep* interface inside *Geant4* 

      * avoid customizing *G4Cerenkov* *G4Scintillation*


.. raw:: html

    <pre>
    </pre>


.. class:: small

    **Alpha Development ------>-----------------> Robust Tool**

    * many more users+developers required (current ~10+1)
    * if you have an optical photon simulation problem ... 
    
      * start by joining : https://groups.io/g/opticks
    



.. s5_talk::

   The next step is bringing Opticks into production usage 
   within JUNO 

   Beyond that I think Opticks will be mature enough for 
   an extended example of usage to be included in the Geant4 
   distribution.  Have had several discussions with Geant4 
   members and we have agreed on how to proceed.   

   This will be an important milestone, as it means 
   that all Geant4 users that care about optical photons 
   will be made aware of Opticks.

   Beyond that Opticks needs many more users and developers, 
   to turn it into an robust tool.  

   There is also a challenge in the form of NVIDIA OptiX 7 
   which has drastically changed its API. A important 
   multi-GPU feature is going away. 

   To regain this requires developing load balancing across multiple GPUs myself.




       

 

.. comment

    * geometry translation help : NEXO, DUNE, LZ  
    * interest -> usage : SABRE, Baikal GVD, KM3Net, MicroBooNE
    * expand interest : scintillator using medical imaging companies 
    * automated geometry translation, but problems inevitable

    * now: sole-developer + ~10 exploratory users from ~5 detectors  
    * needs users+developers, join https://groups.io/g/opticks 


   

:small:`Drastically Improved Optical Photon Simulation Performance...`
-----------------------------------------------------------------------------------------


.. sidebar:: :small:`How is >1000x possible ?`

     .. class:: small

          **Progress over 30 yrs, Billions of Dollars**

          * industry funded : game, film, design, ... 
          * re-purposed by translating geometry to GPU

            * tree of C++ objects -> arrays -> BVH

          **Photon Simulation ideally suited to GPU**
 
          * millions of photons -> abundantly parallel 
          * simple phys. -> small stack -> many in flight 
          * decoupled -> no synchronization 

          **Dynamically generated simulation feasible ?**

          * current reconstruction -> custom simulation
          * no more : limited MC stats in edge cases 
          
          


.. class:: small

  **Three revolutions reinforcing each other:**

  * games -> graphics revolution -> GPU -> cheap TFLOPS
  * internet scale big datasets -> ML revolution
  * computer vision revolution for autonomous vehicles 
    
  :blue:`Deep rivers of development, ripe for re-purposing`
  
  * analogous problems -> solutions
  * :red:`experience across fields essential to find+act on analogies`  

  **Example : DL denoising for faster ray trace convergence**

  * analogous to hit aggregation
  * skip the hits, jump straight to DL smoothed probabilities 

    * :red:`blurs the line between simulation and reconstruction`

.. raw:: html

   <pre>
   </pre>

.. class:: small

   **Re-evaluate long held practices in light of new realities:**

   * large ROOT format (C++ object) MC samples repeatedly converted+uploaded to GPU for DL training ... OR:
   * small Genstep NumPy arrays uploaded, dynamically simulated into GPU hit arrays in fractions of a second 


.. comment

  **Transformative Performance : But how to transform ?**

  * graphics : oldest user of GPUs -> rich palette of techniques 
  * vision spherical CNN -> potential for reconstruction 



.. s5_talk::

   You might be wondering how it is possible for a more than 
   three orders of magnitude speedup to happen.

   Well, I think its because the success of Geant4 across
   more than 20 years have made it too easy for everyone to just continue 
   using it.

   Meanwhile billions of dollars of industry development 
   have gone into improving ray tracing.

   Liberating geometry from the Geant4 object model allows
   all this development effort to be applied to optical photon simulation.







:small:`NEST + Opticks Approaches to Integration ?`
-----------------------------------------------------

.. sidebar:: :small:`NESTProc::PostStepDoIt Options`

    .. class:: small

        **GPU Photon Generation**

        * offload optical photon memory costs to VRAM
        * no photon copying overheads
        * :red:`requires porting generation loop to CUDA`

          * collect "genstep" inputs 

        :red:`-> splits implementation CPU/GPU`

        **CPU Input Photons** 

        * :red:`simple : nothing to port` 

          * just collect photons, and not *AddSecondary*

        * pay twice for photon memory + copy overhead
        * (used by Opticks for convenient CPU/GPU comparisons)
        * easily added to *G4Opticks* interface 


.. class:: small

    **How difficult to port NEST photon generation to GPU ?**    

    A quick look at NEST code::

        NESTProc::AtRestDoIt
        NESTProc::MakePhoton
        NESTcalc::PhotonTime

    * suggests doable
    
      * as pure calulation and random throws
      * no need even for GPU texture lookups
      * just need to collect "stack" into Gensteps

    * :red:`only generation loop needed on GPU` 
    * "Genstep" parameter setup stays on CPU 


.. raw:: html

   <pre>
   </pre>

.. class:: small

    **Example : JUNO Scintillator Reemission**

    * subset of absorption photons reborn in same CUDA thread
    * bake inverse CDF into a :blue:`GPU texture` 
    * *cuRAND* random lookup into texture yields wavelength 
    * wavelength distribution matches CPU implementation

      * :red:`just a fast texture lookup on GPU` 


.. s5_talk::

   There are two approaches:

    * easy: but memory + overhead wasteful way 
    * or not-so-certain but allowing to offload the photons to GPU 








:small:`Summary`
----------------------------------------------------------------








.. sidebar:: :small:`Highlights 2019`

   .. class:: small

      * Benefit from hardware accelerated ray tracing
      * **Opticks > 1000x Geant4** (one Turing GPU) 



.. image:: /env/presentation/1px.png
   :width: 500px
   :height: 50px

..


  *Opticks* : state-of-the-art GPU ray tracing applied to optical photon simulation and
  integrated with *Geant4*, giving a leap in performance that eliminates memory and time bottlenecks.
 

  .. image:: /env/presentation/1px.png
     :width: 1000px
     :height: 1px




  * Drastic speedup -> better detector understanding -> greater precision
  
    * **any simulation limited by optical photons can benefit** 
    * more photon limited -> more overall speedup (99% -> 100x) 

  .. image:: /env/presentation/1px.png
     :width: 1000px
     :height: 10px



.. table::
    :align: center

    +----------------------------------------------+-----------------------------------------+
    | https://bitbucket.org/simoncblyth/opticks    | code repository                         |                   
    +----------------------------------------------+-----------------------------------------+
    | https://simoncblyth.bitbucket.io             | presentations and videos                |
    +----------------------------------------------+-----------------------------------------+
    | https://groups.io/g/opticks                  | forum/mailing list archive              |
    +----------------------------------------------+-----------------------------------------+
    | email:opticks+subscribe@groups.io            | subscribe to mailing list               |
    +----------------------------------------------+-----------------------------------------+ 


.. comment

  *Opticks* uses hardware accelerated GPU ray tracing
  via NVIDIA OptiX to give **effectively zero time and zero CPU memory** 
  optical photon simulation to *Geant4* applications.



.. s5_talk::

   So in summary : Opticks applies the best available GPU ray tracing to optical 
   photon simulation resulting in speedups exceeding three orders of magnitude.

   Opticks is still very young and it really needs users to turn it into 
   a robust tool that anyone with an optical photon simulation problem 
   can use to elimate.

   These speedups are just for the optical photons, how much that 
   helps with the overall speedup depends on how limited you are by 
   optical photons.




*Opticks* : Needs and Challenges 
-----------------------------------

.. sidebar:: *Opticks* Needs **YOU**

    * to use it -> improves it 
    * currently ~10 users + 1 developer  
    * many more to become a robust tool    

    Lots of interest, little contribution


.. class:: small

    * perfect *Geant4* match not feasible (*float* vs *double*) 


.. raw:: html

    <pre>
    </pre>


.. class:: small

    * NVIDIA OptiX : closed source proprietry 

      * "black box" BVH : details secret 

        * flying blind -> expts -> best BVH 

    * NVIDIA OptiX engineers helpful, BUT:

      *  "performance minimal reproducers" tough to create

    * No influence on direction of NVIDIA OptiX 

      * film/game/design studios call the shots 
      * must accept what : *NVIDIA giveth and taketh away* 
     
        * eg OptiX 7 : :strike:`near perfect linear scaling up to 4 GPUs`


.. raw:: html

    <pre>
    </pre>


.. class:: small

    * BYOB : bring your own BVH (like Chroma from Stanley Seibert) 

      * difficult to justify development time when no access to RT Cores 



.. s5_talk::

    The most important thing is that Opticks needs YOU.
    
    There are also technical challenges with working with 
    closed source software and hardware.  

    And also some degree of risk in locking yourself to NVIDIA GPUs.







:i:`geocache_360`
---------------------------------------------------------




.. s5_talk::

    This is a 360 degree view of the all the JUNO central detector PMTs,
    which I used a raytracing benchmark.
 




   



.. s5_background_image::

    ##
    ## slide titles and background image urls, 
    ## including server relative urls like /env/geant4/geometry/collada/daeview/20140419-170713.png
    ## and protocol relative urls like //localhost/env/test/LANS_AD3_CoverGas_Humidity.png
    ##
    ## NB1 slide titles here must match those in body precisely, 
    ## NB2 also ensure all slide titles are unique
    ##
    ##slide0
    ##/env/geant4/geometry/collada/g4daeview/20140419-170713.png auto_auto 0px_0px
    ##/env/geant4/geometry/collada/g4daeview/20140419-170713-1024x768.png auto_auto 0px_0px
    ##
    ##   wide targetting 1280x720
    ##   
    ##
    slide0
    /env/graphics/ggeoview/jpmt-inside-wide_crop.png 1280px_720px

    Opticks Benefits
    /env/graphics/ggeoview/jpmt-inside-wide_crop.png 1280px_720px

    Visualizing An Optical Photon Simulation
    /env/graphics/ggeoview/jpmt-inside-wide_crop.png 640px_360px 600px_100px

    Overview
    /env/graphics/ggeoview/jpmt-inside-wide_crop.png 1280px_720px

    g4daeview.py : Fast OpenGL 3D viewer for G4DAE files
    /env/geant4/geometry/collada/g4daeview/20140419-170713.png

    Cerenkov Photons Simulation - Top View
    /env/geant4/geometry/collada/g4daeview/20141224-115923.png

    Cerenkov Photons Simulation - Side View
    /env/geant4/geometry/collada/g4daeview/20141224-115935.png

    Scintillation Photons Simulation - Top View
    /env/geant4/geometry/collada/g4daeview/20141224-121444.png

    Scintillation Photons Simulation - Side View
    /env/geant4/geometry/collada/g4daeview/20141224-121435.png

    Standard Geant4 Workflow
    /env/keynotefigs/G4DAEChroma/G4DAEChroma.001.png

    External Photon Simulation Workflow
    /env/keynotefigs/G4DAEChroma/G4DAEChroma.002.png


    ## keynote wide default is 1920x1080  aspect 1.77777777 16:9
    ## but my slides use       1280x720
    ## used document panel at top right to change to custom size of 1280x720
    ## then exported from Keynote as Images selecting PNG creates
    ## a PNG of size 1280x720
    ##   cp ~/Documents/Geant4OpticksWorkflow/Geant4OpticksWorkflow.001.png ~/simoncblyth.bitbucket.io/env/Documents/Geant4OpticksWorkflow/
    ##
    Geant4OpticksWorkflow
    /env/Documents/Geant4OpticksWorkflow/Geant4OpticksWorkflow.001.png 1280px_720px

    GGeoView
    /env/graphics/ggeoview/ggeoview-cerenkov-001.png 1047px_795px

    GGeoView M1 Points
    /env/graphics/ggeoview/ggeoview-scintillation-points-mat1.png 1435px_848px

    GGeoView Flag Selection 
    /env/graphics/ggeoview/ggeoview-scintillation-flag-seq-select.png 1436px_842px

    GGeoView Cerenkov Geom M1
    /env/graphics/ggeoview/ggeoview-cerenkov-m1-geom.png 1416px_845px
  
    Detecting Neutrinos via Optical Photons 1
    /env/presentation/dayabay-principal_half.png 1417px_830px 

    Detecting Neutrinos via Optical Photons 2
    /env/presentation/dayabay-principal_half.png 1417px_830px 
 
    JPMT Inside Wide 
    /env/graphics/ggeoview/jpmt-inside-wide_half.png 1432px_844px

    JPMT Wide
    /env/graphics/ggeoview/jpmt-wide_half.png 1409px_836px
  
    JPMT Headview
    /env/graphics/ggeoview/jpmt-headview_half.png 1308px_783px
 
    JPMT Backview
    /env/graphics/ggeoview/jpmt-backview_half.png 1149px_794px 
 
    JPMT Approach 
    /env/graphics/ggeoview/jpmt-approach_half.png 1431px_839px

    JPMT Arrival 
    /env/graphics/ggeoview/jpmt-arrival_half.png 1427px_841px 
 
    Optical Photon Simulation Problem...
    /env/graphics/ggeoview/jpmt-before-contact_half.png 1430px_844px 

    JPMT Before Contact
    /env/graphics/ggeoview/jpmt-before-contact_half.png 1430px_844px 

    JPMT Before Contact 2
    /env/graphics/ggeoview/jpmt-before-contact_half.png 1430px_844px 

    JPMT Before Contact 3
    /env/graphics/ggeoview/jpmt-before-contact_half.png 1430px_844px 

 
    JPMT After Contact 
    /env/graphics/ggeoview/jpmt-after-contact_half.png 1425px_840px 
  
    JPMT Inside Outside 
    /env/graphics/ggeoview/jpmt-inside-outside_half.png 1401px_842px

    NVIDIA OptiX In Action
    /env/presentation/optix-in-action_half.png 966px_646px 100px_50px

    PmtInBox approach 1
    /env/graphics/ggeoview/PmtInBox-approach.png 1069px_769px 

    PmtInBox approach 2
    /env/graphics/ggeoview/PmtInBox-approach.png 1069px_769px 

    PmtInBox after 1
    /env/graphics/ggeoview/PmtInBox-after.png 1057px_760px 

    PmtInBox after 2
    /env/graphics/ggeoview/PmtInBox-after.png 1057px_760px 

    Daya Bay PMT Wall Photo 1
    /env/presentation/gtc2016/dyb-pmt-wall-photo.png 1329px_798px  

    Daya Bay PMT Wall Photo 2
    /env/presentation/gtc2016/dyb-pmt-wall-photo.png 1329px_798px  

    Super-Kamiokande PMTs Not 16:9 
    /env/presentation/gtc2016/sk-PH20-water-withboat-apr23-wm.png 1181px_771px

    Super-Kamiokande PMTs 1
    /env/presentation/PH20-water-withboat-apr23-wm_crop.png 1280px_720px

    Super-Kamiokande PMTs 2
    /env/presentation/PH20-water-withboat-apr23-wm_crop.png 1280px_720px

    Super-Kamiokande PMTs 3
    /env/presentation/PH20-water-withboat-apr23-wm_crop.png 1280px_720px

    Super-Kamiokande PMTs 4
    /env/presentation/PH20-water-withboat-apr23-wm_crop.png 1280px_720px

    Kamiokande II 1
    /env/presentation/1987a.png 1280px_720px

    Kamiokande II 2
    /env/presentation/1987a.png 1280px_720px

    Kamiokande II 3
    /env/presentation/1987a.png 1280px_720px


    Fast Optical Photon Simulation
    /env/presentation/newtons-opticks.png 374px_684px 800px_0px

    Photomultiplier Tubes (PMTs)
    /env/presentation/hamamatsu-pmt-16x9.png 1280px_720px

    Photomultiplier Tube Operation
    /env/presentation/hamamatsu-pmt-16x9.png 1280px_720px

    Old Hamamatsu Photomultiplier Tubes (PMTs)
    /env/presentation/hamamatsu-pmt.png 1099px_734px

    Old Photomultiplier Tube Operation
    /env/presentation/hamamatsu-pmt.png 1099px_734px




    Jiangmen Underground Neutrino Observatory (JUNO) 
    /env/presentation/juno-schematic-5.png 1391px_734px

    Jiangmen Underground Neutrino Observatory, Goals
    /env/presentation/juno-schematic-5.png 1391px_734px


    Dayabay Reactor Neutrino Expt, Far Site
    /env/presentation/DybFar_crop.png 1280px_720px

    Daya Bay Far Site 2
    /env/presentation/DybFar_crop.png 1280px_720px

    Daya Bay Far Site 3
    /env/presentation/DybFar_crop.png 1280px_720px

    Geant4 : Monte Carlo Simulation Toolkit 
    /env/presentation/g4-hep.png 1025px_621px 100px_100px 

    Geant4 : Monte Carlo Simulation Toolkit Generality
    /env/presentation/g4-hep.png 1025px_621px 100px_100px 

    "Seeing" neutrinos via scintillation + Cherenkov light
    /env/presentation/cherenkov.png 316px_203px 850px_400px

    Opticks : Auto-Instancing
    /env/graphics/ggeoview/ggv-juno-instancing.png 852px_592px 450px_80px

    NVIDIA OptiX 1
    /env/presentation/NVIDIAOptiXWebsite_Oct2016.png 1280px

    NVIDIA OptiX 2
    /env/presentation/NVIDIAOptiXWebsite_Oct2016.png 1280px

    OpticksDocs
    /env/presentation/OpticksDocs.png 1280px_720px

    Daya Bay Antineutrino Detection via Inverse Beta Decay 1
    /env/presentation/AntineutrinoDetectionViaIBDJetterSept2014.png 809px_576px 100px_100px

    Daya Bay Antineutrino Detection via Inverse Beta Decay 2
    /env/presentation/AntineutrinoDetectionViaIBDJetterSept2014.png 809px_576px 100px_100px
    ## a = np.array([1676.0, 1192.0])
    ## .8*720.*a/1192.

    Daya Bay Energy Response Model (1)
    /env/presentation/ZheTaupDetectorResponseModel.png 968px_576px 100px_100px

    Daya Bay Energy Response Model (2)
    /env/presentation/ZheTaupDetectorResponseModel.png 968px_576px 100px_100px

    ## a = np.array([2392., 1424.]) ; .8*720*a/a[1]



    Daya Bay Energy Response Model : Fit to Calibration Data 1
    /env/presentation/EnergyResponseModel.png 693px_504px 0px_100px 
    ## a = np.array([1760., 1280.])
    ## .8*720.*a/1280.   792px_576px
    ## 693.,  504

    Daya Bay Energy Response Model : Fit to Calibration Data 2
    /env/presentation/ConstrainingNonLinearity.png 761px_553px 0px_80px
    ## a = np.array([1698., 1166.])
    ## .8*720.*a/1166. 
    
    Daya Bay nGd Analysis : Most Precise Theta13
    /env/presentation/DYBZheTaup2015Theta13OscillationAnalysis.png 1057px_625px 100px_60px
    ## a = np.array([2140., 1266.])
    ## .8*720.*a/1166.


    Opticks Analytic Daya Bay Near Site, GPU Raytrace (3)
    /env/presentation/op_full_raytrace_3.png 1280px_720px

    Opticks Analytic Daya Bay Near Site, GPU Raytrace (1)
    /env/presentation/op_full_raytrace_1.png 1280px_720px

    Opticks Analytic Daya Bay Near Site, GPU Raytrace (0)
    /env/presentation/op_full_raytrace_0.png 1280px_720px

    Opticks Analytic Daya Bay Near Site, GPU Raytrace (2)
    /env/presentation/op_full_raytrace_2.png 1280px_720px

    Opticks Analytic JUNO Chimney, GPU Raytrace (0)
    /env/presentation/j1707_chimney_analytic_raytrace.png 1280px_720px

    Opticks Analytic JUNO PMT Snap, GPU Raytrace (1)
    /env/presentation/j1707-okop-snap.png 1280px_720px

    GPU Instance Culling with Level Of Detail
    /env/presentation/j1707_lod_oglrap_instcull.png 1280px_720px

    Opticks Export of G4 geometry to glTF 2.0
    /env/yoctoglrap/dyb_near_venice_half.png 1020px_737px

    What are NumPy Arrays
    /env/presentation/what_are_numpy_arrays.png 1280px_720px

    What are NumPy Arrays 2
    /env/presentation/what_are_numpy_arrays.png 1280px_720px

    BVH
    /env/presentation/nvidia/NV_Turing_Editors_Day_029.png 1280px_720px

    Spatial Index Acceleration Structure
    /env/presentation/nvidia/NV_Turing_Editors_Day_029.png 1280px_720px



    BVH Pascal 
    /env/presentation/nvidia/NV_Turing_Editors_Day_030.png 1280px_720px
 
    BVH Turing
    /env/presentation/nvidia/NV_Turing_Editors_Day_031.png 1280px_720px
 
    Hardware Traversal of BVH Spatial Index
    /env/presentation/nvidia/NV_Turing_Editors_Day_031.png 1280px_720px

    SIGGRAPH_2018_Announcing_Worlds_First_Ray_Tracing_GPU
    /env/presentation/nvidia/SIGGRAPH_2018_Announcing_Worlds_First_Ray_Tracing_GPU_half.png 1280px_720px

    SIGGRAPH_2019_Eric_Enderton_RT_Cores
    /env/presentation/nvidia/SIGGRAPH_2019_Eric_Enderton_RT_Cores.png 1280px_720px


    ##
    ##  original 2880px_1620px
    ##  half     1440px_810px

    NVIDIA Turing GPU : 72 SM, 4608 CUDA cores
    /env/presentation/nvidia/NV_Turing_Editors_Day_009.png 1280px_720px

    NVIDIA Turing GPU : 72 SM, 4608 CUDA cores (spec)
    /env/presentation/nvidia/NV_Turing_Editors_Day_009.png 1280px_720px
 
    Raytrace vs Raster
    /env/presentation/nvidia/NV_Turing_Editors_Day_132.png 1280px_720px

    Ray-tracing vs Rasterization
    /env/presentation/nvidia/black.png 1280px_720px

    Raytrace Diagram
    /env/presentation/graphics/1024px-ray_trace_diagram.svg.png 1280px_720px

    ## https://images.anandtech.com/doci/13282/NV_Turing_Editors_Day_132.png
    ##
    ##   1280 720
    ##   1920 1080  *1.5
    ##  https://www.anandtech.com/Gallery/Album/6660##6
    ## 

    j1808_top_ogl
    /env/presentation/j1808/j1808_top_ogl.png 1280px_720px

    j1808_top_rtx
    /env/presentation/j1808/j1808_top_rtx.png 1280px_720px
    ##   1920 1080

    j1808_escapes
    /env/presentation/j1808/j1808_escapes.png

    geocache_360
    /env/presentation/geocache_360.png 1280px_720px 0px_0px 

    JUNO-360 benchmark with OptiX 6.0.0, RTX mode 
    /env/presentation/geocache_360.png 1280px_720px

    absmry_1M 
    /env/presentation/ana/absmry_1M.png 1280px_720px

    absmry_1M 2
    /env/presentation/ana/absmry_1M.png 1280px_720px

    ta34_1M
    /env/presentation/ana/ta34_1M.png 1280px_720px

    ta34_1M 2
    /env/presentation/ana/ta34_1M.png 1280px_720px

    tv34_1M_a
    /env/presentation/ana/tv34_1M_a.png 1280px_720px

    tv34_1M_b
    /env/presentation/ana/tv34_1M_b.png 1280px_720px

    tv21_1M_a
    /env/presentation/ana/tv21_1M_a.png 1280px_720px

    tv21_1M_a 2
    /env/presentation/ana/tv21_1M_a.png 1280px_720px

    tv21_1M_c
    /env/presentation/ana/tv21_1M_c.png 1280px_720px

    RTX_Speedup
    /env/presentation/ana/RTX_Speedup.png 1280px_720px
    
    Overheads
    /env/presentation/ana/Overheads.png 1280px_720px
 
    Opticks_Speedup
    /env/presentation/ana/Opticks_Speedup.png 1280px_720px
 
    Opticks_vs_Geant4
    /env/presentation/ana/Opticks_vs_Geant4.png 1280px_720px

    Opticks_vs_Geant4 2
    /env/presentation/ana/Opticks_vs_Geant4.png 1280px_720px
    
    NHit
    /env/presentation/ana/NHit.png 1280px_720px

    Interval_over_Launch
    /env/presentation/ana/Interval_over_Launch.png 1280px_720px
 
    TITAN RTX : 72 Raytrace Dedicated RT Cores, 4608 CUDA Cores, 24GB VRAM, 2500 USD
    /env/presentation/nvidia/TITAN_RTX.png 1280px_720px
 
    bench_20190526_143808
    /env/presentation/ana/bench_20190526_143808.png  

    bench_20190526_143808 2
    /env/presentation/ana/bench_20190526_143808.png  

    bench_20190526_202537
    /env/presentation/ana/bench_20190526_202537.png  

    bench_20190526_202537 2
    /env/presentation/ana/bench_20190526_202537.png  



    tv16_Fastener
    /env/presentation/tv/tv16_Fastener.png

    tv20_polycone_neck
    /env/presentation/tv/tv20_polycone_neck.png

    20inch PMT neck : "cylinder-torus" -> polycone
    /env/presentation/tv/tv20_polycone_neck.png

    genstep_interface
    /env/presentation/simulation/genstep_interface.png 1280px_720px

    Introducing OptiX 7  
    /env/presentation/nvidia/Introducing_OptiX_7.png 1280px_720px

    Where Next for Opticks ?
    /env/presentation/nvidia/Introducing_OptiX_7.png 640px_360px 670px_300px
    ##/env/presentation/nvidia/Introducing_OptiX_7.png 640px_360px 640px_300px



    TURING BUILT FOR RTX  
    /env/presentation/nvidia/TURING_Built_for_RTX_half.png 1280px_720px

    TURING BUILT FOR RTX 2 
    /env/presentation/nvidia/TURING_Built_for_RTX_half.png 1280px_720px



    NVIDIA RTX Metro Exodus
    /env/presentation/nvidia/NVIDIA_RTX_Metro_Exodus_half.png 1280px_720px

    Modern_GPU_RAY_Tracing
    /env/presentation/nvidia/Modern_GPU_RAY_Tracing.png 1280px_720px

    NVIDIA OptiX : programming model analogous to rasterization APIs : OpenGL shaders
    /env/presentation/nvidia/Modern_GPU_RAY_Tracing.png 1280px_720px

    NVIDIA_Quadro_RTX 8000 (48G)
    /env/presentation/nvidia/NVIDIA_Quadro_RTX.png 1280px_720px


    SIGGRAPH_2010_OptiX_A_General_Purpose_Ray_Tracing_Engine
    /env/presentation/nvidia/SIGGRAPH_2010_OptiX_A_General_Purpose_Ray_Tracing_Engine.png 1280px_720px

    Useful Speedup > 1000x : But Why Not Giga Rays/s ? (1 photon ~10 rays)
    /env/presentation/nvidia/dhart/dhart_siggraph_2019_RTX_traversal_custom_primitives.png 720px_405px 10px_210px

    ## /env/presentation/nvidia/dhart/dhart_siggraph_2019_RTX_traversal_custom_primitives.png 640px_360px 20px_260px
    ## 
    ##
    ##
    ##
    ## https://juno.ihep.ac.cn/cgi-bin/Dev_DocDB/ShowDocument?docid=5079
    ##
    ## cp ~/Documents/JUNOIntro/JUNOIntro.00[1,2,3,4].png ~/simoncblyth.bitbucket.io/env/Documents/JUNOIntro/
    ##

    JUNO_Intro_1
    /env/Documents/JUNOIntro/JUNOIntro.001.png 1280px_720px

    JUNO_Intro_2
    /env/Documents/JUNOIntro/JUNOIntro.002.png 1280px_720px

    JUNO_Intro_3
    /env/Documents/JUNOIntro/JUNOIntro.003.png 1280px_720px

    JUNO_Intro_4
    /env/Documents/JUNOIntro/JUNOIntro.004.png 1280px_720px


    JUNO_Multipurpose_Pedro_NuFact_2019 
    /env/presentation/juno/JUNO_Multipurpose_Pedro_NuFact_2019.png 960px_720px 0px_0px


    dhart_siggraph_2019_OptiX_5_traversal
    /env/presentation/nvidia/dhart_siggraph_2019_OptiX_5_traversal.png 1280px_720px 

    dhart_siggraph_2019_OptiX_5_traversal
    /env/presentation/nvidia/dhart_siggraph_2019_OptiX_5_traversal.png 1280px_720px 

    scan-pf-check-GUI-TO-BT5-SD
    /env/presentation/ana/scan-pf-1/scan-pf-check-GUI-TO-BT5-SD.png 1280px_720px

    scan-pf-check-GUI-TO-SC-BT5-SD
    /env/presentation/ana/scan-pf-1/scan-pf-check-GUI-TO-SC-BT5-SD.png 1280px_720px

    scan-pf-0_Interval_over_Launch
    /env/presentation/ana/scan-pf-0/Interval_over_Launch.png 1280px_720px

    scan-pf-0_NHit
    /env/presentation/ana/scan-pf-0/NHit.png 1280px_720px

    scan-pf-0_Opticks_Speedup
    /env/presentation/ana/scan-pf-0/Opticks_Speedup.png 1280px_720px

    scan-pf-0_Opticks_vs_Geant4
    /env/presentation/ana/scan-pf-0/Opticks_vs_Geant4.png 1280px_720px

    scan-pf-0_Overheads
    /env/presentation/ana/scan-pf-0/Overheads.png 1280px_720px

    scan-pf-0_RTX_Speedup
    /env/presentation/ana/scan-pf-0/RTX_Speedup.png 1280px_720px

    scan-pf-0_RTX_Speedup 2
    /env/presentation/ana/scan-pf-0/RTX_Speedup.png 1280px_720px


    scan-pf-1_Interval_over_Launch
    /env/presentation/ana/scan-pf-1/Interval_over_Launch.png 1280px_720px

    scan-pf-1_NHit
    /env/presentation/ana/scan-pf-1/NHit.png 1280px_720px

    scan-pf-1_Opticks_Speedup
    /env/presentation/ana/scan-pf-1/Opticks_Speedup.png 1280px_720px

    scan-pf-1_Opticks_Speedup 2
    /env/presentation/ana/scan-pf-1/Opticks_Speedup.png 1280px_720px

    scan-pf-1_Opticks_vs_Geant4
    /env/presentation/ana/scan-pf-1/Opticks_vs_Geant4.png 1280px_720pxS

    scan-pf-1_Opticks_vs_Geant4 2
    /env/presentation/ana/scan-pf-1/Opticks_vs_Geant4.png 1280px_720pxS


    scan-pf-1_Overheads
    /env/presentation/ana/scan-pf-1/Overheads.png 1280px_720px

    scan-pf-1_RTX_Speedup
    /env/presentation/ana/scan-pf-1/RTX_Speedup.png 1280px_720px

    Opticks : Translates G4 Geometry to GPU, Without Approximation
    /env/presentation/face_view_PMTs.png 640px_360px 20px_340px




.. comment

    CHEP

    on-demand.gputechconf.com/gtc-eu/2018/pdf/e8527-real-time-ray-tracing-with-nvidia-rtx.pdf

    https://www.youtube.com/watch?v=Mrixi27G9yM
       RTX launch event : Gamescon (Germany) Aug 21, 2018

       13:30 

    https://nvidianews.nvidia.com/multimedia



.. comment

    DANCE : 15+5 
    CHEP  : 25+5

..  comment

    points to stress

    * high level : what is opticks
    * Geant4 interface and gensteps -> GPU resident photons -> memory advantage (thrust stream compaction)

    Pedro NUFACT

    * https://juno.ihep.ac.cn/cgi-bin/Dev_DocDB/ShowDocument?docid=5079

.. comment

    
    NVIDIA 
                        Memory    Bandwidth     CUDA(RT) Cores
    TITAN V             12 GB       651 GB/s    5120(0)
    Tesla V100          32 GB       900 GB/s    5120(0)  
    TITAN RTX           24 GB       672 GB/s    4608(72)
    Quadro RTX 8000     48 GB       672 GB/s    4608(72)

    SM*64 gives cores 

    https://www.techpowerup.com/gpu-specs/titan-v.c3051
    https://www.techpowerup.com/gpu-specs/titan-rtx.c3311 
    https://www.techpowerup.com/gpu-specs/quadro-rtx-8000.c3306



