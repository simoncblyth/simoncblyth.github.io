.. meta::
   :title: Opticks vCHEP 2021
   :description: JUNO, OptiX, Opticks
   :note: Only 8 min talk 


.. include:: my_s5defs.txt


.. comment

   ITEMS TO COVER, AS ADVERTISED IN ABSTRACT :  

   * on-GPU efficiency culling : avoids detector specific assumptions in G4Opticks sensor interface


.. comment

   Navigate the HTML slides by entering a page number and pressing return 

   reps-talk opticks-oct2019-dance    # NB underscores to hyphens for latex 

      ## slide titles and s5_text directive content are written to /tmp/opticks-oct2019-dance.rst
      ## reps-talk converts that into a PDF document : as an aid to thinking about what to say 


:i:`Opticks : GPU Optical Photon Simulation for Particle Physics with NVIDIA OptiX` 
========================================================================================


.. raw:: html

    <div class="mytitle">
    <header>
    <h1 style="background-color:lightgrey"> 
          Integration of JUNO simulation framework with <i>Opticks</i> : GPU accelerated optical propagation via NVIDIA® OptiX™ 
        <h2 style="background-color:lightgrey;text-align:center"> Open source, https://bitbucket.org/simoncblyth/opticks </h2>
    </h1>
    </header>
    </div>

    <img style="position:absolute; top:200px; LEFT:100px; WIDTH:200px; " src="/env/presentation/juno/JUNO_logo.png"  />
    <div class="mycredit">
    <h2 style="background-color:lightgrey"> Simon C Blyth, IHEP, CAS &mdash; On behalf of the JUNO Collaboration &mdash; vCHEP, 19 May 2021</h2>
    </div>


.. s5_talk:: 

    Opticks applies state-of-the-art GPU ray tracing from NVIDIA OptiX to optical photon simulation 
    and integrates this with Geant4. This can give drastic speedups of more a factor 1000.

    This render shows the photons resulting from a muon crossing the JUNO scintillator, 
    each line represents a single photon.





Outline
----------------------------------------------------

.. image:: /env/presentation/newtons-opticks.png 
   :width: 299px
   :height: 547px 
   :align: right


.. class:: small


    .. raw:: html

       <span>&nbsp;</span>

    * Context and Problem

      * p2: Jiangmen Underground Neutrino Observatory (JUNO)
      * p3: JUNO Optical Photon Simulation Problem...
      * p4: Optical Photon Simulation ≈ Ray Traced Image Rendering

    * NVIDIA Tools to create Solution   

      * p5: NVIDIA Ampere : 2nd Generation RTX
      * p6: NVIDIA OptiX Ray Tracing Engine
      * p7: NVIDIA OptiX 7 : Entirely new thin API

    * Opticks : Introduction + New Features

      * p8,9: Geant4 + Opticks Hybrid Workflow : External Optical Photon Simulation
      * p10: New : Collection Efficiency Culling on GPU  
      * p11: New : *CSGFoundry* Geometry Model

    * Opticks : 1st JUNO Renders with NVIDIA OptiX 7 

      * p12:Ray trace renders
      * p13:Geometry factorization  
      * p15:Ray trace times for various geometries   

    * p17: Summary + Links 
    * p18: Acknowledgement : Opticks "Hackathon" Series for NVIDIA OptiX 6->7
    * p19: LZ with Opticks

    .. raw:: html
 
       <hr/>


.. s5_talk::

   * After describing the context I will briefly introduce Opticks
     and describe some new features before showing some first 
     renders with NVIDIA OptiX 7 
     


:i:`JUNO_Intro_2`
------------------

.. s5_talk::

    JUNO will be the worlds largest liquid scintillator detector,
    with a 20 kiloton spherical volume of scintillator instrumented with  
    almost 50 thousand PMTs 


.. comment

    :i:`JUNO_Intro_3`
    ------------------

    .. s5_talk::

        JUNO will be able to detect neutrinos from many terrestrial and extra-terrestrial 
        sources including : solar, atmospheric, geo-neutrinos. 

        Despite 700 m of overburden the largest backgrounds to these neutrino signals   
        will be from cosmic muon induced processes.  

        A muon veto is used to control the backgrounds.
        
        However to minimize the time and volume vetoed, which cuts into 
        it is necessary to have a good muon reconstruction which means 
        that we need large samples of cosmic muons.




`Optical Photon Simulation Problem...`
---------------------------------------------------------

.. raw:: html

     <pre>







     </pre>

.. sidebar:: :small:`Huge CPU Memory+Time Expense`

    .. class:: small

         **JUNO Muon Simulation Bottleneck**
           ~99% CPU time, memory constraints

         **Ray-Geometry intersection Dominates**
           simulation is not alone in this problem...

         **Optical photons : naturally parallel, simple :**
           * produced by Cherenkov+Scintillation 
           * yield only Photomultiplier hits


.. s5_talk::

   A muon travelling across the scintillator yields tens of millions 
   of optical photons, presenting memory and time challenges for simulation.

   Most of the time is taken finding intersections between photons and geometry 
   Fortunately simulation is not alone in this bottleneck.


.. comment

   Optical photons are naturally parallel : they can be considered 
   to be produced only by two processes : Cherenkov and Scintillation and we
   are mainly interested in photons that hit the PMTs.  

   These characteristics make it straightforward integrate an external optical
   simulation.
 



:small:`Optical Photon Simulation ≈ Ray Traced Image Rendering`
-------------------------------------------------------------------------------

.. sidebar:: Not a Photo, a Calculation

    .. image:: /env/optix/samples/optix-ray-tracing-glasses.png 
       :width: 450px
       :align: right

    .. class:: tiny

        http://on-demand.gputechconf.com/siggraph/2013/presentation/SG3106-Building-Ray-Tracing-Applications-OptiX.pdf


.. class:: small


    :bluebold:`simulation` 
       photon parameters at sensors (PMTs) 

    :bluebold:`rendering` 
       pixel values at image plane


.. raw:: html

    <pre>

    </pre>


.. class:: small

    **Much in common : geometry, light sources, optical physics**

    * :redbold:`both limited by ray geometry intersection, aka ray tracing`


.. raw:: html

    <pre>

    </pre>

.. class:: small

    **Many Applications of ray tracing** :

    * advertising, design, architecture, films, games,...
    * -> huge efforts to improve hw+sw over 30 yrs


.. s5_talk::

    Ray traced image rendering in computer graphics has exactly the same problem.

    Actually, there is much in common between optical photon simulation and 
    ray traced image rendering.   

    With simulation you want to know photon parameters at PMTs, with rendering 
    you need pixel values at the image plane.

    Both these are limited by ray geometry intersection, which is also known as ray tracing.

    Ray tracing is used across many industries, which means that are huge efforts
    across decades to improve ray tracing perfromance.
    



:small:`Ampere : 2nd Generation RTX`
-----------------------------------------

.. class:: small

   NVIDIA Ampere (2020):
      "...triple double over Turing (2018, 10 GigaRays/s)..."

   * **RT Core** : ray trace dedicated GPU hardware

   * **NVIDIA GeForce RTX 3090** 

     * 10,496 CUDA Cores, 28GB VRAM, USD 1499


   * :redbold:`ray trace performance continues rapid improvement` 


.. s5_talk::

    GPU and Ray Tracing performance continues to improve rapidly.

    With Ampere there is a big increase in the numbers of CUDA 
    cores at the same price points.  



:small:`NVIDIA® OptiX™ Ray Tracing Engine -- http://developer.nvidia.com/optix`
--------------------------------------------------------------------------------

.. sidebar:: OptiX Raytracing Pipeline

    .. class:: small

       Analogous to OpenGL rasterization pipeline:

    .. image:: /env/optix/docs/optix-model.png
       :width: 450px
       :align: right

.. class:: small

   **OptiX makes GPU ray tracing accessible**

   * **accelerates** ray-geometry intersections
   * simple : single-ray programming model
   * "...free to use within any application..."
   * :red:`access RT Cores[1] with OptiX 6+ via RTX™ mode`

   **NVIDIA expertise:**

   * OptiX pre-7 : :redbold:`~linear scaling up to 4 GPUs`
   * acceleration structure creation + traversal (Blue)
   * instanced sharing of geometry + acceleration structures
   * compiler optimized for GPU ray tracing

.. class:: tiny

       ``https://developer.nvidia.com/rtx``

.. class:: small

   **User provides (Yellow):**

   * ray generation
   * geometry bounding box, intersects 


.. class:: tiny

   [1] Turing+ GPUs eg NVIDIA TITAN RTX 



.. s5_talk::

   * NVIDIA OptiX provides GPUs accelerated ray-geometry intersection 

   * OptiX divides up the ray tracing workflow as shown
   * the yellow boxes represent the programs the user provide

   * the crucial ones are:

     * ray generation : where Opticks generates photons and steers the simulation
     * intersection : where the geometry is implemented 

   * geometry has to be translated into a GPU appropriate form 





:small:`NVIDIA OptiX 7 : Entirely new thin API (Introduced Aug 2019)`
---------------------------------------------------------------------------------

.. sidebar:: :small:`GPU Ray Tracing APIs Converged`

    .. class:: small

        * 3 APIs (DXR,VKRay,OptiX7) over RTX 
        * Driver updates :r:`independent of application`  
        * Support new GPUs, performance improvements 

.. class:: small

    **NVIDIA OptiX 6->7** : :b:`drastically slimmed down`

    * headers only (no library, just Driver) 
    * low-level CUDA-centric thin API (Vulkan-ized)
    * Minimal host state,  :red:`All host functions are thread-safe`
    * GPU launches : explicit, asynchronous (CUDA streams)
    * :strike:`near perfect scaling to 4 GPUs, for free` 
    * :strike:`Shared CPU/GPU geometry context`
    * :strike:`GPU memory management`
    * :strike:`Multi-GPU support`


.. class:: small

    **Advantages**
        More control/flexibility over everything. 

        * Fully benefit from future GPUs
        * :b:`Keep pace with state-of-the-art GPU ray tracing` 

    **Disadvantages**
        Demands much more developer effort than OptiX 6 

        * :r:`Major re-implementation of Opticks required`


    :b:`NEWS: Major Progress on 6->7 (p11,..)`

.. s5_talk::

   * OptiX 7 dropped lots of features used by Opticks
   * total re-implementation of major parts of Opticks needed
   * but this is  essential to keep up with the state-of-the-art GPU ray tracing
   * Much of the rest of this presentation covers recent progress with the migration



:i:`Geant4OpticksWorkflow`
----------------------------

.. s5_talk::

    This shows how Opticks is integrated with Geant4.

    The geometry is translated and uploaded to the GPU at initialization.

    Most of the work of Opticks has been in this geometry translation.
    Generally optical physics has been straightforward to port to CUDA.
    Geometry however has requires a totally different approach to Geant4
    in order to get the best out of the GPU.


:i:`Geant4OpticksWorkflow 2`
------------------------------

.. sidebar:: :small:`Opticks : GPU Optical Photons`

   .. class:: small

      * CUDA port of G4 generation+propagation
      * :redbold:`auto-translate G4 geometry to OptiX GPU`  
      * offloads optical simulation to GPU 


.. s5_talk::

    What Opticks Does



:small:`Opticks + JUNO Progress : Efficiency Hit Culling on GPU`
-------------------------------------------------------------------------------

.. sidebar:: |egr|, |egr| [|thgr|, |phgr|]  -> GPU Tex

    .. class:: small 

         **Separate Textures for each sensor type**

         ``G4Opticks::``
             ``setSensorData``
             ``setSensorAngularEfficiency``

.. class:: small


    **On GPU Efficiency Culling**

    * upload sensor angular efficiencies 
    * -> ``COLLECT`` OR ``CULL`` hit flags  

    CUDA Thrust **stream compaction**

    * ``thrust::count_if`` 
    * ``thrust::copy_if`` 
    * Download hits with : ``hitmask = COLLECT``

.. class:: small

    * :r:`Reduces hit CPU memory by factor of the efficiency` 
    * reduce size of GPU->CPU downloads by factor of efficiency
    * **all** downloaded hits -> electronics simulation

.. raw:: html

    <pre>

    </pre>


.. class:: small

    **Mock angular efficiency test of GPU texture machinery :** 

    * texturing sensor surfaces with the efficiency 
    * mockup striped theta efficiency, two random categories 
    * cosine phi efficiency variation for one category

.. comment

    .. image:: /env/presentation/nvidia/thrust_logo.png
       :width: 215px
       :height: 91px 

    .. class:: tiny

        https://simoncblyth.bitbucket.io/opticks/optixrap/tests/OSensorLibGeoTest.cc.html

        https://bitbucket.org/simoncblyth/opticks/src/master/notes/progress.rst




.. s5_talk::

    * on-GPU efficiency culling : avoids detector specific assumptions in G4Opticks sensor interface
    * Doing efficiency culling on GPU reduces CPU memory for hits by a factor of the efficiency
    * only the collected hits needed by the electronics simulation have to use CPU memory

    * BUT : it means you have to translate the efficiency information and upload it to the GPU

      * i did this with angular textures for each sensor type and efficiency buffers 

    * the culling decision on GPU leads to one of these flags being set, then 
      you can copy back just the EFFICIENCY_COLLECT photons to go into the hit collection 



.. comment

    https://bitbucket.org/simoncblyth/opticks/src/master/optickscore/tests/MockSensorLibTest.cc

    https://bitbucket.org/simoncblyth/opticks/src/master/optixrap/tests/OSensorLibGeoTest.cc





:small:`New "Foundry" Model : Shared CPU/GPU Geometry Context`
-----------------------------------------------------------------------------------------------------

.. sidebar:: :small:`IAS < Inst < Solid < Prim < Node`

    .. class:: small

        * **Inst** : 4x4 tran. + **Solid** ref. ( **Inst** -> 1 **IAS** )
        * **Solid** : 1 or more **Prim**  : ( **Solid** -> **GAS** )
        * **Prim** : 1,3,7,15,31,... **Node**  : (**Prim** ~ *G4VSolid*) 

    .. raw:: html

        <pre class="mypretiny">
        struct CSGFoundry
        {
           void upload(); <span class="redbold">// to GPU </span> 
        ...
           std::vector&lt;CSGSolid&gt;  solid ; // compounds (eg PMT)
           std::vector&lt;CSGPrim&gt;   prim ;
           std::vector&lt;CSGNode&gt;   node ; // shapes, operators

           std::vector&lt;float4&gt; plan ; // planes
           std::vector&lt;qat4&gt;   tran ; // CSG transforms
           std::vector&lt;qat4&gt;   itra ; // inverse CSG transforms
           std::vector&lt;qat4&gt;   inst ; // instance transforms

           <span class="redbold">// entire geometry in four GPU allocations</span>
           CSGPrim*    d_prim ; 
           CSGNode*    d_node ; 
           float4*     d_plan ; 
           qat4*       d_itra ;    
         };
        </pre>

    .. class:: small

        :bluebold:`referencing by offset, count`  

.. class:: small

    * :r:`replaces geometry context dropped in OptiX 6->7` 
    * array-based -> simple, inherent serialization + persisting 
    * entire geometry in 4 GPU allocations 

    **Simple intersect headers, common CPU/GPU types** 

    * use with : pre-7, 7 + testing on CPU 



.. raw:: html

    <pre>
    </pre>

.. class:: small

    :bluebold:`https://github.com/simoncblyth/CSG` "Foundry" model 
        **csg_intersect_tree.h/csg_intersect_node.h/...**
          :redbold:`simple headers common to pre-7/7/CPU-testing`

    :bluebold:`https://github.com/simoncblyth/CSG_GGeo` 
      Convert *Opticks/GGeo* -> *CSGFoundry*  

    :bluebold:`https://github.com/simoncblyth/CSGOptiX` 
      OptiX 7 + pre-7 rendering 


.. raw:: html

    <pre>

    </pre>

.. class:: tiny

   **GAS** : Geometry Acceleration Structure

   **IAS** : Instance Acceleration Structure
   
   **CSG** : Constructive Solid Geometry 


.. s5_talk::

   CSGFoundry  


:i:`[9]cxr_i0_t8,_-1 : EXCLUDE SLOWEST`
-----------------------------------------

.. raw:: html

    <pre>



    </pre>


.. sidebar:: :small:`1st JUNO Opticks OptiX 7 Ray-trace`

    .. class:: small

        Very New CSG "Foundry" CPU/GPU Geometry 

        * :redbold:`purely analytic CSG, no triangles` 
        * everything at default, no optimization


.. s5_talk::

   CSGFoundry  




:small:`Current JUNO Geometry : Auto-Factorized by "progeny digest"`
------------------------------------------------------------------------


.. sidebar:: :small:`Factorize ~300,000 vol -> 10 comp`

   .. class:: small

        * **ridx**: repeat index
        * **plc**: number of placements of the instance
        * **prim**: number of Prim/volumes in the instance
        * **component**: numPrim:outerPrimName    
 
        :r:`"progeny digest"` characterizes subtree of every volume-node  


.. class:: tiny

    +----+------+-----+-------------------------------------------+---------------------------+
    |ridx|   plc| prim|   component                               |  note                     |
    +====+======+=====+===========================================+===========================+
    |   0|     1| 3084|   3084:sWorld                             |  non-repeated remainder   |
    +----+------+-----+-------------------------------------------+---------------------------+
    |   1| 25600|    5|   5:PMT_3inch_pmt_solid                   |                           |
    +----+------+-----+-------------------------------------------+   4 types of PMT          +
    |   2| 12612|    5|   5:NNVTMCPPMTsMask                       |                           |
    +----+------+-----+-------------------------------------------+                           +
    |   3|  5000|    5|   5:HamamatsuR12860sMask                  |                           |
    +----+------+-----+-------------------------------------------+                           +
    |   4|  2400|    5|   5:mask_PMT_20inch_vetosMask             |                           |
    +----+------+-----+-------------------------------------------+---------------------------+
    |   5|   590|    1|   1:sStrutBallhead                        |                           |
    +----+------+-----+-------------------------------------------+   4 parts of same         +
    |   6|   590|    1|   1:uni1                                  |   assembly, BUT not       |
    +----+------+-----+-------------------------------------------+   grouped as siblings     +
    |   7|   590|    1|   1:base_steel                            |   (not parent-child)      |
    +----+------+-----+-------------------------------------------+                           +
    |   8|   590|    1|   1:uni_acrylic3                          |                           |
    +----+------+-----+-------------------------------------------+---------------------------+
    |   9|   504|  130|   130:sPanel                              |  repeated parts of TT     |
    +----+------+-----+-------------------------------------------+---------------------------+


.. class:: small

   * **ridx:0** "remainder" Prim

     * Prim that did not pass instancing criteria, on number of repeats + complexity
     * TODO: tune criteria to instance more, reducing remainder Prim (Expect: 3084->~ 84)  

   * **ridx:1,2,3,4**

     * four types of PMT, all with 5 Prim 

   * **ridx:5,6,7,8**

     * same 590x assembly :redbold:`but not grouped together` : as siblings (not parent-child like PMTs) 
     * TODO: implement instancing of siblings, combining 4 -> 1   


.. class:: small

   :redbold:`Increasing instancing : reduces memory for geometry -> improved performance`



.. s5_talk::

   Auto factorized




:i:`JUNO OptiX 7 : "Foundry" Geometry Scan`
-----------------------------------------------

.. sidebar:: :small:`Vary Geom. Compare Render Times`

    .. class:: small

        Fast render -> Fast simulation  


.. s5_talk::

    GPU Geometry Scanning : Extreme sensitivity to geometry + model



:small:`JUNO Geometry : OptiX 7 Ray Trace Times ~2M pixels : TITAN RTX`
----------------------------------------------------------------------------------

.. sidebar:: :small:`Same viewpoint, vary GPU geometry`

   .. class:: small


        * **-e** : controls components : "t" means ~ (NOT) 
        * **time(s)** : GPU ray trace CUDA launch time
        * **relative** : compares to "ONLY PMT" baseline

        Very large range of times 1:600
                
   .. class:: small

        :r:`Table identifies slow geometry to fix :`

        * **3084:sWorld** (too many non-instanced Prim)
        * **1:uni_acrylic** (CSG sub. 35m diam. sphere)


        Good performance for :b:`ONLY PMTs` :

        * :b:`45,612 PMT instances handled without issue`  



.. class:: tiny


    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |idx|        -e  |       time(s)    |      relative    |    enabled geometry description                                              |
    +===+============+==================+==================+==============================================================================+
    |  0|        9,  |        0.0017    |        0.1702    |    ONLY: 130:sPanel                                                          |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  1|        7,  |        0.0017    |        0.1714    |    ONLY: 1:base_steel                                                        |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  2|        6,  |        0.0019    |        0.1923    |    ONLY: 1:uni1                                                              |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  3|        5,  |        0.0027    |        0.2780    |    ONLY: 1:sStrutBallhead                                                    |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  4|        4,  |        0.0032    |        0.3268    |    ONLY: 5:mask_PMT_20inch_vetosMask                                         |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  5|        1,  |        0.0032    |        0.3287    |    ONLY: 5:PMT_3inch_pmt_solid                                               |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  6|        2,  |        0.0055    |        0.5669    |    ONLY: 5:NNVTMCPPMTsMask                                                   |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  7|        3,  |        0.0074    |        0.7582    |    ONLY: 5:HamamatsuR12860sMask                                              |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  8|:b:`1,2,3,4`|    :b:`0.0097`   |    :b:`1.0000`   |:b:`ONLY PMT`                                                                 |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  9|      t8,0  |        0.0099    |        1.0179    |    EXCL: 1:uni_acrylic3 3084:sWorld                                          |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 10|  :r:`0,`   |    :r:`0.1171`   |   :r:`12.0293`   |:r:`ONLY: 3084:sWorld`                                                        |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 11|  :r:`t8,`  |    :r:`0.1186`   |   :r:`12.1769`   |:r:`EXCL: 1:uni_acrylic3`                                                     |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 12|  :r:`t0,`  |    :r:`0.5278`   |   :r:`54.2066`   |:r:`EXCL: 3084:sWorld`                                                        |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 13|    :r:`8,` |    :r:`0.5310`   |   :r:`54.5298`   |:r:`ONLY: 1:uni_acrylic3`                                                     |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 14|       t3,  |        0.6017    |       61.7954    |    EXCL: 5:HamamatsuR12860sMask                                              |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 15|       t2,  |        0.6043    |       62.0620    |    EXCL: 5:NNVTMCPPMTsMask                                                   |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 16|       t5,  |        0.6171    |       63.3787    |    EXCL: 1:sStrutBallhead                                                    |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 17|       t6,  |        0.6196    |       63.6301    |    EXCL: 1:uni1                                                              |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 18|       t7,  |        0.6226    |       63.9458    |    EXCL: 1:base_steel                                                        |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 19|        t0  |        0.6240    |       64.0879    |    3084:sWorld                                                               |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 20|       t4,  |        0.6243    |       64.1169    |    EXCL: 5:mask_PMT_20inch_vetosMask                                         |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 21|       t9,  |        0.6335    |       65.0636    |    EXCL: 130:sPanel                                                          |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 22|       t1,  |        0.6391    |       65.6384    |    EXCL: 5:PMT_3inch_pmt_solid                                               |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+


.. s5_talk::

    Geometry Scanning 



:white:`JUNO ALL PMTs : 2M ray traced pixels in 0.0097 s : NVIDIA TITAN RTX, NVIDIA OptiX 7.0.0, Opticks`
------------------------------------------------------------------------------------------------------------

.. s5_talk::

    Almost 50 thousand PMT instances ray trace rendered in a 0.01 seconds    



.. comment

    :white:`[8]cxr_i0_1,2,3,4_-1 : ALL PMTS`
    ------------------------------------------

    .. s5_talk::

       8 : ALL PMTS






:small:`Summary and Links`
----------------------------------------------------------------

.. sidebar:: :small:`Next Steps`

   .. class:: small

      * Foundry JUNO geometry validation 
      * migrate optical physics to NVIDIA OptiX 7  
      * JUNO Production validation

.. image:: /env/presentation/1px.png
   :width: 500px
   :height: 20px

..

  *Opticks* : state-of-the-art GPU ray traced optical simulation integrated with *Geant4*. 
  Geometry progress with OptiX 7 suggests integration within months is achievable.

  .. image:: /env/presentation/1px.png
     :width: 1000px
     :height: 1px

  * Efficiency culling decision moved to GPU, reducing CPU hit memory 
  * "Foundry" geometry model implemented to support NVIDIA OptiX 7 API. 
  * :redbold:`First JUNO OptiX 7 renders achieved.` 

.. table::
    :align: center

    +--------------------------------------------------+-----------------------------------------+
    | https://bitbucket.org/simoncblyth/opticks        | code repository                         |                   
    +--------------------------------------------------+-----------------------------------------+
    | https://github.com/simoncblyth/opticks/releases  | .zip .tar.gz  archives                  |
    +--------------------------------------------------+-----------------------------------------+
    | https://simoncblyth.bitbucket.io                 | presentations and videos                |
    +--------------------------------------------------+-----------------------------------------+
    | https://groups.io/g/opticks                      | forum/mailing list archive              |
    +--------------------------------------------------+-----------------------------------------+
    | email:opticks+subscribe@groups.io                | subscribe to mailing list               |
    +--------------------------------------------------+-----------------------------------------+ 


.. s5_talk::

    While it is great that Opticks is gaining many new users with lots 
    of interest and activity from Geant4 and also now NVIDIA 
    the downside of is that it takes times to support them all.




:small:`Acknowledgement : Opticks "Hackathon" Series for NVIDIA OptiX 6->7`
------------------------------------------------------------------------------

* Suggested and organized by LZ, LBNL, NERSC 
* ~fortnightly meetings since Feb 2021
* :r:`Valuable advice from NVIDIA engineers` 
* see next talk by Oisin Creaner, **LZ with Opticks** 


.. s5_talk::

   Hackathon 


:small:`LZ with Opticks (Images from Sam Eriksen, University of Bristol)`
--------------------------------------------------------------------------


.. s5_talk::

   LZ with Opticks



.. comment


    :white:`[7]cxr_i0_2,_-1 : ONLY NNVT PMTs`
    -------------------------------------------

    .. s5_talk::

       7 


    :white:`[10]cxr_i0_0,_-1 : ONLY GLOBAL "REMAINDER"`
    -----------------------------------------------------------

    .. s5_talk::

       10 : REMAINDER ONLY : 0,


    :white:`[9]cxr_i0_t8,_-1 : EXCLUDE SLOWEST : 2`
    ------------------------------------------------

    .. s5_talk::

       9 : EXCLUDE THE SLOW : t8



.. comment

    cxr_view
    ------------



    cxr_view_0
    ------------

    cxr_solid_r0@
    ---------------



    cxr_view_1
    ------------

    cxr_solid_r1@
    ---------------

    cxr_solid_r1p
    -------------



    cxr_view_2
    ------------

    cxr_solid_r2@
    ---------------

    cxr_solid_r2p
    -------------



    cxr_view_3
    ------------

    cxr_solid_r3@
    ---------------

    cxr_solid_r3p
    -------------



    cxr_view_4
    ------------

    cxr_solid_r4@
    ---------------

    cxr_solid_r4p
    -------------




    cxr_view_5
    ------------

    cxr_solid_r5@
    ---------------





    cxr_view_6
    ------------

    cxr_solid_r6@
    ---------------




    cxr_view_7
    ------------

    cxr_solid_r7@
    ---------------



    cxr_view_8
    ------------

    cxr_solid_r8@
    ---------------



    cxr_view_9
    ------------

    cxr_solid_r9@
    ---------------




