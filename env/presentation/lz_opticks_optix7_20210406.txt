
.. meta::
   :note: Navigate the HTML slides by entering a page number and pressing return 
   :title: LZ NVIDIA NERSC Discussion
   :description: (Apr 2021)
   :url: https://simoncblyth.bitbucket.io/env/presentation/lz_opticks_optix7_20210406.html  
   :date: 4 April 2021

.. include:: my_s5defs.txt


===================================================================================
LZ-Opticks-NVIDIA OptiX 6->7 : Notes
===================================================================================

.. class:: small

   * https://github.com/simoncblyth/OptiXTest/commits

   **Progress**

   * **Foundry** based CSG geometry model 
 
     * only ~4 GPU allocations for all Solids

   * brought in the many more basis shapes

     * including : ellipsoid, plane defined convexpolyhedron

   * migrated CSG to this geometry model : **intersect_tree.h** **intersect_node.h**

     * easily testable on CPU (**tests/ScanTest.sh**)


   **NEXT STEPS:**

   * split off **CSG** package used by OptiXTest(OptiX 7)   

   * get OptiX 6 to work with new CSG geometry model -> less code to maintain (during transition)

   * Interface with Opticks : **GMergedMesh -> Node,Prim,Plan,Tran -> SBT records**

     * performance tests with full geometries, try different approaches: 
     
       * For "global" non-repeated : one big remainder GAS ? Or split up into many GAS ? 
       * Reference all GAS (repeats and singles) from one IAS, or multi-IAS ?


.. class:: small

   |  Simon C Blyth,  April 4, 2021 


.. s5_talk:: 

    Klop






:small:`"Foundry" based CSG geometry model : Solid/Prim/Node`
------------------------------------------------------------------

.. sidebar:: :small:`Foundry : Solids + constituents`

    .. raw:: html

        <pre class="mypretiny">
         23 struct Foundry
         24 {
        ...
         97     void upload();  
        ...
        101     std::vector&lt;Solid&gt;  solid ;
        102     std::vector&lt;Prim&gt;   prim ;
        103     std::vector&lt;Node&gt;   node ;
        104     std::vector&lt;float4&gt; plan ;
        105     std::vector&lt;qat4&gt;   tran ;
        106     std::vector&lt;qat4&gt;   itra ;
        107 
        108     Solid*   d_solid ;
        109     <span class="redbold">Prim*    d_prim ; </span>
        110     <span class="redbold">Node*    d_node ; </span>
        111     <span class="redbold">float4*  d_plan ; </span>
        112     qat4*    d_tran ;
        113     <span class="redbold">qat4*    d_itra ; </span>
        114 };
        </pre>


.. class:: small

    **All solids+constituents created via Foundry (ref by index)**

    * **Solid** : 1 or more **Prim**  : ( **Solid** -> **GAS** )
    * **Prim** : 1 or more **Node**  : (**Prim** ~ *G4VSolid*) 

      * (*nodeOffset*, *numNode*) -> SBT HitGroup record

    * **Node** : CSG constituents 

      * basis shapes : sphere, box3, cone, cylinder, ...
      * boolean operators : union, intersection, difference

    * **qat4** : scale-rotate-translate transform
    * **float4** : planes (normal + distance to origin)

    **Node** Examples:

    * *Ellipsoid* : sphere with scale transform 
    * *ConvexPolyhedron_Tetrahedron* : (*planeIdx*, *numPlanes*)

    *Foundry::upload* 
         :redbold:`all solids in geometry -> only four GPU allocations` 

         * *d_prim*, *d_node*, *d_plan*, *d_itra*


.. class:: tiny 

    https://github.com/simoncblyth/OptiXTest/blob/main/Foundry.h
    https://github.com/simoncblyth/OptiXTest/blob/main/qat4.h


:small:`OptiX 7 Intersect Prim (numNode, nodeOffset) ~ HitGroupData`
-----------------------------------------------------------------------

.. sidebar:: :small:`CSG Node : 4 quads`

    .. raw:: html 

        <pre class="mypretiny">
        union quad  // cross-type convenience
        {
           float4 f ;
           int4   i ;
           uint4  u ; 
        };  

        struct Node
        {
            quad q0 ;
            quad q1 ; 
            quad q2 ; 
            quad q3 ; 

            __device__ 
           unsigned typecode() const { return q2.u.w ; } 
        };


        struct HitGroupData   // effectively Prim 
        {
            int numNode ;   
            int nodeOffset ; 
        };

        </pre>


.. raw:: html

    <pre class="mypretiny">

    150 extern "C" __global__ void __intersection__is()
    151 {
    152     HitGroupData* hg = (HitGroupData*)optixGetSbtDataPointer();
    153     int numNode = hg->numNode ;
    154     int nodeOffset = hg->nodeOffset ;
    155 
    156     <span class="redbold">const Node* node = params.node + nodeOffset ;</span>
    157     const float4* plan = params.plan ;
    158     const qat4*   itra = params.itra ;
    159 
    160     const float  t_min = optixGetRayTmin() ;
    161     const float3 ray_origin = optixGetObjectRayOrigin();
    162     const float3 ray_direction = optixGetObjectRayDirection();
    163 
    164     float4 isect ;
    165     if(intersect_prim(isect, numNode, node, plan, itra, 
                 t_min , ray_origin, ray_direction ))
    166     {
    167         const unsigned hitKind = 0u ;
    168         unsigned a0, a1, a2, a3;
    169 
    170         a0 = float_as_uint( isect.x );
    171         a1 = float_as_uint( isect.y );
    172         a2 = float_as_uint( isect.z );
    173         a3 = float_as_uint( isect.w ) ;
    174 
    175         optixReportIntersection( isect.w, hitKind, a0, a1, a2, a3 );
    176     }
    177 }
    </pre>

.. class:: small 

   * **nodeOffset : points to first Node in tree of numNode** 




:small:`Prim : 1 or more Node : Holds AABB`
------------------------------------------------

.. sidebar:: :small:`Prim + PrimSpec`

    .. raw:: html

        <pre class="mypretiny">
         53 struct Prim
         54 {
         55     quad q0 ;
         56     quad q1 ;
         57     quad q2 ;
         58     quad q3 ;
         ..
         88 #if defined(__CUDACC__) || defined(__CUDABE__)
         89 #else
         91     static PrimSpec MakeSpec( 
                                    const Prim* prim0, 
                                    unsigned primIdx, 
                                    unsigned numPrim );
         92 #endif
         94 };

         08 struct PrimSpec
          9 {
         10     const float*    aabb ; 
         11     const unsigned* sbtIndexOffset ;  
         12     unsigned        num_prim ; 
         13     unsigned        stride_in_bytes ;
         14     bool            device ;
         22 };
        </pre>


.. class:: small

    +----+----------------+----------------+----------------+----------------+
    | q  |      x         |      y         |     z          |      w         |
    +====+================+================+================+================+
    | q0 |  numNode       |  nodeOffset    | tranOffset     | planOffset     |
    |    |                |                |                |                |
    +----+----------------+----------------+----------------+----------------+
    | q1 | sbtIndexOffset |                |                |                |
    |    |                |                |                |                |
    +----+----------------+----------------+----------------+----------------+
    | q2 |  BBMin_x       |  BBMin_y       |  BBMin_z       |  BBMax_x       |
    |    |                |                |                |                |
    +----+----------------+----------------+----------------+----------------+
    | q3 |  BBMax_y       |  BBMax_z       |                |                |
    |    |                |                |                |                |
    +----+----------------+----------------+----------------+----------------+


.. class:: small

    * *Foundry::upload* -> **d_prim** (array of **Prim** on device)
    * *Foundry::getPrimSpecDevice* -> **PrimSpec** -> **GAS**

      * :red:`avoids separate AABB allocations for all GAS`

  
.. raw:: html

    <pre class="mypretiny">
     36 PrimSpec Prim::MakeSpec( const Prim* prim0,  
                                 unsigned primIdx, 
                                 unsigned numPrim ) // static 
     37 {   
     38     const Prim* prim = prim0 + primIdx ;
     40     PrimSpec ps ;  
     41     ps.aabb = prim->AABB() ;
     42     ps.sbtIndexOffset = prim->sbtIndexOffsetPtr() ;
     43     ps.num_prim = numPrim ;
     44     ps.stride_in_bytes = sizeof(Prim);
     45     return ps ; 
     46 }  <span class="redbold">// used on CPU to give device side pointers offset from d_prim </span>

    167 PrimSpec Foundry::getPrimSpecDevice(unsigned solidIdx) const
    168 {
    170     const Solid* so = solid.data() + solidIdx ;
    171     return Prim::MakeSpec( d_prim,  so->primOffset, so->numPrim ) ;;
    174 }

    </pre>





:small:`Node : 4x4x32bit : 6 float params, 6 float AABB, 4 ints : typecode/gtranformIdx/boundary/index`
-------------------------------------------------------------------------------------------------------------

.. class:: small

    **sp:sphere**
    **zs:zsphere**
    **cy:cylinder**
    **ds:disc** 
    **cn:cone**
    **hy:hyperboloid**
    **pl:plane** 
    **sl:slab** 
    **cx:convexpolyhedron** 
    **b3:box3**


.. class:: small 

    +----+----------------+----------------+----------------+----------------+-------------------------------------------------+
    | q  |      x         |      y         |     z          |      w         |  notes                                          |
    +====+================+================+================+================+=================================================+
    |    | sp/zs/cy:cen_x | sp/zs/cy:cen_y | sp/zs/cy:cen_z | sp/zs/cy:radius|                                                 |
    | q0 | cn:r1          | cn:z1          | cn:r2          | cn:z2          |  cn:z2 > z1                                     |
    |    | hy:r0 z=0 waist| hy:zf          | hy:z1          | hy:z2          |  hy:z2 > z1                                     |
    |    | b3:fx          | b3:fy          | b3:fz          |                |  b3: fullside dimensions, center always origin  |
    |    | pl/sl:nx       | pl/sl:ny       | pl/sl:nz       | pl:d           |                                                 |
    |    |                |                | ds:inner_r     | ds:radius      |                                                 |
    |    |                |                |                |                |                                                 |
    |    | cx:planeIdx    | cx:planeNum    |                |                |                                                 |
    +----+----------------+----------------+----------------+----------------+-------------------------------------------------+
    |    | zs:zdelta_0    | zs:zdelta_1    | boundary       | index          |                                                 |
    |    | sl:a           | sl:b           |                |                |  sl:a,b offsets from origin                     |
    | q1 | cy:z1          | cy:z2          |                |                |  cy:z2 > z1                                     |
    |    | ds:z1          | ds:z2          |                |                |                                                 |
    |    |                |                |                |                |                                                 |
    +----+----------------+----------------+----------------+----------------+-------------------------------------------------+
    |    |                |                |                |                |  q2.w was previously typecode                   |
    |    |                |                |                |                |                                                 |
    | q2 |  BBMin_x       |  BBMin_y       |  BBMin_z       |  BBMax_x       |                                                 |
    |    |                |                |                |                |                                                 |
    |    |                |                |                |                |                                                 |
    +----+----------------+----------------+----------------+----------------+-------------------------------------------------+
    |    |                |                |  typecode      | gtransformIdx  |                                                 |
    |    |                |                |                | complement     |                                                 |
    | q3 |  BBMax_y       |  BBMax_z       |                |                |                                                 |
    |    |                |                |                |                |                                                 |
    |    |                |                |                |                |                                                 |
    |    |                |                |                |                |                                                 |
    |    |                |                |                |                |                                                 |
    +----+----------------+----------------+----------------+----------------+-------------------------------------------------+





:small:`intersect_prim -> intersect_node/intersect_tree`
--------------------------------------------------------------

.. raw:: html

    <pre class="mypretiny">

    1089 INTERSECT_FUNC
    1090 bool intersect_prim( float4& isect, int numNode, const Node* node, const float4* plan, const qat4* itra, 
                              const float t_min , const float3& ray_origin, const float3& ray_direction )
    1091 {
    1092     return numNode == 1
    1093                ?
    1094                   intersect_node(isect,          node, plan, itra, t_min, ray_origin, ray_direction )
    1095                :
    1096                   intersect_tree(isect, numNode, node, plan, itra, t_min, ray_origin, ray_direction )
    1097                ;
    1098 }

    </pre>


.. class:: small

    Intersection maths : **intersect_node.h** **intersect_tree.h** -> :redbold:`allows testing on CPU` with **tests/ScanTest.cc**

.. class:: tiny 

    https://github.com/simoncblyth/OptiXTest/blob/main/intersect_node.h

    https://github.com/simoncblyth/OptiXTest/blob/main/intersect_tree.h



:small:`intersect_node : handling scale-rotate-translate transforms and complemented "inside-out" solids` 
-------------------------------------------------------------------------------------------------------------

.. raw:: html

    <pre class="mypretiny">
    1028 bool intersect_node( float4& isect, const Node* node, const float4* plan, const qat4* itra, const float t_min , 
                              const float3& ray_origin , const float3& ray_direction )
    1029 {
    1030     const unsigned typecode = node->typecode() ;
    1031     const unsigned gtransformIdx = node->gtransformIdx() ;
    1032     const bool complement = node->complement();

    1034     <span class="redbold">const qat4* q = gtransformIdx > 0 ? itra + gtransformIdx - 1 : nullptr ;</span>  // gtransformIdx is 1-based, 0 meaning None
    1036     float3 origin    = q ? q->right_multiply(ray_origin,    1.f) : ray_origin ;
    1037     float3 direction = q ? q->right_multiply(ray_direction, 0.f) : ray_direction ;
    ....
    1055     bool valid = false ;
    1056     switch(typecode)
    1057     {
    1058     case CSG_SPHERE:   valid = intersect_node_sphere(  isect, node->q0,           t_min, origin, direction ) ; break ;
    1059     case CSG_ZSPHERE:  valid = intersect_node_zsphere( isect, node->q0, node->q1, t_min, origin, direction ) ; break ;
    1060     case CSG_CONVEXP:  valid = intersect_node_convexp( isect, node, plan,         t_min, origin, direction ) ; break ;
    1061     case CSG_CONE:     valid = intersect_node_cone(    isect, node->q0,           t_min, origin, direction ) ; break ;
    1062     case CSG_HYPERB:   valid = intersect_node_hyperb(  isect, node->q0,           t_min, origin, direction ) ; break ;
    1063     case CSG_BOX3:     valid = intersect_node_box3(    isect, node->q0,           t_min, origin, direction ) ; break ;
    1064     case CSG_PLANE:    valid = intersect_node_plane(   isect, node->q0,           t_min, origin, direction ) ; break ;
    1065     case CSG_SLAB:     valid = intersect_node_slab(    isect, node->q0, node->q1, t_min, origin, direction ) ; break ;
    1066     case CSG_CYLINDER: valid = intersect_node_cylinder(isect, node->q0, node->q1, t_min, origin, direction ) ; break ;
    1067     case CSG_DISC:     valid = intersect_node_disc(    isect, node->q0, node->q1, t_min, origin, direction ) ; break ;
    1068     }
    1069     if(valid && q ) q->left_multiply_inplace( isect, 0.f ) ;
             <span class="redbold">// normals transform with inverse-transform-transposed -> left_multiply </span>
    1076     if(complement){ isect.x = -isect.x ; isect.y = -isect.y ; isect.z = -isect.z ; }
             <span class="redbold">// flip complement normal, even for miss need to signal the complement with a -0.f  </span>
    1082     return valid ;
    1083 }
    </pre>



:small:`intersect_tree : Boolean CSG implementation : tranche slices of postorder sequence...`
-------------------------------------------------------------------------------------------------------------

.. class:: tiny 

    https://github.com/simoncblyth/OptiXTest/blob/main/intersect_tree.h

.. raw:: html

    <pre class="mypretiny">
     10 #include "error.h"
     11 #include "tranche.h"
     12 #include "csg.h"
     13 #include "postorder.h"
     14 #include "pack.h"
     15 #include "csg_classify.h"
     16 
     19 bool intersect_tree( float4& isect, 
                             int numNode, 
                             const Node* node, 
                             const float4* plan0, 
                             const qat4* itra0, 
                             const float t_min , 
                             const float3& ray_origin, 
                             const float3& ray_direction 
                           )
     20 {
     21     unsigned height = TREE_HEIGHT(numNode) ; // 1->0, 3->1, 7->2, 15->3, 31->4 
     22     float propagate_epsilon = 0.0001f ;  // ? 
     23     int ierr = 0 ;
     24 
     25     LUT lut ;
     26     Tranche tr ;
     27     tr.curr = -1 ;
     29     unsigned fullTree = PACK4(0,0, 1 << height, 0 ) ;  // leftmost: 1&lt;&lt;height,  root:1&gt;&gt;1 = 0 ("parent" of root)  
     30 
     35     tranche_push( tr, fullTree, t_min );
     37     CSG_Stack csg ;
     38     csg.curr = -1 ;
     39     int tloop = -1 ;
     40 
     41     while (tr.curr > -1)
     42     {
     ..
    </pre>




:small:`CSG Parade Grid 1`
---------------------------

:small:`CSG Parade Grid 2`
---------------------------


:small:`CSG Working`
----------------------


:small:`CSG Boolean Parade Grid`
----------------------------------



"Extra" Background Slides Follow 
------------------------------------



:small:`Two-Level Hierarchy : Instance transforms (TLAS) over Geometry (BLAS)`
-------------------------------------------------------------------------------

.. class:: small

    **OptiX supports multiple instance levels : IAS->IAS->GAS** BUT: :redbold:`Simple two-level is faster` : :red:`works in hardware RT Cores` 


.. class:: small

    .. figure:: /env/presentation/nvidia/tlas_blas_two_level_hierarchy.png
        :width: 800px
        :align: right 

        https://developer.nvidia.com/blog/introduction-nvidia-rtx-directx-ray-tracing/

.. class:: small

   AS
      Acceleration Structure

   TLAS (**IAS**) 
      4x4 transforms, refs to BLAS
       
   BLAS (**GAS**)
      | triangles : vertices, indices
      | custom primitives : AABB 

   AABB
      axis-aligned bounding box 


   **SBT : Shader Binding Table**

   Flexibly binds together:
 
   1. geometry objects
   2. shader programs 
   3. data for shader programs

   **Hidden in OptiX 1-6 APIs**



.. s5_talk::

   OptiX uses the terms : IAS and GAS for instance and geometry acceleratiom structures.
   The other APIs use terms: TLAS and BLAS for top level and bottom level acceleration structures
   This is because OptiX supports multiple instance levels. 
   But the simple two level is faster as that can be done on the RT cores.

   Simple two-level hierarchy : **just one set of instances with transforms and references to geometry**  



:small:`Optimizing Geometry : Split BLAS to avoid overlapping bbox`
-------------------------------------------------------------------------------

.. figure:: /env/presentation/nvidia/optimize/split_blas_half.png
    :width: 700px
    :align: center

.. class:: normal

   Optimization : :redbold:`deciding where to draw lines between:` 

   1. structure and solid (**IAS** and **GAS**)
   2. solids within **GAS**   (bbox choice to minimize traversal intersection tests)

   Where those lines are drawn :bluebold:`defines the AS`


.. class:: small

    https://developer.nvidia.com/blog/best-practices-using-nvidia-rtx-ray-tracing/


.. s5_talk::

   Optimization is all about deciding Where to draw the lines.

   Currently Opticks clumps together all the remainder non-repeated geometry.
   Possibly splitting that up might improve performance.



:small:`Optimizing Geometry : Merge BLAS when lots of overlaps`
-------------------------------------------------------------------------------

.. figure:: /env/presentation/nvidia/optimize/merge_blas_half.png
    :width: 900px
    :align: center

.. class:: normal

   * lots of overlapping forces lots of intersections to find closest 
   * but too few bbox means the **AS** cannot help to avoid intersect tests
   * balance required : :redbold:`needs experimentation and measurement to optimize` 

.. class:: small

    https://developer.nvidia.com/blog/best-practices-using-nvidia-rtx-ray-tracing/

.. s5_talk::

   Where to draw lines



:small:`Ray Intersection with Transformed Object -> Geometry Instancing`
-----------------------------------------------------------------------------


.. |H2O| replace:: H\ :sub:`2`\ O

.. |IM| replace:: M\ :sup:`-1`

.. |IMT| replace:: M\ :sup:`-1T`

.. |NP| replace:: N\' 



.. figure:: /env/presentation/instancing/ray_intersection_in_two_spaces_p308_shirley_ch13_half.png
    :width: 700px
    :align: right

    .. class:: small

        Fig 13.5 "Realistic Ray Tracing", Peter Shirley

    .. class:: normal

        :redbold:`Advantages apply equally to acceleration structures`

.. class:: small

   **Equivalent Intersects -> same** *t*

   1. **ray** with *ellipsoid* : **M*p**
   2. |IM| **ray** with *sphere* : **p**

   **Local Frame Advantages**

   1. simpler intersect (sphere vs ellipsoid)
   2. closer to origin -> better precision

   **Geometry Instancing Advantages**

   * many objects share local geometry

     * orient+position with 4x4 **M**

   * huge VRAM saving, less to copy 
   
   **Requirements**

   * must **not** normalize ray direction
   * normals transform differently 

     * |NP| = N * |IMT|   
     * (due to non-uniform scaling) 


.. s5_talk::

    The basis for instancing is the equivalence of intersects in two spaces.

    For example a ray-ellipsoid intersect is equivalent to in inverse 
    transformed ray intersect with a sphere.

    Local frame intersects advantages...




:small:`G4Boolean -> CUDA/OptiX Intersection Program Implementing CSG`
-------------------------------------------------------------------------------------

.. sidebar:: Outside/Inside Unions

    .. class:: small

       dot(normal,rayDir) -> Enter/Exit

    .. image:: /env/presentation/kensler_union_of_two_spheres_from_outside.png
       :width: 300px
       :align: center

    .. image:: /env/presentation/kensler_union_of_two_spheres_from_inside.png
       :width: 300px
       :align: center

    .. class:: small

        * **A + B** boundary not inside other 
        * **A * B** boundary inside other 


.. class:: small

   Complete Binary Tree, pick between pairs of nearest intersects:

   =======================  ===========  ===============  ============== 
   *UNION* tA < tB           Enter B      Exit B           Miss B
   =======================  ===========  ===============  ============== 
   **Enter A**               ReturnA      :blue:`LoopA`    ReturnA
   **Exit A**                ReturnA      ReturnB          ReturnA 
   **Miss A**                ReturnB      ReturnB          ReturnMiss
   =======================  ===========  ===============  ============== 

   * *Nearest hit intersect algorithm* [1] avoids state

     * sometimes :blue:`Loop` : advance **t_min** , re-intersect both 
     * classification shows if inside/outside

   * *Evaluative* [2] implementation emulates recursion: 

     * :red:`recursion not allowed` in OptiX intersect programs
     * bit twiddle traversal of complete binary tree 
     * stacks of postorder slices and intersects 

   * :red:`Identical geometry to Geant4` 

     * solving the same polynomials 
     * near perfect intersection match



.. class:: tiny

    [1] Ray Tracing CSG Objects Using Single Hit Intersections, Andrew Kensler (2006)
        with corrections by author of XRT Raytracer http://xrt.wikidot.com/doc:csg
 
    [2] https://bitbucket.org/simoncblyth/opticks/src/tip/optixrap/cu/csg_intersect_boolean.h
        Similar to binary expression tree evaluation using postorder traverse. 


.. s5_talk::

    The primitives can be combined using constructive solid geometry 
    modelling into arbitrarily complex shapes. 

    So G4Boolean trees can be translated into Opticks without 
    any approximation.

    Pseudo code of the CSG implementation is in the Extras.
 


:small:`Constructive Solid Geometry (CSG) : Shapes defined "by construction"`
-------------------------------------------------------------------------------

.. sidebar:: CSG Binary Tree

    .. image:: /env/presentation/hanrahan_example_of_solid_object_formed_using_csg.png
       :width: 450px
       :align: right

    .. class:: small

       Primitives combined via binary operators 


.. class:: small

   Simple *by construction* definition, implicit geometry.

   * **A, B** implicit primitive **solids** 
   * **A + B** : union (OR)
   * **A * B** : intersection (AND) 
   * **A - B** : difference (AND NOT) 
   * **!B** : complement (NOT) (inside <-> outside)

   CSG expressions 

   * non-unique: **A - B == A * !B**
   * represented by binary tree, primitives at leaves

   3D Parametric Ray : **ray(t) = r0 + t rDir**  


   **Ray Geometry Intersection**

   * primitive : find *t* roots of implicit eqn
   * composite : :red:`pick` primitive intersect, depending on CSG tree


.. class:: large

   :red:`How to pick exactly ?`



.. s5_talk::

    Opticks CSG supports complemented shapes. That is necessary for tree positivization where  





:small:`CSG : Which primitive intersect to pick ?`
-------------------------------------------------------
    

.. sidebar:: In/On/Out transitions

    .. class:: small

    .. image:: /env/presentation/hanrahan_example_of_solid_object_formed_using_csg_roth_diagram.png
       :width: 450px
       :align: right


.. class:: small

   Classical Roth diagram approach

   * find all ray/primitive intersects
   * recursively combine inside intervals using CSG operator
   * works from leaves upwards

   Computational requirements:

   * find all intersects, store them, order them
   * recursive traverse

   BUT : **High performance on GPU requires**:

   * massive parallelism -> more the merrier
   * low register usage -> keep it simple
   * small stack size -> **avoid recursion** 

.. class:: large

   :red:`Classical approach not appropriate on GPU`


.. s5_talk::

   Intersect is with one of the constituents, but how to find it.


:small:`CSG Complete Binary Tree Serialization -> simplifies GPU side`
---------------------------------------------------------------------------------

.. sidebar:: Bit Twiddling Navigation

    .. class:: small

        * parent(i) = i/2 = i >> 1 

        * leftchild(i) = 2*i = i << 1

        * rightchild(i) = 2*i + 1 = (i << 1) + 1

        * leftmost(height)  =  1 << height


.. class:: small

    Geant4 solid -> CSG binary tree (leaf primitives, non-leaf operators, 4x4 transforms on any node)

    Serialize to **complete binary tree** buffer:
 
    * no need to deserialize, no child/parent pointers
    * bit twiddling navigation :red:`avoids recursion`
    * simple approach profits from small size of binary trees 
    * BUT: very inefficient when unbalanced 

    **Height 3 complete binary tree with level order indices:**
.. raw:: html

    <pre class="mypre">
                                                       depth     elevation

                         1                               0           3   

              10                   11                    1           2   

         100       101        110        111             2           1   
                        
     1000 1001  1010 1011  1100 1101  1110  1111         3           0   
    </pre>
    <hr/>

.. class:: small

    **postorder_next(i,elevation) = i & 1 ? i >> 1 : (i << elevation) + (1 << elevation) ;**   // from pattern of bits
 
.. class:: tiny

   Postorder tree traverse visits all nodes, starting from leftmost, such that children 
   are visited prior to their parents.


.. s5_talk::

    CSG implementation is greatly simplified by 
    use of complete binary tree serialization.  

    Boolean solids with large numbers of constituents cause a 
    problem, because complete binary tree serialization is
    very inefficient for unbalanced trees.

    Tree balancing helps, but still there is a complexity limit.
    G4Boolean abuse solids with hundreds of constituents would be 
    better implemented with custom primitives.





:small:`Evaluative CSG intersection Pseudocode : recursion emulated`
-------------------------------------------------------------------------------------------------

.. raw:: html 

    <pre class="mypretiny">
    fullTree = PACK( 1 << height, 1 >> 1 )  // leftmost, parent_of_root(=0) 
    tranche.push(fullTree, ray.tmin) 

    while (!tranche.empty)        <b><span class="alarm"> // stack of begin/end indices </span></b>
    {
        begin, end, tmin <- tranche.pop  ; node <- begin ;
        while( node != end )                  <b><span class="alarm"> // over tranche of postorder traversal </span></b>
        {
            elevation = height - TREE_DEPTH(node) ;
            if(is_primitive(node)){ isect <- intersect_primitive(node, tmin) ;  csg.push(isect) }
            else{
                i_left, i_right = csg.pop, csg.pop          <b><span class="alarm">  // csg stack of intersect normals, t </span></b>
                l_state = CLASSIFY(i_left, ray.direction, tmin)
                r_state = CLASSIFY(i_right, ray.direction, tmin)
                action = LUT(operator(node), leftIsCloser)(l_state, r_state) 

                if(      action is ReturnLeft/Right)     csg.push(i_left or i_right)
                else if( action is LoopLeft/Right)
                {
                    left = 2*node ; right = 2*node + 1 ; 
                    endTranche = PACK( node,  end );
                    leftTranche = PACK(  left << (elevation-1), right << (elevation-1) )
                    rightTranche = PACK(  right << (elevation-1),  node  )
                    loopTranche = action ? leftTranche : rightTranche
                                                     
                    tranche.push(endTranche, tmin)     
                    tranche.push(loopTranche, tminAdvanced ) <b><span class="alarm"> // subtree re-traversal with changed tmin </span></b> 
                    break ; // to next tranche
                }
            }
            node <- postorder_next(node, elevation)        <b><span class="alarm"> // bit twiddling postorder </span></b>
        }
    } 
    isect = csg.pop();       <b><span class="alarm">  // winning intersect  </span></b>
    </pre>

.. class:: tiny

    https://bitbucket.org/simoncblyth/opticks/src/tip/optixrap/cu/csg_intersect_boolean.h


.. s5_talk::

   Emulated recursion : iterate over slices of a postorder tree traversal    




:small:`CSG Deep Tree : Positivize tree using De Morgan's laws`
------------------------------------------------------------------------------------

.. sidebar:: Positive form CSG Trees

   .. class:: small

       Apply deMorgan pushing negations down tree 

       * **A - B -> A * !B**
       * **!(A*B) -> !A + !B**
       * **!(A+B) -> !A * !B**
       * **!(A - B) -> !(A*!B) -> !A + B**

       End with only UNION, INTERSECT operators, 
       and some complemented leaves.

       :red:`COMMUTATIVE -> easily rearranged`


.. class:: small

    1st step to allow balancing : **Positivize** : remove CSG difference **di** operators 


.. raw:: html

   <pre class="mypretiny">
                                                        ...    ...

                                                  un          cy                                        

                                          un          cy                                                

                                  un          cy                                                        

                          un          cy                                                                

                  un          cy                                                                        

          di          cy                                                                                

      cy      cy                                                 

   </pre>

   <pre class="mypretiny">
                                                        ...    ...

                                                  un          cy                                        

                                          un          cy                                                

                                  un          cy                                                        

                          un          cy                                                                

                  un          cy                                                                        

          in          cy                                                                                

      cy      !cy                                                 

   </pre>



.. s5_talk::

   Positivized tree easier to work with 




:i:`CSG Examples`
--------------------------


.. s5_talk::

    Some examples of CSG.

    You might be able to see a problem in the top left. CSG modelling 
    must avoid coincident surfaces in subtractions, otherwise you get spurious intersects.




