.. meta::
   :title: Opticks CHEP 2023
   :description: (2023 May) JUNO, OptiX, Opticks
   :note: 15 min including questions 

.. include:: my_s5defs.txt


.. comment

   Navigate the HTML slides by entering a page number and pressing return 


:i:`Opticks : GPU Optical Photon Simulation using NVIDIA OptiX 7 and NVIDIA CUDA` 
========================================================================================


.. raw:: html

    <div class="mytitle">
    <header>
    <h1 style="background-color:lightgrey;text-align:center;"> 
          <i>Opticks</i> : GPU Optical Photon Simulation</br> via NVIDIA® OptiX™ 7, NVIDIA® CUDA™

        <h2 style="background-color:lightgrey;text-align:center"> Open source, https://bitbucket.org/simoncblyth/opticks </h2>
    </h1>
    </header>
    </div>

    <img style="position:absolute; top:200px; LEFT:100px; WIDTH:200px; " src="/env/presentation/juno/JUNO_logo.png"  />
    <div class="mycredit">
    <h2 style="background-color:lightgrey"> Simon C Blyth, IHEP, CAS &mdash; (Presented by Dr Tao Lin, IHEP, CAS) &mdash; CHEP, ?? May 2023</h2>
    </div>


.. s5_talk:: 

    Opticks applies state-of-the-art GPU ray tracing from NVIDIA OptiX to optical photon simulation 
    and integrates this with Geant4. This can give drastic speedups of more a factor 1000.

    This render shows the photons resulting from a muon crossing the JUNO scintillator, 
    each line represents a single photon.



Outline
----------------------------------------------------

.. image:: /env/presentation/newtons-opticks.png 
   :width: 299px
   :height: 547px 
   :align: right


.. class:: small


    .. raw:: html

       <span>&nbsp;</span>

    * Context and Problem

      * p2: Jiangmen Underground Neutrino Observatory (JUNO)
      * p3: JUNO Optical Photon Simulation Problem...
      * p4: Optical Photon Simulation ≈ Ray Traced Image Rendering

    * NVIDIA Tools to create Solution   

      * p5: NVIDIA Ampere : 2nd Generation RTX
      * p6: NVIDIA OptiX Ray Tracing Engine
      * p7: NVIDIA OptiX 7 : Entirely new thin API

    * Opticks : Introduction + New Features

      * p8,9: Geant4 + Opticks Hybrid Workflow : External Optical Photon Simulation
      * p10: New : Collection Efficiency Culling on GPU  
      * p11: New : *CSGFoundry* Geometry Model

    * Opticks : 1st JUNO Renders with NVIDIA OptiX 7 

      * p12:Ray trace renders
      * p13:Geometry factorization  
      * p15:Ray trace times for various geometries   

    * p17: Summary + Links 
    * p18: Acknowledgement : Opticks "Hackathon" Series for NVIDIA OptiX 6->7
    * p19: LZ with Opticks

    .. raw:: html
 
       <hr/>


.. s5_talk::

    The focus of this talk is recent progress on migrating Opticks
    to work with the all new NVIDIA OptiX 7 API.
    

:i:`JUNO_Intro_2`
------------------

.. s5_talk::

    JUNO will be the worlds largest liquid scintillator detector,
    with a 20 kiloton spherical volume of scintillator instrumented with  
    almost 50 thousand PMTs. The diameter of the sphere is 35 meters. 


`Optical Photon Simulation Problem...`
---------------------------------------------------------

.. raw:: html

     <pre>







     </pre>

.. sidebar:: :small:`Huge CPU Memory+Time Expense`

    .. class:: small

         **JUNO Muon Simulation Bottleneck**
           ~99% CPU time, memory constraints

         **Ray-Geometry intersection Dominates**
           simulation is not alone in this problem...

         **Optical photons : naturally parallel, simple :**
           * produced by Cherenkov+Scintillation 
           * yield only Photomultiplier hits


.. s5_talk::

   A muon travelling across the scintillator yields tens of millions 
   of optical photons, presenting memory and time challenges for simulation.

   Most of the time is taken finding intersections between photons and geometry 
   Simulation is not alone in this bottleneck.


.. comment

   Optical photons are naturally parallel : they can be considered 
   to be produced only by two processes : Cherenkov and Scintillation and we
   are interested in photons that hit the PMTs.  

   These characteristics make it straightforward integrate an external optical
   simulation.
 



:small:`Optical Photon Simulation ≈ Ray Traced Image Rendering`
-------------------------------------------------------------------------------

.. sidebar:: Not a Photo, a Calculation

    .. image:: /env/optix/samples/optix-ray-tracing-glasses.png 
       :width: 450px
       :align: right

    .. class:: tiny

        http://on-demand.gputechconf.com/siggraph/2013/presentation/SG3106-Building-Ray-Tracing-Applications-OptiX.pdf


.. class:: small


    :bluebold:`simulation` 
       photon parameters at sensors (PMTs) 

    :bluebold:`rendering` 
       pixel values at image plane


.. raw:: html

    <pre>

    </pre>


.. class:: small

    **Much in common : geometry, light sources, optical physics**

    * :redbold:`both limited by ray geometry intersection, aka ray tracing`


.. raw:: html

    <pre>

    </pre>

.. class:: small

    **Many Applications of ray tracing** :

    * advertising, design, architecture, films, games,...
    * -> huge efforts to improve hw+sw over 30 yrs


.. s5_talk::

    Ray traced image rendering in computer graphics has exactly the same bottleneck.
    Actually, there is a lot in common between optical photon simulation and ray traced image rendering.   
    Simulation gives photon parameters at PMTs, rendering gives pixel values at the image plane.

    Both these are limited by ray geometry intersection, which is also known as ray tracing.

    Ray tracing is widely used resulting in huge efforts to improve ray tracing perfromance.
    


:small:`NVIDIA Ada : 3rd Generation RTX`
--------------------------------------------------------------------------

.. class:: small

   * **RT Core** : ray trace dedicated GPU hardware

   * **NVIDIA GeForce RTX 4090 (2022)** 

     * 16,384 CUDA Cores, 24GB VRAM, USD 1599

   * Ada (2022) : :redbold:`continued ray tracing improvements` 

     * 2x ray trace over Ampere (2020), 4x with DLSS 3
     * :b:`games becoming fully simulated worlds`  
    
   * DLSS : Deep Learning Super Sampling 

     * AI upsampling, not applicable to optical simulation

.. class:: tiny

   * TOPS : Tera operations per second



.. s5_talk::

    GPU Ray Tracing performance continue to improve rapidly.
    With Ampere there is a big increase in the numbers of CUDA 
    cores at the same price points.   


.. comment

    :i:`ada_lovelace_leap_in_ray_tracing_performance_19206531.jpg`
    ----------------------------------------------------------------

    :i:`ada_lovelace_123_RTX_generations_18976718.jpg`
    -------------------------------------------------------------

    :small:`NVIDIA OptiX 7 Programs`
    ----------------------------------

    .. class:: small

       https://developer.nvidia.com/rtx/ray-tracing/optix




:small:`NVIDIA® OptiX™ Ray Tracing Engine -- Accessible GPU Ray Tracing`
--------------------------------------------------------------------------

.. sidebar:: :small:`Flexible Ray Tracing Pipeline` 

    .. class:: small

        :g:`Green: User Programs`,  :e:`Grey: Fixed function/HW`

    .. image:: /env/presentation/nvidia/optix7/OptiX-API.png
       :width: 450px
       :align: right

    .. class:: small

        :b:`Analogous to OpenGL rasterization pipeline` 


.. class:: small

   **OptiX makes GPU ray tracing accessible**

   * :r:`Programmable GPU-accelerated Ray-Tracing Pipeline`
   * Single-ray shader programming model using CUDA
   * ray Tracing acceleration using RT Cores (RTX GPUs)
   * "...free to use within any application..."

   **OptiX features**

   * acceleration structure creation + traversal
   * instanced sharing of geometry + acceleration structures
   * compiler optimized for GPU ray tracing

.. class:: tiny

   ``https://developer.nvidia.com/rtx/ray-tracing/optix``

.. class:: small

   **User provides (Green):**

   * ray generation
   * geometry bounding boxes
   * intersect functions 
   * instance transforms

   

.. s5_talk::

   NVIDIA OptiX makes GPU ray tracing accessible 

   * it divides up the ray tracing workflow 
   * the yellow boxes represent user provided CUDA programs, including:

     * ray generation : where Opticks generates photons and steers the simulation
     * intersection : where the geometry is implemented 

   * geometry has to be translated into a GPU appropriate form



:small:`NVIDIA OptiX 7 : Entirely new thin API => Full Opticks Re-implementation`
-----------------------------------------------------------------------------------

.. sidebar:: :small:`GPU Ray Tracing APIs Converged`

    .. class:: small

        * 3 APIs (DXR,VKRay,OptiX7) over RTX 
        * Driver updates :r:`independent of application`  
        * Support new GPUs, performance improvements 

.. class:: small

    **NVIDIA OptiX 6->7** : :b:`drastically slimmed down`

    * low-level CUDA-centric thin API (Vulkan-ized)
    * headers only (no library, impl in Driver) 
    * Minimal host state,  :red:`All host functions are thread-safe`
    * GPU launches : explicit, asynchronous (CUDA streams)
    * :strike:`near perfect scaling to 4 GPUs, for free` 
    * :strike:`Shared CPU/GPU geometry context`
    * :strike:`GPU memory management`
    * :strike:`Multi-GPU support`


.. class:: small

    **Advantages of 6->7 transition**

    * More control/flexibility over everything 
    * :b:`Keep pace with state-of-the-art GPU ray tracing` 
    * Fully benefit from current + future GPUs : RT cores, RTX 

.. class:: small

    **BUT:** :r:`demanded full re-implementation of Opticks` 
     


.. s5_talk::

   * OptiX 7 is an entirely new API, dropping many features used by Opticks
   * re-implementation of large parts of Opticks is necessary
   * i will cover recent progress on this shortly



Geant4 + Opticks + NVIDIA OptiX 7 : Hybrid Workflow
-------------------------------------------------------------

.. comment

    .. table::
        :align: center

        +--------------------------------------------------+
        | :b:`https://bitbucket.org/simoncblyth/opticks`   |
        +--------------------------------------------------+

.. class:: small

    .. table::
        :align: center

        +--------------------------------------------------+
        | :b:`https://bitbucket.org/simoncblyth/opticks`   |
        +--------------------------------------------------+


.. raw:: html

    <p style="margin-bottom:13cm;" />

.. class:: small

    Opticks API : split according to dependency -- Optical photons are GPU resident, only hits need to be copied to CPU memory 



:i:`Geant4OpticksWorkflow`
----------------------------

.. s5_talk::

    This shows how Opticks is integrated with Geant4. The geometry is translated 
    and uploaded to the GPU at initialization.

    Cerenkov or Scintillation gensteps, the blue lines, are the generation parameters 
    uploaded to the GPU so optical photon generation can be done there.

    This allows the optical photon simulation to be entirely offloaded  
    to the GPU with only collected hits requiring CPU memory.
 

:i:`Geant4OpticksWorkflow 2`
------------------------------

.. sidebar:: :small:`Opticks : GPU Optical Photons`

   .. class:: small

      * CUDA port of G4 generation+propagation
      * :redbold:`auto-translate G4 geometry to OptiX GPU`  
      * offloads optical simulation to GPU 


.. s5_talk::

    In general, I found that directly porting the optical physics has been straightforward.
    Most of problems and effort of Opticks been with the geometry, because the 
    geometry model needs to be very different from the deep tree of volumes of Geant4.



:small:`Opticks + JUNO Progress : Efficiency Hit Culling on GPU`
-------------------------------------------------------------------------------

.. sidebar:: |egr|, |egr| [|thgr|, |phgr|]  -> GPU Tex

    .. class:: small 

         **Separate Textures for each sensor type**

         ``G4Opticks::``
             ``setSensorData``
             ``setSensorAngularEfficiency``

.. class:: small


    **On GPU Efficiency Culling**

    * upload sensor angular efficiencies 
    * -> ``COLLECT`` OR ``CULL`` hit flags  

    CUDA Thrust **stream compaction**

    * ``thrust::count_if`` 
    * ``thrust::copy_if`` 
    * Download hits with : ``hitmask = COLLECT``

.. class:: small

    * :r:`Reduces hit CPU memory by factor of the efficiency` 
    * reduce size of GPU->CPU downloads by factor of efficiency
    * **all** downloaded hits -> electronics simulation

.. raw:: html

    <pre>

    </pre>


.. class:: small

    **Mock angular efficiency test of GPU texture machinery :** 

    * texturing sensor surfaces with the efficiency 
    * mockup striped theta efficiency, two random categories 
    * cosine phi efficiency variation for one category


.. s5_talk::

    Moving efficiency culling to the GPU reduces CPU hit memory and downloads 
    by a factor of the efficiency : so only collected hits consume CPU memory.

    Angular efficiencies of the sensors are uploaded into GPU textures
    for each sensor type.

    Downloading collected hits just requires to use a different COLLECTED hitmask.
    

.. comment

    https://bitbucket.org/simoncblyth/opticks/src/master/optickscore/tests/MockSensorLibTest.cc

    https://bitbucket.org/simoncblyth/opticks/src/master/optixrap/tests/OSensorLibGeoTest.cc



:small:`New "Foundry" Model : Shared CPU/GPU Geometry Context`
-----------------------------------------------------------------------------------------------------

.. sidebar:: :small:`IAS < Inst < Solid < Prim < Node`

    .. class:: small

        * **Inst** : 4x4 tran. + **Solid** ref. ( **Inst** -> 1 **IAS** )
        * **Solid** : 1 or more **Prim**  : ( **Solid** -> **GAS** )
        * **Prim** : 1,3,7,15,31,... **Node**  : (**Prim** ~ *G4VSolid*) 

    .. raw:: html

        <pre class="mypretiny">
        struct CSGFoundry
        {
           void upload(); <span class="redbold">// to GPU </span> 
        ...
           std::vector&lt;CSGSolid&gt;  solid ; // compounds (eg PMT)
           std::vector&lt;CSGPrim&gt;   prim ;
           std::vector&lt;CSGNode&gt;   node ; // shapes, operators

           std::vector&lt;float4&gt; plan ; // planes
           std::vector&lt;qat4&gt;   tran ; // CSG transforms
           std::vector&lt;qat4&gt;   itra ; // inverse CSG transforms
           std::vector&lt;qat4&gt;   inst ; // instance transforms

           <span class="redbold">// entire geometry in four GPU allocations</span>
           CSGPrim*    d_prim ; 
           CSGNode*    d_node ; 
           float4*     d_plan ; 
           qat4*       d_itra ;    
         };
        </pre>

    .. class:: small

        :bluebold:`referencing by offset, count`  

.. class:: small

    * :r:`replaces geometry context dropped in OptiX 6->7` 
    * array-based -> simple, inherent serialization + persisting 
    * entire geometry in 4 GPU allocations 

    **Simple intersect headers, common CPU/GPU types** 

    * use with : pre-7, 7 + testing on CPU 



.. raw:: html

    <pre>
    </pre>

.. class:: small

    :bluebold:`https://github.com/simoncblyth/CSG` "Foundry" model 
        **csg_intersect_tree.h/csg_intersect_node.h/...**
          :redbold:`simple headers common to pre-7/7/CPU-testing`

    :bluebold:`https://github.com/simoncblyth/CSG_GGeo` 
      Convert *Opticks/GGeo* -> *CSGFoundry*  

    :bluebold:`https://github.com/simoncblyth/CSGOptiX` 
      OptiX 7 + pre-7 rendering 


.. raw:: html

    <pre>

    </pre>

.. class:: tiny

   **GAS** : Geometry Acceleration Structure

   **IAS** : Instance Acceleration Structure
   
   **CSG** : Constructive Solid Geometry 


.. s5_talk::

   SMALL 
   The Foundry geometry model comprises : Inst, Solid, Prim and Node

   Starting from the bottom:

   * the Node are CSG constituent shapes or operators
   * the Prim reference a range of Node forming serialized complete binary trees
   * the Solid reference one or more Prim
   * the Inst reference one or more Solid 

   **Prim:** are equivalent to G4VSolid

   **Solid:** are compound Prim, each type of PMT corresponds to a Solid 

   **Inst:** are 4x4 transforms with index refererences to Solid 

   The model is designed to work with the OptiX 7 acceleration structures:

   * Solid -> GAS (Geometry Acceleration Structure)
   * Inst  -> IAS (Instance Acceleration Structure)

   The JUNO geometry of 300,000 volumes is factorized into 10 Solid which 
   are referenced from a single instance acceleration structure. 
    
   The array-based simplicity makes it fast to upload to GPU, 
   with the entire geometry in 4 GPU allocations. 




:i:`[9]cxr_i0_t8,_-1 : EXCLUDE SLOWEST`
-----------------------------------------

.. raw:: html

    <pre>



    </pre>


.. sidebar:: :small:`1st JUNO Opticks OptiX 7 Ray-trace`

    .. class:: small

        Very New CSG "Foundry" CPU/GPU Geometry 

        * :redbold:`purely analytic CSG, no triangles` 
        * everything at default, no optimization


.. s5_talk::

   Here is one of the first JUNO renders with the OptiX 7 using the Foundry model.

   Note that there are no triangles here, this is a purely analytic ray trace with 
   the geometry that the simulation will use.



:small:`Current JUNO Geometry : Auto-Factorized by "progeny digest"`
------------------------------------------------------------------------


.. sidebar:: :small:`Factorize ~300,000 vol -> 10 comp`

   .. class:: small

        * **ridx**: repeat index
        * **plc**: number of placements of the instance
        * **prim**: number of Prim/volumes in the instance
        * **component**: numPrim:outerPrimName    
 
        :r:`"progeny digest"` characterizes subtree of every volume-node  


.. class:: tiny

    +----+------+-----+-------------------------------------------+---------------------------+
    |ridx|   plc| prim|   component                               |  note                     |
    +====+======+=====+===========================================+===========================+
    |   0|     1| 3084|   3084:sWorld                             |  non-repeated remainder   |
    +----+------+-----+-------------------------------------------+---------------------------+
    |   1| 25600|    5|   5:PMT_3inch_pmt_solid                   |                           |
    +----+------+-----+-------------------------------------------+   4 types of PMT          +
    |   2| 12612|    5|   5:NNVTMCPPMTsMask                       |                           |
    +----+------+-----+-------------------------------------------+                           +
    |   3|  5000|    5|   5:HamamatsuR12860sMask                  |                           |
    +----+------+-----+-------------------------------------------+                           +
    |   4|  2400|    5|   5:mask_PMT_20inch_vetosMask             |                           |
    +----+------+-----+-------------------------------------------+---------------------------+
    |   5|   590|    1|   1:sStrutBallhead                        |                           |
    +----+------+-----+-------------------------------------------+   4 parts of same         +
    |   6|   590|    1|   1:uni1                                  |   assembly, BUT not       |
    +----+------+-----+-------------------------------------------+   grouped as siblings     +
    |   7|   590|    1|   1:base_steel                            |   (not parent-child)      |
    +----+------+-----+-------------------------------------------+                           +
    |   8|   590|    1|   1:uni_acrylic3                          |                           |
    +----+------+-----+-------------------------------------------+---------------------------+
    |   9|   504|  130|   130:sPanel                              |  repeated parts of TT     |
    +----+------+-----+-------------------------------------------+---------------------------+


.. class:: small

   * **ridx:0** "remainder" Prim

     * Prim that did not pass instancing criteria, on number of repeats + complexity
     * TODO: tune criteria to instance more, reducing remainder Prim (Expect: 3084->~ 84)  

   * **ridx:1,2,3,4**

     * four types of PMT, all with 5 Prim 

   * **ridx:5,6,7,8**

     * same 590x assembly :redbold:`but not grouped together` : as siblings (not parent-child like PMTs) 
     * TODO: implement instancing of siblings, combining 4 -> 1   


.. class:: small

   :redbold:`Increasing instancing : reduces memory for geometry -> improved performance`



.. s5_talk::

   To follow what follows you need to know a bit about the factorization.
   
   300,000 Geant4 volumes are factorized into 10 Foundry Solids, with a lot of Inst 
   referencing them according to the number of placements of each solid.
   
   Repeat index zero corresponds to the remainder volumes with only a single placement.
   These are volumes that were not repeated enough to get instanced.     

   More instancing reduces memory for the geometry and improves performance, so 
   some work to avoid having thousands of remainder volumes is needed.



 




:i:`JUNO OptiX 7 : "Foundry" Geometry Scan`
-----------------------------------------------

.. sidebar:: :small:`Vary Geom. Compare Render Times`

    .. class:: small

        Fast render -> Fast simulation  


.. s5_talk::

    Varying the geometry and comparing render times is a simple way to 
    find problem solids.

    Because simulation is ray trace limited there is a direct correspondence
    between fast rendering and fast simulation. 



:small:`JUNO Geometry : OptiX 7 Ray Trace Times ~2M pixels : TITAN RTX`
----------------------------------------------------------------------------------

.. sidebar:: :small:`Same viewpoint, vary GPU geometry`

   .. class:: small


        * **-e** : controls components : "t" means ~ (NOT) 
        * **time(s)** : GPU ray trace CUDA launch time
        * **relative** : compares to "ONLY PMT" baseline

        Very large range of times 1:600
                
   .. class:: small

        :r:`Table identifies slow geometry to fix :`

        * **3084:sWorld** (too many non-instanced Prim)
        * **1:uni_acrylic** (CSG sub. 35m diam. sphere)


        Good performance for :b:`ONLY PMTs` :

        * :b:`45,612 PMT instances handled without issue`  



.. class:: tiny


    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |idx|        -e  |       time(s)    |      relative    |    enabled geometry description                                              |
    +===+============+==================+==================+==============================================================================+
    |  0|        9,  |        0.0017    |        0.1702    |    ONLY: 130:sPanel                                                          |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  1|        7,  |        0.0017    |        0.1714    |    ONLY: 1:base_steel                                                        |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  2|        6,  |        0.0019    |        0.1923    |    ONLY: 1:uni1                                                              |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  3|        5,  |        0.0027    |        0.2780    |    ONLY: 1:sStrutBallhead                                                    |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  4|        4,  |        0.0032    |        0.3268    |    ONLY: 5:mask_PMT_20inch_vetosMask                                         |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  5|        1,  |        0.0032    |        0.3287    |    ONLY: 5:PMT_3inch_pmt_solid                                               |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  6|        2,  |        0.0055    |        0.5669    |    ONLY: 5:NNVTMCPPMTsMask                                                   |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  7|        3,  |        0.0074    |        0.7582    |    ONLY: 5:HamamatsuR12860sMask                                              |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  8|:b:`1,2,3,4`|    :b:`0.0097`   |    :b:`1.0000`   |:b:`ONLY PMT`                                                                 |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    |  9|      t8,0  |        0.0099    |        1.0179    |    EXCL: 1:uni_acrylic3 3084:sWorld                                          |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 10|  :r:`0,`   |    :r:`0.1171`   |   :r:`12.0293`   |:r:`ONLY: 3084:sWorld`                                                        |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 11|  :r:`t8,`  |    :r:`0.1186`   |   :r:`12.1769`   |:r:`EXCL: 1:uni_acrylic3`                                                     |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 12|  :r:`t0,`  |    :r:`0.5278`   |   :r:`54.2066`   |:r:`EXCL: 3084:sWorld`                                                        |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 13|    :r:`8,` |    :r:`0.5310`   |   :r:`54.5298`   |:r:`ONLY: 1:uni_acrylic3`                                                     |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 14|       t3,  |        0.6017    |       61.7954    |    EXCL: 5:HamamatsuR12860sMask                                              |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 15|       t2,  |        0.6043    |       62.0620    |    EXCL: 5:NNVTMCPPMTsMask                                                   |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 16|       t5,  |        0.6171    |       63.3787    |    EXCL: 1:sStrutBallhead                                                    |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 17|       t6,  |        0.6196    |       63.6301    |    EXCL: 1:uni1                                                              |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 18|       t7,  |        0.6226    |       63.9458    |    EXCL: 1:base_steel                                                        |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 19|        t0  |        0.6240    |       64.0879    |    3084:sWorld                                                               |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 20|       t4,  |        0.6243    |       64.1169    |    EXCL: 5:mask_PMT_20inch_vetosMask                                         |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 21|       t9,  |        0.6335    |       65.0636    |    EXCL: 130:sPanel                                                          |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+
    | 22|       t1,  |        0.6391    |       65.6384    |    EXCL: 5:PMT_3inch_pmt_solid                                               |
    +---+------------+------------------+------------------+------------------------------------------------------------------------------+


.. s5_talk::

   This table shows render times for 2M pixels varying the geometry included or excluded. 
   First thing to note is the very large range, from thousandth of a second to seconds.

   Relative compares to "ONLY PMT". 

   The performance transitions clearly point to two Solids needing to be fixed.



:white:`JUNO ALL PMTs : 2M ray traced pixels in 0.0097 s : NVIDIA TITAN RTX, NVIDIA OptiX 7.0.0, Opticks`
------------------------------------------------------------------------------------------------------------

.. s5_talk::

    This is the ONLY PMTs render, with almost 50 thousand PMTs rendered in a hundredth of a second


.. comment

    :white:`[8]cxr_i0_1,2,3,4_-1 : ALL PMTS`
    ------------------------------------------

    .. s5_talk::

       8 : ALL PMTS




:small:`Summary and Links`
----------------------------------------------------------------

.. sidebar:: :small:`Next Steps`

   .. class:: small

      * Foundry JUNO geometry validation 
      * migrate optical physics to NVIDIA OptiX 7  
      * JUNO Production validation

.. image:: /env/presentation/1px.png
   :width: 500px
   :height: 20px

..

  *Opticks* : state-of-the-art GPU ray traced optical simulation integrated with *Geant4*. 
  Geometry progress with OptiX 7 suggests integration within months is achievable.

  .. image:: /env/presentation/1px.png
     :width: 1000px
     :height: 1px

  * Efficiency culling decision moved to GPU, reducing CPU hit memory 
  * "Foundry" geometry model implemented to support NVIDIA OptiX 7 API. 
  * :redbold:`First JUNO OptiX 7 renders achieved.` 

.. table::
    :align: center

    +--------------------------------------------------+-----------------------------------------+
    | https://bitbucket.org/simoncblyth/opticks        | code repository                         |                   
    +--------------------------------------------------+-----------------------------------------+
    | https://github.com/simoncblyth/opticks/releases  | .zip .tar.gz  archives                  |
    +--------------------------------------------------+-----------------------------------------+
    | https://simoncblyth.bitbucket.io                 | presentations and videos                |
    +--------------------------------------------------+-----------------------------------------+
    | https://groups.io/g/opticks                      | forum/mailing list archive              |
    +--------------------------------------------------+-----------------------------------------+
    | email:opticks+subscribe@groups.io                | subscribe to mailing list               |
    +--------------------------------------------------+-----------------------------------------+ 


.. s5_talk::

    Summary is that : Opticks provides state-of-the-art GPU ray tracing integrated with Geant4 and that 
    there has been substantial progress with the migration to OptiX 7, 
    which is essential to keep up with the state-of-the-art.
 
    Links to get you started with using Opticks are listed here.



:small:`Acknowledgement : Opticks "Hackathon" Series for NVIDIA OptiX 6->7`
------------------------------------------------------------------------------

* Suggested and organized by LZ, LBNL, NERSC 
* ~fortnightly meetings since Feb 2021
* :r:`Valuable advice from NVIDIA engineers` 
* see next talk by Oisin Creaner, **LZ with Opticks** 


.. s5_talk::

   This work has been assisted by a series of meetings organized by LZ people.
   Its been very helpful to get advice from NVIDIA engineers 

   The next talk covers LZ usage of Opticks.


:small:`LZ with Opticks (Images from Sam Eriksen, University of Bristol)`
--------------------------------------------------------------------------


.. s5_talk::

   Here are some Opticks renders of LZ, demonstating that Opticks is not JUNO specific, 
   it is structured to work with multiple geometries. 
   Although the more complex your optically important geometry the more work you will 
   have to get good performance.



.. comment


    :white:`[7]cxr_i0_2,_-1 : ONLY NNVT PMTs`
    -------------------------------------------

    .. s5_talk::

       7 


    :white:`[10]cxr_i0_0,_-1 : ONLY GLOBAL "REMAINDER"`
    -----------------------------------------------------------

    .. s5_talk::

       10 : REMAINDER ONLY : 0,


    :white:`[9]cxr_i0_t8,_-1 : EXCLUDE SLOWEST : 2`
    ------------------------------------------------

    .. s5_talk::

       9 : EXCLUDE THE SLOW : t8



.. comment

    cxr_view
    ------------



    cxr_view_0
    ------------

    cxr_solid_r0@
    ---------------



    cxr_view_1
    ------------

    cxr_solid_r1@
    ---------------

    cxr_solid_r1p
    -------------



    cxr_view_2
    ------------

    cxr_solid_r2@
    ---------------

    cxr_solid_r2p
    -------------



    cxr_view_3
    ------------

    cxr_solid_r3@
    ---------------

    cxr_solid_r3p
    -------------



    cxr_view_4
    ------------

    cxr_solid_r4@
    ---------------

    cxr_solid_r4p
    -------------




    cxr_view_5
    ------------

    cxr_solid_r5@
    ---------------





    cxr_view_6
    ------------

    cxr_solid_r6@
    ---------------




    cxr_view_7
    ------------

    cxr_solid_r7@
    ---------------



    cxr_view_8
    ------------

    cxr_solid_r8@
    ---------------



    cxr_view_9
    ------------

    cxr_solid_r9@
    ---------------




