

.. comment 

.. raw:: html

    <style type="text/css">
        span.alarm { color: red; } 
        span.warn { color: orange; } 
        span.ok { color: green; } 
        span.i { display: none; } 
        pre.sliteral { class:"literal-block small"; }   
        pre.mypre {
             display: block;
             font-family: monospace;
             font-size: 20px;
             white-space: pre;
             margin: 1em 0;
        }

    </style>

.. role:: i 
.. role:: alarm
.. role:: warn
.. role:: ok
.. role:: sliteral
.. role:: mypre 


.. include:: <s5defs.txt>

.. s5_background_image::

    #
    # slide titles and background image urls, 
    # including server relative urls like /env/geant4/geometry/collada/daeview/20140419-170713.png
    # and protocol relative urls like //localhost/env/test/LANS_AD3_CoverGas_Humidity.png
    #
    # NB1 slide titles here must match those in body precisely, 
    # NB2 also ensure all slide titles are unique
    #
    # first slide id is exceptionally: slide0, not the mangled title
    slide0
    /env/geant4/geometry/collada/g4daeview/20140419-170713.png auto_auto 0px_0px

    g4daeview.py : Fast OpenGL 3D viewer for G4DAE files
    /env/geant4/geometry/collada/g4daeview/20140419-170713.png

    Cerenkov Photons Simulation - Top View
    /env/geant4/geometry/collada/g4daeview/20141224-115923.png

    Cerenkov Photons Simulation - Side View
    /env/geant4/geometry/collada/g4daeview/20141224-115935.png

    Scintillation Photons Simulation - Top View
    /env/geant4/geometry/collada/g4daeview/20141224-121444.png

    Scintillation Photons Simulation - Side View
    /env/geant4/geometry/collada/g4daeview/20141224-121435.png

    Standard Geant4 Workflow
    /env/keynotefigs/G4DAEChroma/G4DAEChroma.001.png

    External Photon Simulation Workflow
    /env/keynotefigs/G4DAEChroma/G4DAEChroma.002.png

    GGeoView
    /env/graphics/ggeoview/ggeoview-cerenkov-001.png 1047px_795px

    GGeoView M1 Points
    /env/graphics/ggeoview/ggeoview-scintillation-points-mat1.png 1435px_848px

    GGeoView Flag Selection 
    /env/graphics/ggeoview/ggeoview-scintillation-flag-seq-select.png 1436px_842px

    GGeoView Cerenkov Geom M1
    /env/graphics/ggeoview/ggeoview-cerenkov-m1-geom.png 1416px_845px
    


.. comment 

    GGeoView image is 2094x1590 1047x795

    GGeoView M1 Points is 2870x1696  1435x848

    GGeoView Flag Selection 2872x1684 1436x842

    GGeoView Cerenkov Geom M1 2832x1690 1416x845


    Generated Scintillation Photons GPU cf Geant4
    /env/g4dae/generated_scintillation_time_wavelength.png

    G4/DetSim Generated Cerenkov Wavelength
    /env/g4dae/g4_cerenkov_wavelength.png







.. comment

   Last 6 weeks

   implemented optical physics in OptiX infrastructure
   squeeze photon record into 128 bit 
   record viz
   photon history/material indexing



======================================================================
Opticks : Optical Photon Simulation with NVIDIA OptiX
======================================================================

.. class:: small

    http://simoncblyth.bitbucket.org/env/presentation/optical_photon_simulation_progress.html (October 2015)
    http://simoncblyth.bitbucket.org/env/presentation/optical_photon_simulation_with_nvidia_optix.html (July 2015)
    http://simoncblyth.bitbucket.org/env/presentation/gpu_accelerated_geant4_simulation.html (Jan 2015)

.. class:: small

   **Executive Summary**

   * Transition to NVIDIA OptiX completed (Opticks) 
   * Validation comparisons with Geant4 started
   * Performance factors >> 100x **so large they become irrelevant**
   * Geant4 match achieved with simple geometries 
   * :blue:`uncertain how long to achieve full geometry match`

   **Contents**

   * Brief History of GPU Optical Photon Simulation Development
   * Introducing Opticks
   * Large Geometry/Event Techniques

   * Handling JUNO geometry 
   * 800x less memory with instancing
   * Analytic PMT geometry : avoiding *disco ball* 
   * IAV, OAV mesh fixing with OpenMesh surgery
   * Photon Torpedo testing 
   * Optical Photons GPU resident
   * Progress Overview

   |  Simon C Blyth, National Taiwan University
   |  **January 2016** 



:small:`Brief History of GPU Optical Photon Simulation Development`
----------------------------------------------------------------------

.. sidebar:: Transition to Opticks 

    .. class:: small
    
         **Optical Photon Problem** 

         *Geant4* optical photon propagation dominates (~95%) 
         simulation time. 

         **Optical Photon Solution** 

         External photon propagation made possible by  
         isolated nature of photons in simulation chain.
         
         * produced only by Cerenkov/Scintillation 
         * yielding only PMT hits 

         **NVIDIA OptiX Ray tracing framework** 

         * state-of-the-art GPU accelerated ray tracing
         * performance scales across multiple GPUs, verified
           linearity with IHEP 4 GPU workstation
         * regular releases: improvements, new GPU tuning
         


.. class:: small

   **winter 2014** (within *Chroma*)

   * integrate G4DAE geometry exports
   * generate Cerenkov/Scintillation photons on GPU

   **spring 2015** (start transition to *Opticks*)

   * :red:`realize lack of efficient multi-GPU is showstopper` for *Chroma* 
   * discover :blue:`NVIDIA OptiX` ray tracing framework 
   * begin developing *Opticks* (based on OptiX) to replace *Chroma*

   **summer/autumn 2015** (*Opticks* transition completed)

   * infrastructure operational, G4 optical physics ported 
   * large geometry support added using instancing  

   **autumn/winter 2015**

   * major geometry bug discovered, fix implemented using *OpenMesh*   
   * develop analytic PMT description 
   * dynamic creation of simple test geometries in *Opticks*/*Geant4* allows validation comparisons to begin   

.. class:: tiny

   Newton published Opticks in 1704



:small:`Introducing Opticks`
------------------------------

.. sidebar:: Opticks ~15 C++ Packages 

      .. class:: small

          Organized by dependencies

          * :red:`Recreates Geant4 context on GPU`
          * :blue:`Optical simulation by OptiX programs` 
          * :blue:`Photon Indexing by Thrust`

          Interop between OpenGL/OptiX/Thrust/CUDA  

          * :blue:`shared GPU buffers, efficient visualization`

          C++ code but NumPy analysis/debugging by using 
          :red:`.npy serialization` for all buffers 

          Externals: 

          * Boost + Asio-ZMQ, ZMQ
          * CUDA 7.0, Thrust 1.8, OptiX 3.8, OpenGL 4.1 
          * OpenMesh 4.1 
          * ImGUI  
          * Geant4 10.2 


.. class:: small

   **Basis packages**

   * *Opticks* : definitions, configuration
   * *NPY* : host array handling, persistency, python analysis
   * *NumpyServer* : network IO of *NPY* arrays

   **Geometry packages** 

   * *AssimpWrap* : G4DAE geometry loading using forked Assimp
   * *GGeo* : preparing geometry for GPU
   * *OpenMeshRap* : mesh fixing 

   **GPU library interface packages** 

   * *OpticksOp* : high level control of GPU libs
   * *OptiXRap* : OptiX control
   * *ThrustRap* *CUDAWrap* : photon indexing, cuRAND RNG
   * *OGLWrap* : OpenGL visualization

   **Main packages**
   
   * *GGeoView* : visualization, Opticks main
   * *CFG4* : Geant4 comparison, CfG4 main


:small:`Large Geometry/Event Techniques`
------------------------------------------------------- 

.. sidebar:: JUNO Geometry 

   .. class:: small

      289733 volumes in ``test3.dae`` 

      Split into non-instanced (global) and instances 

      *     0 Global     95436 faces 
      * 36572 PMT_3inch    540 faces 
      * 19452 PMT_20inch  3502 faces
      *   480 lFasteners  1856 faces
      *   124 lPlane      6252 faces 

.. class:: small

   **Instancing implemented for OpenGL and OptiX**

   Geometry analysed to find instances
   (repeated sub-trees with their transforms) 

   * JUNO: ~90M triangles, instancing reduces to 0.1M

   **Split Rendering**

   * Multiple renderers: global, full instances, bbox instances
   * GUI control of which to use

   **Compute Mode**

   * Pure OptiX buffers are faster and use less GPU memory 
   * Visualize with OpenGL separately by event loading 
      
   **Ideas to investigate**

   * Analytic PMT definition expected to improve OptiX efficiency 
   * Culling non-visible geometry to improve OpenGL performance


.. class:: tiny  

   Forced to duplicate data on GPU as OpenGL/OptiX geometry sharing not operational


:small:`JUNO Geometry Instance Rendering Control`
------------------------------------------------------- 

.. image:: /env/graphics/ggeoview/ggv-juno-instancing.png
   :width: 900px
   :align: center


:small:`Handling JUNO Geometry`
------------------------------------------------------- 
 
.. image:: /env/graphics/ggeoview/ggeoview-cerenkov-jpmt.png
   :width: 900px
   :align: center


:small:`Analytic PMT geometry : more realistic, faster, less memory`
---------------------------------------------------------------------

.. class:: small
 
   * parse Dayabay detdesc XML to give CSG tree : solids with boolean intersections, unions
   * partition 5 solids into 12 **single primitive** parts 
   * splitting at geometrical intersections avoids implementing general CSG boolean handling

.. image:: /env/nuwa/detdesc/pmt/hemi-pmt-solids.png
   :width: 900px
   :align: center


:small:`Analytic PMT in 12 parts instead of 2928 triangles`
-------------------------------------------------------------

.. class:: small

   Implement OptiX geometry with ray intersection code:
   solves quadratic for sphere/cylinder, handles various cases  

.. image:: /env/nuwa/detdesc/pmt/hemi-pmt-parts.png
   :width: 700px
   :align: center

.. class:: tiny

   Sphere intersection only 2 cases, Cylinder 10 cases (axial, walls, endcap, outside/inside) 


:small:`OptiX Ray Traced Analytic PMT geometry`
------------------------------------------------

.. class:: small

   Analytic geometry: more realistic, faster, less memory, BUT a lot more effort than triangulated.   

.. image:: /env/nuwa/detdesc/pmt/hemi-pmt-analytic-near-clipped.png
   :width: 900px
   :align: center

.. class:: tiny 

   Near clipped, orthographic projection.


:small:`Analytic PMTs together with triangulated geometry`
----------------------------------------------------------------

.. class:: small

   PMTs analytic, the rest triangulated 

.. image:: /env/nuwa/detdesc/pmt/analytic-pmt-optix-geometry.png
   :width: 900px
   :align: center


:small:`Volume to Surface Translation details need validation`
------------------------------------------------------------------

.. sidebar:: PMT Edge Zoom 

    .. class:: small
    
        Zoomed view of PMT edge (mm): showing 3mm Pyrex, 

        .. image:: /env/nuwa/detdesc/pmt/analytic-pmt-detail.png
           :width: 600px
           :align: center

        **Volume based geometry can get away with coincident
        boundaries, Surface based geometry cannot**


.. class:: small

    **Volume Based Geometry** 

    Heirarchy: Pyrex/Vacuum/Bialkali  

    * photocathode inside vacuum with coincident boundary 

    **Surface Based Geometry**

    Adjusted heirarchy: Pyrex/Bialkali/Vacuum 

    * **avoids coincidence problem**



:small:`Dayabay IAV, OAV mesh fixing with OpenMesh surgery`
------------------------------------------------------------

.. sidebar:: After fix 

    .. class:: small

        Photon Color indicates material
 
        .. image:: /env/graphics/ggeoview/mesh-fix-iav-oav.png
           :width: 500px
           :align: center

.. class:: small

    Intersection boundary determines photon material, 

    * top lid photons wrongly assigned Acrylic (not GdLS)

    G4Polyhedron tesselation bug:

    * splits some CSG unions into multiple meshes with **close parallel faces**
    * ~25/250 Dayabay meshes have issues eg Eulers Characteristic ``V - E + F != 2`` 
    * two critical ones fixed: IAV, OAV. 
    * close parallel faces causes flickering OpenGL render




:small:`OpenMeshRap package`
------------------------------------------------

.. sidebar:: Exploded Z across the mend

    .. image:: /env/graphics/ggeoview/openmeshrap-fix.png
       :width: 500px
       :align: center

.. class:: small

   Created package *OpenMeshRap* to develop fix

   * based on open source project: **OpenMesh** 

   * extracts real topological meshes
   * finds close parallel faces between the meshes
   * deletes the extra faces
   * stitches the split mesh together with added triangles


:small:`Photon Torpedo 0`
------------------------------------------------
.. raw:: html

    <pre class="mypre">
    ggv.sh --analyticmesh 1 \
          --torchconfig "frame=3199;radius=150;zenith_azimuth=1,0,1,0;source=0,0,1000;target=0,0,0" 
    </pre>

.. image:: /env/graphics/ggeoview/photon-torpedo-3199-0.png
   :width: 900px
   :align: center



:small:`Photon Torpedo 1`
------------------------------------------------

.. class:: small

   Full geometry too complicated. Working on dynamic test box for checking PMTs and optical physics simulation.

.. image:: /env/graphics/ggeoview/photon-torpedo-3199-1.png
   :width: 900px
   :align: center


:small:`Photon Torpedo 2`
------------------------------------------------

.. class:: small

   Select photons according to their history, here just detected ones.

.. image:: /env/graphics/ggeoview/photon-torpedo-3199-2.png
   :width: 900px
   :align: center


:small:`Photon Torpedo Splashback`
------------------------------------------------

.. class:: small

   Here with no geometry represented, just 0.5M *torch* photons 

.. image:: /env/graphics/ggeoview/photon-torpedo-3199-splashback.png
   :width: 900px
   :align: center



:small:`Optical Photons now fully GPU resident`
--------------------------------------------------

.. class:: small

     All photon operations now done on GPU:

     * seeded (assigned gensteps)
     * generated 
     * propagated
     * indexing material/interaction histories 
     
     Only PMT hits are copied back to CPU


.. class:: tiny

     Thrust/CUDA/OptiX interop used to implement



:small:`Dynamic Test Geometry`
--------------------------------------

.. class:: small

   Following refactor of Material/Surface/Boundary handling
   can now dynamically add test geometry/materials/surfaces.

   Each shape requires: 
   
   * analytic intersection code for OptiX
   * tesselation for OpenGL visualization

   Have implemented:

   * box
   * sphere (including partial)
   * lens (intersection of two spheres) 
   * prism

   Using to validate simulation results against analytic expectations.


:small:`Prism S-Polarized`
------------------------------------------------------------------

.. class:: small

    Quadrant of cylindrically directed S-polarized photons at 10 wavelengths (from 100 to 800 nm) 
    incident from left.  

.. class:: tiny

    S-polarization: perpendicular to incident plane


.. image:: /env/numerics/npy/prism-spol-ripple.png
   :width: 900px
   :align: center


:small:`Prism P-Polarized`
------------------------------------------------------------------

.. class:: small

    Gap in reflection at Brewsters angle is apparent where 
    the P-polarized photons can only be transmitted. 

.. class:: tiny

    P-polarization: not perpendicular to incident plane


.. image:: /env/numerics/npy/prism-ppol-ripple.png
   :width: 900px
   :align: center


:small:`Monochromatic : expected vs simulated reflection`
---------------------------------------------------------------------

.. class:: small

   Comparison of simulated absolute reflection of S and P polarized single events against 
   expectation from Fresnel formula. Using uniform planar incident cyclindrically directed light.

.. image:: /env/numerics/npy/reflection.png
   :width: 900px
   :align: center


:small:`Prism Deviation vs Incident angles for 10 wavelengths`
------------------------------------------------------------------

.. class:: small

   Prism geometry and Snell's law at two refractions allows deviation 
   angle vs incident angle to be predicted.  Comparison of simulation
   results with expectations for 10 wavelengths   
   using refractive index of Schott F2 Flint Glass.

.. image:: /env/numerics/npy/prism-deviation.png
   :width: 900px
   :align: center


:small:`Lens focussing`
----------------------------------------------------------

.. class:: small

    Lens constructed from intersection of two spheres.
    Disc parallel beam incident from left.
    Color represents polarization direction.  2nd reflections 
    are apparent. 


.. image:: /env/graphics/ggeoview/lens-polcolor.png
   :width: 900px
   :align: center



:small:`Rainbow deviation angles`
----------------------------------------------------------

.. class:: tiny

    Plot without selection of deviation angles of 3M photons. Photon wavelengths
    from Plankian 6500K blackbody spectrum (implemented with inverse CDF GPU texture lookup).
    Simulated "images" obtained from wavelength spectrum of each bin using CIEXYZ weighting functions 
    converted into sRGB/D65 colorspace.   
    The two images expose for luminance (CIE-Y) of max bin of 1st and 2nd bows.

.. image:: /env/numerics/npy/rainbow16_deviation_angle.png
   :width: 900px
   :align: center


:small:`Rainbow Spectrum for 1st six bows`
----------------------------------------------------------

.. class:: tiny

    Spectra obtained by selecting photons by internal reflection counts. 
    Colors obtained from spectra of each bin using CIEXYZ weighting functions 
    converted into sRGB/D65 colorspace.  
    Exposures by normalizing to bin with maximum luminance (CIE-Y) of each bow. 
    White lines indicate geometric optics prediction of deviation angle ranges 
    of the visible range 380-780nm. 180-360 degrees signifies exit on same 
    side of droplet as incidence.  
 

.. image:: /env/numerics/npy/rainbow6-spectrum.png
   :width: 900px
   :align: center



:small:`Performance Comparison Opticks/Geant4`
----------------------------------------------------------

.. sidebar:: 1M Photons Rainbow 

    .. class:: small

        .. image:: /env/optix/cfg4/rainbow-cfg4-2.png
           :width: 500px
           :align: center


.. class:: small

    **Average Propagate Time for 1M photons** 

    MacBook Pro 2013, NVIDIA GeForce GT 750M 2GB (384 cores)

    ====================  =================  =================  ================== 
     Test                    Geant4 10.2       Opticks Interop     Opticks Compute      
    ====================  =================  =================  ================== 
     Rainbow 1M                56 s               1.62 s            0.28 s         
    ====================  =================  =================  ================== 

    * **Opticks ~200X Geant4 with only 384 cores**
    * multi-GPU workstation up to 20x the cores 
    * :red:`photon propagation time will become effectively zero`
   
    **Opticks Interop/Compute Modes**

    * bit perfect identical results, monitored by digest
    * Interop: uses OpenGL buffers allowing visualization
    * Compute: uses OptiX buffers
    * Compute (and G4) propagated events can be visualized 
      by loading into interop mode viewer



:small:`Progress Overview`
-----------------------------

.. class:: small

   **Resolved several large obvious geometry problems**

   * squeezing JUNO geometry onto GPU with instancing
   * fixing bad triangulations using OpenMesh surgery   
   * replace triangulated PMTs with more realistic analytic ones


:small:`Progress Overview Continued`
--------------------------------------

.. class:: small

   * simplified analytic PMT by removing coincident surfaces

   * implemented dynamic test geometry: box, sphere, lens, prism

   * reflection, refraction, dispersion tests so far matching, 
     :red:`after fixing/avoiding several geometry issues`

   Geometry Issues Fixed/Avoidable:

   * triangulated geometry leaks when shoot millions of photons at cracks (1)
   
   * bounding boxes that touch geometry cause leaks, slightly   
     enlarging the boxes avoids leak (<1 in 3M)  
   

.. class:: tiny

    (1) more of a problem for testing than actual usage

